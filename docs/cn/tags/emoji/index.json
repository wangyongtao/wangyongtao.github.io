[{"content":"HTTP 表单提交中 Request Payload 和 FormData 有什么区别？\nFormData 和 Request Payload 是浏览器传给服务端接口的两种格式，这两种方式浏览器是通过 Content-Type 来进行区分的。\n如果是 enctype=\u0026ldquo;application/x-www-form-urlencoded\u0026rdquo; 或 enctype=\u0026ldquo;multipart/form-data\u0026rdquo; 的话，则为 FormData 方式。\n如果是 application/json 或 enctype=\u0026ldquo;text/plain\u0026rdquo; 的话，则为 Request Payload 的方式。\nHtml代码查看 FormData 使用 HTML 直接提交数据。HTML代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;application/x-www-form-urlencoded\u0026#34;\u0026gt; --\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;text/plain\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; --\u0026gt; name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;formdata1\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; description: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;description\u0026#34; value=\u0026#34;测试测试测试...\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; tag: \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag1\u0026#34;\u0026gt; tag1 \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag2\u0026#34;\u0026gt; tag2 \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag3\u0026#34;\u0026gt; tag3 \u0026lt;br/\u0026gt; action: \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;action[blog][key]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;blog\u0026#34;\u0026gt; blog \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;action[blog][value]\u0026#34; value=\u0026#34;value111\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;action[bbs][key]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;bbs\u0026#34;\u0026gt; bbs \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;action[bbs][value]\u0026#34; value=\u0026#34;value222\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt; submit \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt;   通过 Chrome 控制台 Network 查看请求头：\n1 2 3 4 5 6 7 8 9 10  // FormData 数据 name: formdata1 description: 测试测试测试... tags[]: tag1 tags[]: tag2 tags[]: tag3 action[blog][key]: blog action[blog][value]: value111 action[bbs][key]: bbs action[bbs][value]: value222   后端(PHP)接收到数据格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  // index.php 文件输出的内容： Array ( [URLSearchParams] =\u0026gt; [name] =\u0026gt; formdata1 [description] =\u0026gt; 测试测试测试... [tags] =\u0026gt; Array ( [0] =\u0026gt; tag1 [1] =\u0026gt; tag2 [2] =\u0026gt; tag3 ) [action] =\u0026gt; Array ( [blog] =\u0026gt; Array( [key] =\u0026gt; blog [value] =\u0026gt; value111 ) [bbs] =\u0026gt; Array( [key] =\u0026gt; bbs [value] =\u0026gt; value222 ) ) )   使用 JS 发送请求数据 在前端开发中，我们一般不直接使用 HTML 提交数据到后台，而需要 JS 处理后台（比如进行表单数据校验、数据转换等）后，直接使用 JS 提交数据。\n在之前，我们可以使用 jQuery 进行提交数据。\n1 2 3 4 5 6 7 8 9 10 11  var form = $(\u0026#34;#myForm\u0026#34;).serialize(); $.ajax({ type: \u0026#39;POST\u0026#39;, url: \u0026#39;https://wang123.net/api/test\u0026#39;, data: form, dataType: \u0026#39;json\u0026#39;, success: function (res) { // 请求成功后处理  console.log(res); } });   现在 vuejs 开发中，一半使用 axios.js 请求库。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // axios.js 的默认请求使用 payload 传输 json数据 const formElement = document.querySelector(\u0026#39;#myForm\u0026#39;); const formData = new FormData(formElement); axios.post(\u0026#39;http://localhost:8003?Payload\u0026#39;, { type: \u0026#39;我是用payload提交的json数据\u0026#39;, name: formData.get(\u0026#39;name\u0026#39;), description: formData.get(\u0026#39;description\u0026#39;), tags: formData.getAll(\u0026#39;tags[]\u0026#39;), action: { blog: {key: 111, value: \u0026#39;asdf\u0026#39;}, bbs: {key: 222, value: \u0026#39;ghjk\u0026#39;}, }, }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); });   服务端如何接受数据呢？ 预定义变量 $_REQUEST 、$_POST、 $_GET 只能获取 FormData 格式数据，即请求。\n(1)预定义的 $_POST 变量用于收集来自 method=\u0026quot;post\u0026quot; 的表单中的值。\n(2)预定义的 $_GET 变量用于收集来自 method=\u0026quot;get\u0026quot; 的表单中的值。\n(3)预定义的 $_REQUEST 变量包含了 $_GET、$_POST 和 $_COOKIE 的内容。\n想要获取 application/json 的原始数据，需要直接从 php://input 获取请求body的数据，自己反序列化成数组或对象。\nphp://input 是个可以访问请求的原始数据的只读流。\nphp://input 不能用于 enctype=\u0026quot;multipart/form-data\u0026quot;的表单数据。\n第一种： 原生PHP处理 Request Payload 数据示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?php // 文件路径：demo/index.php  // 服务端接受表单数据 // $_REQUEST 、$_POST、 $_GET 只能获取 FormData 格式数据 print_r($_REQUEST); // 需要直接从 php://input 获取请求body的原始数据，自己反序列化成数组或对象。 $requestBody = file_get_contents(\u0026#39;php://input\u0026#39;); var_dump($requestBody); $formData = json_decode($requestBody, true); print_r($formData);   测试环境可以使用 php -S localhost:8003 -t ./demo/ 启动服务。\n第二种： 使用现代框架\n如果使用 Web 框架，框架里一般都已经提供了 Request Payload 解析，可以直接使用。\n比如 PHP Laravel 框架，可以直接从 Request 对象中取到数据。\n第三中方法: 修改 axios 等类库，转成 FormData 提交数据。\n(1)可以引入 qs.js 类库来提交FormData数据（略）\n(2)可以使用URLSearchParams API， 提交 FormData 数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  // 引入 qs.js 类库 // 请求接口 使用 Qs.stringify 转换 axios.post(\u0026#39;index.php?Act=comm\u0026amp;do=query\u0026#39;, Qs.stringify(queryData), { timeout: 5000 } ) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); // 使用URLSearchParams API const params = new URLSearchParams(); for (let [key, value] of formData) { // console.log(\u0026#39;formData: \u0026#39;, key, value); \tparams.append(key, value); } axios.post(\u0026#39;http://localhost:8003?URLSearchParams\u0026#39;, params) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); });   完整代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;FormData测试\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;./axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;application/x-www-form-urlencoded\u0026#34;\u0026gt; --\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;form id=\u0026#34;myForm\u0026#34; method=\u0026#34;POST\u0026#34; onsubmit=\u0026#39;return checkForm()\u0026#39;\u0026gt; --\u0026gt; name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;formdata1\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; description: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;description\u0026#34; value=\u0026#34;测试测试测试...\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; tag: \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag1\u0026#34;\u0026gt; tag1 \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag2\u0026#34;\u0026gt; tag2 \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag3\u0026#34;\u0026gt; tag3 \u0026lt;br/\u0026gt; action: \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;action[blog][key]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;blog\u0026#34;\u0026gt; blog \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;action[blog][value]\u0026#34; value=\u0026#34;value111\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;action[bbs][key]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;bbs\u0026#34;\u0026gt; bbs \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;action[bbs][value]\u0026#34; value=\u0026#34;value222\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt; submit \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function checkForm() { console.log(\u0026#39;---\u0026gt; 表单提交：\u0026#39;); const formElement = document.querySelector(\u0026#39;#myForm\u0026#39;); const formData = new FormData(formElement); console.log(\u0026#34;---\u0026gt; formElement\u0026#34;, formElement) console.log(\u0026#34;---\u0026gt; formData\u0026#34;, formData) console.log(\u0026#34;---\u0026gt; formData.getAll name\u0026#34;, formData.getAll(\u0026#39;name\u0026#39;)) // axios 默认使用 payload 传递数据，将对象序列化为JSON  axios.post(\u0026#39;http://localhost:8003?Payload\u0026#39;, { type: \u0026#39;我是用payload提交的json数据\u0026#39;, name: formData.get(\u0026#39;name\u0026#39;), description: formData.get(\u0026#39;description\u0026#39;), tags: formData.getAll(\u0026#39;tags[]\u0026#39;), action: { blog: {key: 111, value: \u0026#39;asdf\u0026#39;}, bbs: {key: 222, value: \u0026#39;ghjk\u0026#39;}, }, }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); // axios 提交 FormData 数据  axios.post(\u0026#39;http://localhost:8003?formData\u0026#39;, formData) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); // (1)可以引入 qs.js 类库来提交FormData数据（略）  // (2)可以使用URLSearchParams API， 提交FormData数据  const params = new URLSearchParams(); for (let [key, value] of formData) { // console.log(\u0026#39;formData: \u0026#39;, key, value);  params.append(key, value); } axios.post(\u0026#39;http://localhost:8003?URLSearchParams\u0026#39;, params) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); return true; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   参考资料 https://www.cnblogs.com/tugenhua0707/p/8975615.html\nhttps://gomakethings.com/how-to-serialize-form-data-with-vanilla-js/\n[END]\n","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":2,"section":"posts","tags":["Web","Request Payload","FormData"],"title":"HTTP 表单提交中 Request Payload 和 FormData 有什么区别","uri":"https://wangyongtao.github.io/cn/posts/request-payload-vs-formdata/"},{"content":"Golang中string和int类型相互转换\nstring 转成 int string 转成 int：\n1  int, err := strconv.Atoi(string)   string 转成 int64：\n1  int64, err := strconv.ParseInt(string, 10, 64)   string 转成 uint64：\n1  uint64, err := strconv.ParseUint(string, 10, 64)   int 转成 string int 转成 string：\n1  string := strconv.Itoa(int)   int64 转成 string：\n1  string := strconv.FormatInt(int64,10)   uint64 转成 string：\n1  string := strconv.FormatUint(uint64,10)   数字类型\n1 2 3 4 5 6 7 8  1 uint8 : 无符号 8 位整型 (0 到 255) 2 uint16 : 无符号 16 位整型 (0 到 65535) 3 uint32 : 无符号 32 位整型 (0 到 4294967295) 4 uint64 : 无符号 64 位整型 (0 到 18446744073709551615) 5 int8 : 有符号 8 位整型 (-128 到 127) 6 int16 : 有符号 16 位整型 (-32768 到 32767) 7 int32 : 有符号 32 位整型 (-2147483648 到 2147483647) 8 int64 : 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)   浮点型\n1 2 3 4  1 float32 IEEE-754 32位浮点型数 2 float64 IEEE-754 64位浮点型数 3 complex64 32 位实数和虚数 4 complex128 64 位实数和虚数   其他数字类型\n1 2 3 4 5  1 byte 类似 uint8 2 rune 类似 int32 3 uint 32 或 64 位 4 int 与 uint 一样大小 5 uintptr 无符号整型，用于存放一个指针   References ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":3,"section":"posts","tags":["Golang"],"title":"Golang中string和int类型相互转换","uri":"https://wangyongtao.github.io/cn/posts/golang%E4%B8%ADstring%E5%92%8Cint%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"content":"Markdownify box This is boxmd shortcode Simple box This is **box** shortcode  Code tabs Make it easy to switch between different code\njava javascript  1  System.out.println(\u0026#39;Hello World!\u0026#39;);     1  console.log(\u0026#39;Hello World!\u0026#39;);       'use strict'; var containerId = JSON.parse(\"\\\"d96f892eb0443615\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Tabs for general purpose Windows MacOS Ubuntu  Windows section 1  console.log(\u0026#39;Hello World!\u0026#39;);   ⚠️Becareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\n MacOS section Hello world!  Ubuntu section Great!    'use strict'; var containerId = JSON.parse(\"\\\"0fa06ef53ae6dc58\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; }  Expand   Expand me  Title contents     Expand me2  Title2 contents2   Alert Colored box\nthis is a text this is a text this is a text this is a text Notice success text  info text  warning text  error text  ","description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":4,"section":"posts","tags":["shortcode"],"title":"Shortcodes","uri":"https://wangyongtao.github.io/cn/posts/shortcodes/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn: Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":5,"section":"posts","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://wangyongtao.github.io/cn/posts/markdown-syntax/"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n","description":"A brief description of Hugo Shortcodes","id":6,"section":"posts","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://wangyongtao.github.io/cn/posts/rich-content/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line Makefile CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt;  int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;  CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   ","description":"Syntax highlighting test","id":7,"section":"posts","tags":["hugo"],"title":"Syntax highlighting","uri":"https://wangyongtao.github.io/cn/posts/syntax-highlight/"},{"content":"We need goldmark katex entension which is not yet we have: [https://github.com/gohugoio/hugo/issues/6544](https://github.com/gohugoio/hugo/issues/6544)  Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\n","description":"A brief guide to setup KaTeX","id":8,"section":"posts","tags":null,"title":"Math Typesetting","uri":"https://wangyongtao.github.io/cn/posts/math-typesetting/"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"Guide to emoji usage in Hugo","id":9,"section":"posts","tags":["emoji","gamoji","namoji","bamoji","amoji"],"title":"Emoji Support","uri":"https://wangyongtao.github.io/cn/posts/emoji-support/"},{"content":"digraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; label = \u0026quot;process #1\u0026quot;; } subgraph cluster_1 { node [style=filled]; b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; label = \u0026quot;process #2\u0026quot;; color=blue } start -\u0026gt; a0; start -\u0026gt; b0; a1 -\u0026gt; b3; b2 -\u0026gt; a3; a3 -\u0026gt; a0; a3 -\u0026gt; end; b3 -\u0026gt; end; start [shape=Mdiamond]; end [shape=Msquare]; } ","description":"A hack to put Graphviz on the web.","id":10,"section":"posts","tags":[""],"title":"Viz support","uri":"https://wangyongtao.github.io/cn/posts/test-viz/"},{"content":"{ \u0026quot;signal\u0026quot;: [ {\u0026quot;name\u0026quot;: \u0026quot;CLK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;p.....|...\u0026quot;}, {\u0026quot;name\u0026quot;:\u0026quot;DAT\u0026quot;, \u0026quot;wave\u0026quot;:\u0026quot;x.345x|=.x\u0026quot;, \u0026quot;data\u0026quot;:[\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;,\u0026quot;D\u0026quot;]}, {\u0026quot;name\u0026quot;: \u0026quot;REQ\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;0.1..0|1.0\u0026quot;}, {}, {\u0026quot;name\u0026quot;: \u0026quot;ACK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;1.....|01.\u0026quot;} ]} ","description":"WaveDrom is a Free and Open Source online digital timing diagram (waveform) rendering engine that uses javascript, HTML5 and SVG to convert a WaveJSON input text description into SVG vector graphics.","id":11,"section":"posts","tags":[""],"title":"Wavedrom support","uri":"https://wangyongtao.github.io/cn/posts/test-wavedrom/"},{"content":"{ \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [{ \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 3, 8] }] } } { \u0026quot;type\u0026quot;: \u0026quot;line\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [ { \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 2, 3], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;orange\u0026quot; }, { \u0026quot;label\u0026quot;: \u0026quot;Some other set\u0026quot;, \u0026quot;data\u0026quot;: [15, 8, 13, 5, 5, 9], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;#44ccff\u0026quot; } ] } } ","description":"Simple yet flexible JavaScript charting for designers \u0026 developers","id":12,"section":"posts","tags":[""],"title":"Chart support","uri":"https://wangyongtao.github.io/cn/posts/test-chartjs/"},{"content":"Alice-\u0026gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--\u0026gt;Alice: I am good thanks! Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow ","description":"Generates UML sequence diagrams from simple text","id":13,"section":"posts","tags":[""],"title":"JS Sequence Diagram support","uri":"https://wangyongtao.github.io/cn/posts/test-js-sequence-diagrams/"},{"content":"graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85 \u0026quot;Rats\u0026quot; : 15 ","description":"Generate diagrams, charts, graphs or flows from markdown-like text via javascript.","id":14,"section":"posts","tags":["diagram"],"title":"Mermaid support","uri":"https://wangyongtao.github.io/cn/posts/test-mermaid/"},{"content":"When $a \\ne 0$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\n","description":"A JavaScript display engine for mathematics that works in all browsers.No more setup for readers. It just works.","id":15,"section":"posts","tags":[""],"title":"MathJax support","uri":"https://wangyongtao.github.io/cn/posts/test-mathjax/"},{"content":"The following\n$$ \\int_{a}^{b} x^2 dx $$\nIs an integral\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEnable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.\nSee the online reference of supported TeX functions.\nNote: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.\nInline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $ Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","description":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.","id":16,"section":"posts","tags":[""],"title":"Katex support","uri":"https://wangyongtao.github.io/cn/posts/test-katex/"},{"content":"st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e ","description":"flowchart.js is a flowchart DSL and SVG render that runs in the browser and terminal. Nodes and connections are defined in separately so that nodes can be reused and connections can be quickly changed.","id":17,"section":"posts","tags":[""],"title":"Flowchart support","uri":"https://wangyongtao.github.io/cn/posts/test-flowchart/"},{"content":"Sample images from Pixabay\n","description":"cartoon gallery","id":18,"section":"gallery","tags":null,"title":"Cartoon","uri":"https://wangyongtao.github.io/cn/gallery/cartoon/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":19,"section":"gallery","tags":null,"title":"Photo","uri":"https://wangyongtao.github.io/cn/gallery/photo/"},{"content":"Go语言第一个HelloWorld程序\nGo，又称 Golang，是一个Google于2009年11月开源的编译型编程语言。\n目前， Go语言最新版本为 go1.16.2 (released 2021/03/11) 。​\n安装 Go 最简单的方式是，直接去官网(golang.org)下载安装包。\n安装包下载地址为：https://golang.org/dl/。\n如果打不开可以使用国内的这个地址：https://golang.google.cn/dl/。\nWindows: xxx.windows-amd64.msi\nmacOS: xxx.darwin-amd64.pkg\nLinux: xxx.linux-amd64.tar.gz\nSource源代码: xxx.src.tar.gz\n​根据不同的操作系统选择不同的​安装包进行安装即可。\n查看当前系统的版本（macOS）：\n1 2 3 4  $ sw_vers ProductName:\tMac OS X ProductVersion:\t10.15.7 BuildVersion:\t19H2   查看go命令路径，看看go语言程序放在哪里了？\n$ which go /usr/local/go/bin/go Go 被安装在了 /usr/local/go 路径下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  $ ll /usr/local/go total 384 -rw-r--r-- 1 root wheel 54K 3 12 01:15 AUTHORS -rw-r--r-- 1 root wheel 1.3K 3 12 01:15 CONTRIBUTING.md -rw-r--r-- 1 root wheel 99K 3 12 01:15 CONTRIBUTORS -rw-r--r-- 1 root wheel 1.4K 3 12 01:15 LICENSE -rw-r--r-- 1 root wheel 1.3K 3 12 01:15 PATENTS -rw-r--r-- 1 root wheel 1.4K 3 12 01:15 README.md -rw-r--r-- 1 root wheel 397B 3 12 01:15 SECURITY.md -rw-r--r-- 1 root wheel 8B 3 12 01:16 VERSION drwxr-xr-x 22 root wheel 704B 3 12 01:15 api drwxr-xr-x 4 root wheel 128B 3 12 02:02 bin drwxr-xr-x 6 root wheel 192B 3 12 01:15 doc -rw-r--r-- 1 root wheel 5.6K 3 12 01:15 favicon.ico drwxr-xr-x 3 root wheel 96B 3 12 01:15 lib drwxr-xr-x 14 root wheel 448B 3 12 01:15 misc drwxr-xr-x 6 root wheel 192B 3 12 01:18 pkg -rw-r--r-- 1 root wheel 26B 3 12 01:15 robots.txt drwxr-xr-x 69 root wheel 2.2K 3 12 01:16 src drwxr-xr-x 333 root wheel 10K 3 12 01:16 test   在 /usr/local/go/bin/ 目录下有2个可执行文件，一个为 go 一个为 gofmt (用了格式化代码)。\n1 2 3 4 5 6  $ tree /usr/local/go/bin/ /usr/local/go/bin/ ├── go └── gofmt 0 directories, 2 files   使用 go version 命令，查看 go 语言的版本:\n1 2 3 4 5  $ go version go version go1.16.2 darwin/amd64 $ /usr/local/go/bin/go version go version go1.16.2 darwin/amd64   目前安装的是 go1.16.2 版本。\nHelloWorld 程序 (1) 创建一个文件名为: hello.go，代码如下：\n1 2 3 4 5 6 7  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;); }   (2) 使用 go run 命令运行 hello.go 程序:\n1 2  $ go run hello.go Hello, World!   go run 编译并直接运行程序。\n(3) 使用 go build 构建代码，并执行编译后的可执行文件:\n1 2 3  $ go build hello.go $ ./hello Hello, World!   go build 用于构建代码，主要检查是否会有编译错误，如果是一个可执行文件的源码（即是 main 包），就会直接生成一个可执行文件。\n程序分析 文件 hello.go :\n1 2 3 4 5 6 7 8 9 10 11 12  // 定义了包名 (可以看到包名和文件名) package main // 引入 fmt 包，fmt 包实现了格式化 IO（输入/输出）的函数 import \u0026#34;fmt\u0026#34; // main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数 // 如果有 init() 函数则会先执行该函数。 func main() { // 将字符串输出到控制台，并在最后自动增加换行字符\u0026#34;\\n\u0026#34;  fmt.Println(\u0026#34;Hello, World!\u0026#34;) }   基础语法简介 (1) 在 Go 程序中，一行代码就代表一个语句结束，不用加分号(;)，加上分号也能正常运行。\n(2) 变量的声明:\nGo 语言中变量的声明使用 var 关键字.\nvar age int\nvar name string\nvar title string = \u0026ldquo;hi wang123.net\u0026rdquo;\nvar isProd bool = true\n简写：省略 var, 直接使用 := 进行赋值。\ntitle := \u0026ldquo;WANG123NET\u0026rdquo; // 等于 var title string = \u0026ldquo;WANG123NET\u0026rdquo;\n(3) 字符串拼接：可以使用加号​(+)\nfmt.Println(\u0026ldquo;hello \u0026quot; + \u0026quot; world\u0026rdquo;)\n(4) 常量 const\nconst WIDTH int = 3\nconst LENGTH int = 4\nconst HEIGHT int = 5\n或者写到一起：\nconst (\nWIDTH = 3\nLENGTH = 4\nHEIGHT = 5\n)\n(5) 函数 func : Go 语言最少有个 main() 函数。\nGo 语言函数定义格式如下：\nfunc functionName( [parameter list] ) [returnTypes] {\n函数体\n}\n参考链接 https://golang.google.cn/\nhttps://www.runoob.com/go/go-tutorial.html\n更新记录 2018-12-08 发表与CSDN博客。\n2021-03-19 完善内容，更新到 go1.6.2 版本。\n[END]\n","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":20,"section":"posts","tags":["Golang"],"title":"Go语言第一个HelloWorld程序","uri":"https://wangyongtao.github.io/cn/posts/go%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%80%E4%B8%AAhelloworld%E7%A8%8B%E5%BA%8F/"},{"content":"在软件开发过程中，对于如密码这样的信息，我们不能直接以明文的方式存储在数据库中\n在Node中我们若要利用bcrypt算法对数据加密，可以使用第三方模块bcryptjs\nnpm install bcryptjs\npassword_verify() 函数用于验证密码是否和散列值匹配。\npassword_hash() 函数用于创建密码的散列（hash）。\nbool password_verify ( string $password , string $hash )\n参数说明：\npassword: 用户的密码。\nhash: 一个由 password_hash() 创建的散列值。\nstring password_hash ( string $password , int $algo [, array $options ] )\npassword: 一个由 password_hash() 创建的散列值。\nalgo: 一个用来在散列密码时指示算法的密码算法常量。\noptions: 一个包含有选项的关联数组。\n$algo : 支持的算法 PASSWORD_DEFAULT - 使用 bcrypt 算法 (PHP 5.5.0 默认)。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  function login(string $loginName, string $loginPassword) : bool { // 从数据库查询用户信息  // (new User())-\u0026gt;where(\u0026#39;name\u0026#39;, $loginName)-\u0026gt;where(\u0026#39;valid\u0026#39;, 1)-\u0026gt;first();  $userInfo = [ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;admin111\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;$2y$07$BCryptRequires22Chrcte/VlQH0piJtjXl.0t1XkA8pw9dMXTpOq\u0026#39;, ]; // 校验输入的用户密码 与 数据库存储的是否一致  if (password_verify($loginPassword, $userInfo[\u0026#39;password\u0026#39;])) { return true; } return false; } $userName = \u0026#39;admin111\u0026#39;; $userPass = \u0026#39;rasmuslerdorf\u0026#39;; $result = login($userName, $userPass); var_dump($result);   1 2 3 4 5 6 7 8  $password = password_hash(\u0026#34;rasmuslerdorf\u0026#34;, PASSWORD_DEFAULT); var_dump($password); $pwd1 = \u0026#39;$2y$10$BawJulWXzhL3kGVwAHDSieKklqr.01/p3Qix2Ly3EpSaDMT.NefvO\u0026#39;; $pwd2 = \u0026#39;$2y$10$Z47m4aKOPQ.6hPQyraGv1u5COtUTn51t1TYVfSlH.xKDjchpPoJNy\u0026#39;; var_dump(password_verify(\u0026#39;rasmuslerdorf\u0026#39;, $pwd1)); // bool(true) var_dump(password_verify(\u0026#39;rasmuslerdorf\u0026#39;, $pwd2)); // bool(true)   db.getCollection('users').find({'username': 'admin111'}).sort({'_id':-1}) { \u0026quot;_id\u0026quot; : ObjectId(\u0026quot;5de780d9655694f90649d28a\u0026quot;), \u0026quot;createdAt\u0026quot; : ISODate(\u0026quot;2019-12-04T09:48:09.314Z\u0026quot;), \u0026quot;updatedAt\u0026quot; : ISODate(\u0026quot;2021-01-27T02:00:25.036Z\u0026quot;), \u0026quot;username\u0026quot; : \u0026quot;admin111\u0026quot;, \u0026quot;realname\u0026quot; : \u0026quot;Web后端技术\u0026quot;, \u0026quot;email\u0026quot; : \u0026quot;admin111@wang123.net\u0026quot;, \u0026quot;phone\u0026quot; : \u0026quot;13811112222\u0026quot;, \u0026quot;password\u0026quot; : \u0026quot;$2a$10$1wBgc8M4wwJAnzD4Ptcx6eGQ1gIP8DUqL5.cvTyJCaM7o5ezSMJQ2\u0026quot;, \u0026quot;roles\u0026quot; : [ ObjectId(\u0026quot;5588ccc679faf34f2cfc214d\u0026quot;) ], \u0026quot;enabled\u0026quot; : true } $pwd = '$2a$10$1wBgc8M4wwJAnzD4Ptcx6eGQ1gIP8DUqL5.cvTyJCaM7o5ezSMJQ2'; var_dump(password_verify('12345678', $pwd)); // bool(true) 用户 admin111 的密码为 12345678 (不建议用这么简单的密码)。\nMongoDB 保存的加密后的密码为：$2a$10$1wBgc8M4wwJAnzD4Ptcx6eGQ1gIP8DUqL5.cvTyJCaM7o5ezSMJQ2\n在终端用 php 的 password_verify 函数校验一下：\n$ php -a Interactive shell php \u0026gt; $pwd = '$2a$10$1wBgc8M4wwJAnzD4Ptcx6eGQ1gIP8DUqL5.cvTyJCaM7o5ezSMJQ2'; php \u0026gt; php \u0026gt; var_dump(password_verify('12345678', $pwd)); bool(true) php \u0026gt; 可以看到， 校验通过。\n","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":21,"section":"posts","tags":["PHP","Node","bcrypt"],"title":"PHP与Node中使用bcrypt算法存储密码","uri":"https://wangyongtao.github.io/cn/posts/php-bcrypt/"},{"content":"PostgreSQL入门-安装与基本使用（Ubuntu）\nPostgreSQL 是一个免费的对象-关系数据库服务器(ORDBMS)，号称是 \u0026ldquo;世界上最先进的开源关系型数据库\u0026rdquo;。\nPostgreSQL 是以加州大学计算机系开发的 POSTGRES 4.2版本为基础的对象关系型数据库。\n今天在Ubuntu系统上，我们一起来安装并简单使用一下PostgreSQL数据库。\n1.查看当前系统版本: 1 2 3 4 5 6 7 8 9 10 11 12 13 14  $ cat /etc/issue Ubuntu 16.04.6 LTS \\n \\l $ sudo lsb_release -a LSB Version:\tcore-9.20160110 ubuntu0.2-amd64:core-9.20160110 ubuntu0.2-noarch:security-9.20160110 ubuntu0.2-amd64:security-9.20160110 ubuntu0.2-noarch Distributor ID:\tUbuntu Description:\tUbuntu 16.04.6 LTS Release:\t16.04 Codename:\txenial   系统是 Ubuntu 16.04.6 LTS。\n2.安装 PostgreSQL 1  $ sudo apt-get install postgresql   执行实例如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  $ sudo apt-get install postgresql Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: libpq5 postgresql-9.5 postgresql-client-9.5 postgresql-client-common postgresql-common postgresql-contrib-9.5 ssl-cert … … Creating config file /etc/postgresql-common/createcluster.conf with new version Creating config file /etc/logrotate.d/postgresql-common with new version Building PostgreSQL dictionaries from installed myspell/hunspell packages... Removing obsolete dictionary files: Setting up postgresql-9.5 (9.5.19-0ubuntu0.16.04.1) ... Creating new cluster 9.5/main ... config /etc/postgresql/9.5/main data /var/lib/postgresql/9.5/main locale en_US.UTF-8 socket /var/run/postgresql port 5432 update-alternatives: using /usr/share/postgresql/9.5/man/man1/postmaster.1.gz to provide /usr/share/man/man1/postmaster.1.gz (postmaster.1.gz) in auto mode Setting up postgresql (9.5+173ubuntu0.2) ... Setting up postgresql-contrib-9.5 (9.5.19-0ubuntu0.16.04.1) ... Processing triggers for libc-bin (2.23-0ubuntu11) ... Processing triggers for ureadahead (0.100.0-19.1) ... Processing triggers for systemd (229-4ubuntu21.21) ...   默认已经安装了 postgresql 的服务器(postgresql-9.5)和客户端(postgresql-client-9.5)。\n2019年10月03日，已经发布了PostgreSQL 12，如果想安装最新版的，需要更新一下源，参加 PostgreSQL Apt Repository\n可以使用 psql --version 来查看当前安装的版本:\n1 2  $ psql --version psql (PostgreSQL) 9.5.19   安装后会默认生成一个名为 postgres的数据库和一个名为postgres的数据库用户。\n同时还生成了一个名为 postgres 的 Linux 系统用户。\n可以使用以下命令查看:\n1 2 3 4 5  #查看用户 $ cat /etc/passwd #查看用户组  $ cat /etc/group   3.使用PostgreSQL控制台修改 postgres 数据库用户密码 默认生成的 postgres 的数据库用户没有密码，现在我们使用 postgres Linux用户的身份来登录到管理控制台中。\n1 2 3 4 5  # 切换到postgres用户。 $ sudo su - postgres postgres@iZm5e8p54dk31rre6t96xuZ:~$ postgres@iZm5e8p54dk31rre6t96xuZ:~$ whoami postgres   Linux 用户 postgres 以同名的 postgres 数据库用户的身份登录，不用输入密码的。\n1 2 3 4 5  postgres@iZm5e8p54dk31rre6t96xuZ:~$ psql psql (9.5.19) Type \u0026#34;help\u0026#34; for help. postgres=#   使用 \\password 命令，为 postgres 用户设置一个密码\n1 2 3 4  postgres=#  postgres=# CREATE USER db_user WITH PASSWORD \u0026#39;PWD123456\u0026#39;; CREATE ROLE postgres=#    创建用户数据库，这里为testdb，并指定所有者为db_user。\n1 2 3  postgres=# CREATE DATABASE testdb OWNER db_user; CREATE DATABASE postgres=#    将 testdb 数据库的所有权限都赋予 db_user 数据库用户， 否则 db_user 只能登录控制台，没有数据库操作权限。\n1 2  postgres=# GRANT ALL PRIVILEGES ON DATABASE testdb TO db_user; GRANT   使用 \\du 查看当前的数据库用户:\n1 2 3 4 5 6  postgres=# \\du; List of roles Role name | Attributes | Member of -----------+------------------------------------------------+----------- db_user | | {} postgres | Superuser,Create role,Create DB,Replication,Bypass RLS | {}   最后，使用 \\q 命令退出控制台， 并使用 exit 命令退出当前 db_user Linux用户。\n1 2 3 4  postgres=# \\q postgres@iZm5e8p54dk31rre6t96xuZ:~$ postgres@iZm5e8p54dk31rre6t96xuZ:~$ exit logout   4.数据库基本操作实例 创建数据库与删除数据库:\n1 2 3 4 5 6 7  # 创建数据库 postgres=# CREATE DATABASE lusiadas; CREATE DATABASE # 删除数据库 postgres=# DROP DATABASE lusiadas; DROP DATABASE   使用 \\c 切换数据库:\n1 2 3 4 5 6  postgres=# CREATE DATABASE testdb; CREATE DATABASE postgres=# \\c testdb; SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off) You are now connected to database \u0026#34;testdb\u0026#34; as user \u0026#34;postgres\u0026#34;.   新建表与删除表:\n1 2 3 4 5 6  # 创建一个表 tb_test：(两个字段，其中id 为自增ID) testdb=\u0026gt; CREATE TABLE tb_test(id bigserial, name VARCHAR(20)); CREATE TABLE # 删除一个表 tb_test testdb=\u0026gt; DROP table tb_test; DROP TABLE   增删改查操作:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  # 创建一个用户表 tb_users(三个字段，其中id 为自增ID) testdb=\u0026gt; CREATE TABLE tb_users(id bigserial, age INT DEFAULT 0, name VARCHAR(20)); CREATE TABLE # 使用 INSERT 语句插入数据 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;张三丰\u0026#39;, 212); INSERT 0 1 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;李四光\u0026#39;, 83); INSERT 0 1 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;王重阳\u0026#39;, 58); INSERT 0 1 # 查询数据 testdb=\u0026gt; select * from tb_users; id | age | name ----+-----+--------  1 | 212 | 张三丰 2 | 83 | 李四光 3 | 58 | 王重阳 (3 rows) testdb=\u0026gt; select * from tb_users WHERE id=3; id | age | name ----+-----+--------  3 | 58 | 王重阳 (1 row) # 更新数据 (执行后输出更新的条数，第二次执行失败所以输出为`UPDATE 0`) testdb=\u0026gt; UPDATE tb_users set name = \u0026#39;全真派王重阳\u0026#39; WHERE name = \u0026#39;王重阳\u0026#39;; UPDATE 1 testdb=\u0026gt; UPDATE tb_users set name = \u0026#39;全真派王重阳\u0026#39; WHERE name = \u0026#39;王重阳\u0026#39;; UPDATE 0 # 插入2条数据 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;赵四\u0026#39;, 0); INSERT 0 1 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;赵五娘\u0026#39;, 0); INSERT 0 1 # 模糊查询 testdb=\u0026gt; SELECT * FROM tb_users WHERE name LIKE \u0026#39;赵%\u0026#39;; id | age | name ----+-----+--------  4 | 0 | 赵五娘 5 | 0 | 赵四 (2 rows) # 修改表结构: 新增字段 testdb=# ALTER TABLE tb_users ADD email VARCHAR(50); ALTER TABLE # 修改表结构: 修改字段 testdb=# ALTER TABLE tb_users ALTER COLUMN email TYPE VARCHAR(100); ALTER TABLE # 删除字段 testdb=# ALTER TABLE tb_users DROP COLUMN email; ALTER TABLE # 删除记录 testdb=\u0026gt; DELETE FROM tb_users WHERE id = 5; DELETE 1   使用 pg_database_size() 查看数据库的大小:\n1 2 3 4 5 6 7 8 9 10  testdb=# select pg_database_size(\u0026#39;testdb\u0026#39;); pg_database_size ------------------  7991967 (1 row) testdb=# select pg_size_pretty(pg_database_size(\u0026#39;testdb\u0026#39;)); pg_size_pretty ----------------  7805 kB (1 row)   5.PostgreSQL 的 timestamp 类型 查询 current_timestamp\n1 2 3 4 5  testdb=# select current_timestamp; current_timestamp -------------------------------  2019-11-11 08:33:35.369887+00 (1 row)   使用 current_timestamp(0) 定义时间类型精度为0：(有时区)\n1 2 3 4 5  testdb=# select current_timestamp(0); current_timestamp ------------------------  2019-11-11 08:31:08+00 (1 row)   使用 current_timestamp(0) 定义时间类型精度为0：(去掉时区)\n1 2 3 4 5 6 7 8 9 10 11  testdb=# select current_timestamp(0)::timestamp without time zone; current_timestamp ---------------------  2019-11-11 08:31:20 (1 row) testdb=# select cast (current_timestamp(0) as timestamp without time zone); current_timestamp ---------------------  2019-11-11 08:32:26 (1 row)   时间戳:\n1 2 3 4 5  testdb=# select extract(epoch from now()); date_part ------------------ 1573461495.47821 (1 row)   设置数据库时区:\n视图 pg_timezone_names 保存了所有可供选择的时区:\n1 2  # 查看时区  select * from pg_timezone_names;   比如可以选择上海 Asia/Shanghai 或重庆 Asia/Chongqing， 最简单的直接 PRC:\n1 2 3 4 5 6 7 8 9 10 11 12  testdb=# set time zone \u0026#39;PRC\u0026#39;;  SET testdb=# show time zone; TimeZone ---------- PRC (1 row) testdb=# SELECT LOCALTIMESTAMP(0); localtimestamp --------------------- 2019-11-11 16:42:54 (1 row)   Reference https://www.postgresql.org/docs/8.4/sql-altertable.html\nhttp://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html\n[END]\n","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":22,"section":"posts","tags":["PHP","Node","bcrypt"],"title":"PostgreSQL入门-安装与基本使用（Ubuntu）","uri":"https://wangyongtao.github.io/cn/posts/postgresql-quick-start/"},{"content":"Rust 是一种静态类型的编译语言，满足了大多数用户使用 C 或 C++ 能够实现的目标。 Rust 语言是内存安全且与操作系统无关的，这意味着它可以在任何计算机上运行。\nCargo: the Rust build tool and package manager\nWhen you install Rustup you’ll also get the latest stable version of the Rust build tool and package manager, also known as Cargo. Cargo does lots of things:\nbuild your project with cargo build\nrun your project with cargo run\ntest your project with cargo test\nbuild documentation for your project with cargo doc\npublish a library to crates.io with cargo publish\nTo test that you have Rust and Cargo installed, you can run this in your terminal of choice:\n$ cargo \u0026ndash;version\ncargo 1.51.0 (43b129a20 2021-03-16)\n1  $ curl https://sh.rustup.rs -sSf | sh   source $HOME/.cargo/env\n查看 rustc 版本 和 cargo 版本：\n1 2  $ rustc --version rustc 1.51.0 (2fd73fabe 2021-03-23)   1 2  $ cargo --version cargo 1.51.0 (43b129a20 2021-03-16)   1 2  $ cargo new hello-rust Created binary (application) `hello-rust` package   1 2 3 4 5 6 7  $ tree hello-rust hello-rust ├── Cargo.toml └── src └── main.rs 1 directory, 2 files   Cargo.toml 文件是什么？它是 Cargo 用来构建程序的文件。\nCargo.toml: is the manifest file for Rust. It’s where you keep metadata for your project, as well as dependencies.\nsrc/main.rs is where we’ll write our application code.\n查看 Cargo.toml 内容:\n1 2 3 4 5 6 7  [package] name = \u0026#34;hello-rust\u0026#34; version = \u0026#34;0.1.0\u0026#34; authors = [\u0026#34;wangyongtao \u0026lt;wangtom365@qq.com\u0026gt;\u0026#34;] edition = \u0026#34;2018\u0026#34; [dependencies]   cargo new generates a \u0026ldquo;Hello, world!\u0026rdquo; project for us! We can run this program by moving into the new directory that we made and running this in our terminal:\n1 2 3 4 5 6 7 8 9  $ cd hello-rust $ cargo run Compiling hello-rust v0.1.0 (/Users/wangtom/Code/openapi/online-test/rust/hello-rust) Finished dev [unoptimized + debuginfo] target(s) in 10.21s Running `target/debug/hello-rust` $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.00s Running `target/debug/hello-rust` Hello, world!   第一次执行很慢。\n1 2 3  fn main() { println!(\u0026#34;Hello, world!\u0026#34;); }   添加依赖 现在我们来为应用添加依赖。您可以在 crates.io，即 Rust 包的仓库中找到所有类别的库。在 Rust 中，我们通常把包称作“crates”。\n在本项目中，我们使用了名为 ferris-says 的库。\n我们在 Cargo.toml 文件中添加以下信息（从 crate 页面上获取）：\n1 2  [dependencies] ferris-says = \u0026#34;0.2\u0026#34;   接着运行：\n$ cargo build 之后 Cargo 就会安装该依赖。\n运行此命令会创建一个新文件 Cargo.lock，该文件记录了本地所用依赖库的精确版本。\n要使用该依赖库，我们可以打开 main.rs，然后在其中添加下面这行代码：\nuse ferris_says::say;\n这样我们就可以使用 ferris-says crate 中导出的 say 函数了。\n 现在我们用新的依赖库编写一个小应用。在 main.rs 中添加以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  use ferris_says::say; use std::io::{stdout, BufWriter}; fn main() { println!(\u0026#34;Hello, world!\u0026#34;); let stdout = stdout(); let message = String::from(\u0026#34;Hello fellow Rustaceans!\u0026#34;); let width = message.chars().count(); let mut writer = BufWriter::new(stdout.lock()); say(message.as_bytes(), width, \u0026amp;mut writer).unwrap(); }   保存完毕后，我们可以输入以下命令来运行此应用：\ncargo run\n如果一切正确，您会看到该应用将以下内容打印到了屏幕上：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  $ cargo run Compiling hello-rust v0.1.0 (/Users/wangtom/Code/rust/hello-rust) Finished dev [unoptimized + debuginfo] target(s) in 0.98s Running `target/debug/hello-rust` Hello, world! __________________________ \u0026lt; Hello fellow Rustaceans! \u0026gt; -------------------------- \\  \\  _~^~^~_ \\) / o o \\ (/ \u0026#39;_ - _\u0026#39; / \u0026#39;-----\u0026#39; \\   Reference https://www.rust-lang.org/zh-CN/learn/get-started\nhttps://doc.rust-lang.org/cargo/getting-started/first-steps.html\n","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":23,"section":"posts","tags":["Rust"],"title":"spring-rest-api","uri":"https://wangyongtao.github.io/cn/posts/rust-quick-start/"},{"content":"1 2 3 4  $ sw_vers ProductName:\tMac OS X ProductVersion:\t10.15.1 BuildVersion:\t19B88   1 2 3 4  $ java --version java 13.0.1 2019-10-15 Java(TM) SE Runtime Environment (build 13.0.1+9) Java HotSpot(TM) 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing)   安装 SDKMAN\n1  $ curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash   查看 sdk list gradle 命令查看 gradle 的版本:\n1  $ sdk list gradle   查看安装的版本：\n1 2  $ sdk version SDKMAN 5.7.4+362   直接安装 gradle：\n1 2 3 4 5 6 7  $ sdk install gradle Downloading: gradle 6.0 In progress... ################################# 100.0% Installing: gradle 6.0 Done installing! Setting gradle 6.0 as default.   使用 gradle --version 查看 Gradle 的版本:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  $ gradle --version Welcome to Gradle 6.0! Here are the highlights of this release: - Substantial improvements in dependency management, including - Publishing Gradle Module Metadata in addition to pom.xml - Advanced control of transitive versions - Support for optional features and dependencies - Rules to tweak published metadata - Support for Java 13 - Faster incremental Java and Groovy compilation - New Zinc compiler for Scala - VS2019 support - Support for Gradle Enterprise plugin 3.0 For more details see https://docs.gradle.org/6.0/release-notes.html ------------------------------------------------------------ Gradle 6.0 ------------------------------------------------------------ Build time: 2019-11-08 18:12:12 UTC Revision: 0a5b531749138f2f983f7c888fa7790bfc52d88a Kotlin: 1.3.50 Groovy: 2.5.8 Ant: Apache Ant(TM) version 1.10.7 compiled on September 1 2019 JVM: 13.0.1 (Oracle Corporation 13.0.1+9) OS: Mac OS X 10.15.1 x86_64   Reference https://spring.io/guides/gs/rest-service/\n[END]\n","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":24,"section":"posts","tags":["Spring"],"title":"spring-rest-api","uri":"https://wangyongtao.github.io/cn/posts/spring-rest-api/"},{"content":"C语言是一门面向过程的的通用程序设计语言，广泛应用于底层开发。\nC语言是普适性最强的一种计算机程序编辑语言，它不仅可以发挥出高级编程语言的功用，还具有汇编语言的优点。\nC语言诞生于美国的贝尔实验室，由 D.M.Ritchie 以B语言为基础发展而来。在它的主体设计完成后，Thompson 和 Ritchie 用它完全重写了 UNIX 操作系统.\n1989年，ANSI 发布了第一个完整的 C语言 标准 —— ANSI X3.159—1989，简称“C89”，人们习惯称其为“ANSI C”。\nC89在1990年被国际标准组织 ISO(International Standard Organization)采纳，给予的名称为：ISO/IEC 9899，所以ISO/IEC9899: 1990也通常被简称为“C90”。\n1999年，在做了一些必要的修正和完善后，ISO发布了新的C语言标准，命名为ISO/IEC 9899：1999，简称“C99”。\n在2011年12月8日，ISO又正式发布了新的标准，称为ISO/IEC9899: 2011，简称为“C11”。\n第一个c语言程序： hell.c 文件内容:\n1 2 3 4 5 6 7 8 9 10  #include \u0026lt;stdio.h\u0026gt; // 代码从 main() 函数开始执行。 int main() { // 我的第一个 C语言 程序  printf(\u0026#34;Hello, World! \\n\u0026#34;); return 0; }   常见的编译器简介 （1）GCC编译器\nGCC原名为GNU C语言编译器（GNU C Compiler），只能处理C语言。但其很快扩展，变得可处理C++，后来又扩展为能够支持更多编程语言，如Fortran、Pascal、Objective -C、Java、Ada、Go以及各类处理器架构上的汇编语言等，所以改名GNU编译器套件（GNU Compiler Collection）。\n（2）Clang 编译器\nLow Level Virtual Machine (LLVM) 是一个开源的编译器架构，它已经被成功应用到多个应用领域。Clang 是 LLVM 的一个编译器前端，它目前支持 C, C++, Objective-C 以及 Objective-C++ 等编程语言。\n（3）VC6.0 (已淘汰)\nMicrosoft Visual C++ 6.0，简称VC6.0，是微软于1998年推出的一款C++编译器。Microsoft Visual C++ 6.0对windows7和windows8的兼容性较差。\n（4）Turbo C (已淘汰)\nTurbo C 是美国Borland公司的产品，Borland公司是一家专门从事软件开发、研制的公司。 1987年首次推出Turbo C 1.0 产品, 其中使用了全然一新的集成开发环境, 大大方便了程序的开发。Turbo C 2.0 则是Borland公司1989年出版的。\n（5）Visual Studio\nMicrosoft Visual Studio（简称VS）是美国微软公司的开发工具包系列产品。2017年3月8日，微软发布 Visual Studio 2017。 2019年4月2日，微软发布Visual Studio2019.\n使用 GCC 编译并执行 查看 gcc 版本：\n1 2 3 4 5 6 7 8  $ gcc --version Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1 Apple clang version 12.0.0 (clang-1200.0.32.2) Target: x86_64-apple-darwin19.6.0 Thread model: posix InstalledDir: /Library/Developer/CommandLineTools/usr/bin   使用 gcc 编译并执行：\n1 2  $ gcc hello.c \u0026amp;\u0026amp; ./a.out Hello, World!   说明，命令 gcc hello.c 表示编译 hello.c 文件里的代码。 ./a.out 表示执行一个可执行文件 a.out。\n\u0026amp;\u0026amp; 表示 and，即执行完第一个命令后，继续执行第二个命令。\n可执行文件 a.out 是，编译c语言代码后生成的默认的可执行文件。\n我们可以指定生成的可执行文件的名称，使用 -o 参数即可。\n1 2 3  $ gcc hello.c -o hello2020 $ ./hello2020 Hello, World!   这里我们使用了 -o 参数指定生成的可执行文件名称为 hello2020。\n使用 Clang 编译并执行 查看 clang 版本：\n1 2 3 4 5  $ clang --version Apple clang version 12.0.0 (clang-1200.0.32.2) Target: x86_64-apple-darwin19.6.0 Thread model: posix InstalledDir: /Library/Developer/CommandLineTools/usr/bin   使用 clang 编译并执行：\n1 2  $ clang hello.c \u0026amp;\u0026amp; ./a.out Hello, World!   参考 Reference http://c.biancheng.net/c/\nhttps://www.runoob.com/cprogramming/c-tutorial.html\nhttps://baike.baidu.com/item/c%E8%AF%AD%E8%A8%80\n","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":25,"section":"posts","tags":["Rust"],"title":"第一个c语言程序","uri":"https://wangyongtao.github.io/cn/posts/c-quick-start/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":26,"section":"","tags":null,"title":"关于 About","uri":"https://wangyongtao.github.io/cn/about/"},{"content":"Nest (NestJS)是一个用于构建高效、可伸缩的 Node.js 服务器端框架。\nNestJS 默认使用 JavaScript 的超集 TypeScript 进行开发。\n环境准备 查看node和npm版本:\n1 2 3 4 5  $ node --version v15.2.1 $ npm --version 7.0.14   安装 @nestjs/cli 使用 npm 全局安装 @nestjs/cli:\n1 2 3 4 5  $ npm i -g @nestjs/cli /usr/local/bin/nest -\u0026gt; /usr/local/lib/node_modules/@nestjs/cli/bin/nest.js in/nest.js + @nestjs/cli@7.5.3 added 3 packages from 3 contributors and updated 10 packages in 39.209s   使用 nest --version 命令查看 nest 当前版本:\n1 2  $ nest --version 7.5.3   使用 nest new 命令创建一个名为 nest-api 的项目:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  $ nest new nest-api ⚡ We will scaffold your app in a few seconds.. CREATE nest-api/.eslintrc.js (630 bytes) CREATE nest-api/.prettierrc (51 bytes) CREATE nest-api/README.md (3339 bytes) CREATE nest-api/nest-cli.json (64 bytes) CREATE nest-api/package.json (1962 bytes) CREATE nest-api/tsconfig.build.json (97 bytes) CREATE nest-api/tsconfig.json (339 bytes) CREATE nest-api/src/app.controller.spec.ts (617 bytes) CREATE nest-api/src/app.controller.ts (274 bytes) CREATE nest-api/src/app.module.ts (249 bytes) CREATE nest-api/src/app.service.ts (142 bytes) CREATE nest-api/src/main.ts (208 bytes) CREATE nest-api/test/app.e2e-spec.ts (630 bytes) CREATE nest-api/test/jest-e2e.json (183 bytes) ? Which package manager would you ❤️ to use? npm ▸▹▹▹▹ Installation in progress... ☕ 🚀 Successfully created project nest-api 👉 Get started with the following commands: $ cd nest-api $ npm run start Thanks for installing Nest 🙏 Please consider donating to our open collective to help us maintain this package. 🍷 Donate: https://opencollective.com/nest   启动项目 进入项目，并启动项目\n1 2 3 4 5 6 7 8 9 10 11  $ cd nest-api $ npm run start \u0026gt; nest-api@0.0.1 start \u0026gt; nest start [Nest] 95920 - 2020/12/02 下午4:17:34 [NestFactory] Starting Nest application... [Nest] 95920 - 2020/12/02 下午4:17:34 [InstanceLoader] AppModule dependencies initialized +18ms [Nest] 95920 - 2020/12/02 下午4:17:34 [RoutesResolver] AppController {}: +9ms [Nest] 95920 - 2020/12/02 下午4:17:34 [RouterExplorer] Mapped {, GET} route +4ms [Nest] 95920 - 2020/12/02 下午4:17:34 [NestApplication] Nest application successfully started +3ms   查看启动效果：\n（1）打开浏览器，访问 http://localhost:3000/ 就可以看到页面输出了 Hello World! 文字。\n（2）在终端使用 curl 请求:\n1 2 3 4 5 6 7 8 9 10 11  $ curl -i localhost:3000 HTTP/1.1 200 OK X-Powered-By: Express Content-Type: text/html; charset=utf-8 Content-Length: 12 ETag: W/\u0026#34;c-Lve95gjOVATpfV8EL5X4nxwjKHE\u0026#34; Date: Wed, 02 Dec 2020 08:18:21 GMT Connection: keep-alive Keep-Alive: timeout=5 Hello World!%   可以看到， 输出了 Hello World! 字符串。\n使用 -i 参数，表示要输出 header 头信息。\n在 header 头信息中，我们可以看到，X-Powered-By 值为 Express， 就是告诉我们这个网站或框架底层是 Express 框架。\nExpress 是一个基于 Node.js 平台，快速、开放、极简的 Web 开发框架。\n项目结构 查看一下项目结构:\n1 2 3 4 5 6 7 8 9 10 11 12  $ ll nest-api total 1432 -rw-r--r-- 1 wangtom staff 3.3K 12 2 16:14 README.md drwxr-xr-x 15 wangtom staff 480B 12 2 16:17 dist/ -rw-r--r-- 1 wangtom staff 64B 12 2 16:14 nest-cli.json drwxr-xr-x 593 wangtom staff 19K 12 2 16:15 node_modules/ -rw-r--r-- 1 wangtom staff 695K 12 2 16:15 package-lock.json -rw-r--r-- 1 wangtom staff 1.9K 12 2 16:15 package.json drwxr-xr-x 7 wangtom staff 224B 12 2 16:14 src/ drwxr-xr-x 4 wangtom staff 128B 12 2 16:14 test/ -rw-r--r-- 1 wangtom staff 97B 12 2 16:14 tsconfig.build.json -rw-r--r-- 1 wangtom staff 339B 12 2 16:14 tsconfig.json   可以使用 tree 命令查看项目的目录结构:\n比如使用 tree ./nest-api -L 1, 查看1级目录结构。\n1 2 3 4 5 6 7 8 9 10 11 12 13  $ tree ./nest-api -L 1 ./nest-api ├── README.md ├── dist/ ├── nest-cli.json ├── node_modules/ ├── package-lock.json ├── package.json ├── src/ ├── test/ ├── tsconfig.build.json └── tsconfig.json 4 directories, 6 files   项目的结构如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ./nest-api ├── README.md ├── nest-cli.json ├── node_modules/ ├── package-lock.json ├── package.json ├── src/ # 源码目录 │ ├── app.controller.spec.ts # 控制器测试文件 │ ├── app.controller.ts # 控制器类 │ ├── app.module.ts # 模块 │ ├── app.service.ts # 服务类 │ └── main.ts # 入口文件 ├── test/ # 测试代码目录 │ ├── app.e2e-spec.ts │ └── jest-e2e.json ├── tsconfig.build.json └── tsconfig.json   可以看到，和 Angular 的项目结构很相似。\n查看项目的入口文件 src/main.ts, 定义了一个异步方法(bootstrap)来启动应用，默认监听端口 3000:\n1 2 3 4 5 6 7 8 9 10  // main.ts import { NestFactory } from \u0026#39;@nestjs/core\u0026#39;; import { AppModule } from \u0026#39;./app.module\u0026#39;; async function bootstrap() { const app = await NestFactory.create(AppModule); await app.listen(3000); } bootstrap();   控制器: app.controller.ts\n1 2 3 4 5 6 7 8 9 10 11 12 13  // app.controller.ts import { Controller, Get } from \u0026#39;@nestjs/common\u0026#39;; import { AppService } from \u0026#39;./app.service\u0026#39;; @Controller() export class AppController { constructor(private readonly appService: AppService) {} @Get() getHello(): string { return this.appService.getHello(); } }   控制器中定义了一个名为 getHello() 的方法，使用 @Get 注解，表示可以通过 Get 方法访问。\n控制器构造方法中引入了私有只读的服务类 AppService， 在 getHello() 方法中调动了服务类(AppService)中的 getHello() 方法。\n服务类: app.service.ts\n1 2 3 4 5 6 7 8 9  // app.service.ts import { Injectable } from \u0026#39;@nestjs/common\u0026#39;; @Injectable() export class AppService { getHello(): string { return \u0026#39;Hello World!\u0026#39;; } }   在服务类AppService中，定义了 getHello() 方法，该方法只返回了字符串 Hello World!。\n将代码提交到 gitee 为了方便管理代码，可以将代码提交到 github 或 gitee 代码托管网站中保存。这里我提交到 gitee 网站。\n查看当前的 git 版本：\n$ git --version git version 2.23.0 初始化 git 仓库:\n1 2  $ git init Reinitialized existing Git repository in /Users/wangtom/Code/nest-api/.git/   提示 git repository 已经存在了。说明在使用 nest new 命令创建这个项目时，就已经帮我们初始化了git仓库了。\n提交代码，将远程源设置为 gitee.com 的仓库。\n需要先在 gitee.com 网站创建好自己的仓库（【新建仓库】）。\n比如，我们已经在 gitee 创建了一个名为 nest-api 的新仓库，直接执行 git remote add origin git@gitee.com:wangyongtao/nest-api.git 即可。\n1 2 3 4 5 6 7 8 9 10  $ git commit -a \u0026#34;init\u0026#34; $ git remote add origin git@gitee.com:wangyongtao/nest-api.git $ git pull origin You asked to pull from the remote \u0026#39;origin\u0026#39;, but did not specify a branch. Because this is not the default configured remote for your current branch, you must specify a branch on the command line. $ git pull origin master From gitee.com:wangyongtao/nest-api * branch master -\u0026gt; FETCH_HEAD fatal: refusing to merge unrelated histories   出错了，提示不能合并不相干的历史记录。网上一搜，找到解决办法，增加个 --allow-unrelated-histories 参数。\n1 2 3 4 5 6 7 8  $ git pull origin master --allow-unrelated-histories From gitee.com:wangyongtao/nest-api * branch master -\u0026gt; FETCH_HEAD CONFLICT (add/add): Merge conflict in README.md Auto-merging README.md CONFLICT (add/add): Merge conflict in .gitignore Auto-merging .gitignore Automatic merge failed; fix conflicts and then commit the result.   有冲突，打开代码文件，解决冲突代码后保存文件。提交代码后推送到远程(master)。\n1 2 3 4  $ git add . $ git commit -am \u0026#34;MERGE\u0026#34; [master 5347fd5] MERGE $ git push origin master   打开网址 https://gitee.com/wangyongtao/nest-api 就可看到提交的代码了。\n小试牛刀 熟悉了项目目录结构与基本运行代码后，我们来增加一些自己的方法，感受一个这个框架。\n推荐使用 Visual Studio Code 编辑器来编辑代码。\n(1) 自定义一个返回当前版本的接口，获取当前应用的版本:\n修改控制器文件 src/app.controller.ts:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  // app.controller.ts // 导入 Post import { Controller, Get } from \u0026#39;@nestjs/common\u0026#39;; import { AppService } from \u0026#39;./app.service\u0026#39;; @Controller() export class AppController { constructor(private readonly appService: AppService) {} @Get() getHello(): string { return this.appService.getHello(); } // 自定义 getVersion 方法:  @Get(\u0026#39;/version\u0026#39;) getVersion(): Object { return this.appService.getVersion(); } // 自定义 postIndex 方法:  @Post(\u0026#39;/api\u0026#39;) postIndex(): Object { return this.appService.getVersion(); } }   在控制器文件 src/app.controller.ts 中:\n新增了一个使用 @Get 注解的 getVersion() 方法，可以通过Get访问，路由为 “/version”。\n新增了一个使用 @Post 注解的 postIndex() 方法，可以通过Post访问, 路由为 “/api”。\n修改服务类文件 app.service.ts:\n新增一个名为 getVersion() 的方法，返回 Object 格式的json数据。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // app.service.ts import { Injectable } from \u0026#39;@nestjs/common\u0026#39;; @Injectable() export class AppService { getHello(): string { return \u0026#39;Hello World!\u0026#39;; } // 自定义：获取版本  getVersion(): Object { return { code: 200, msg: \u0026#34;OK\u0026#34;, data: { version: \u0026#34;0.0.1\u0026#34; }, } } }   代码修改好后，使用 Control + C 结束终端运行。\n这次我们使用 npm run start:dev 启动项目，这样项目里的文件有修改会自动重启服务:\n(更多的命令可以在项目 package.json 文件的 scripts 部分看到)\n1 2 3 4 5 6 7 8 9 10  $ npm run start:dev [下午4:56:14] Starting compilation in watch mode... [下午4:56:17] Found 0 errors. Watching for file changes. [Nest] 2491 - 2020/12/02 下午4:56:18 [NestFactory] Starting Nest application... [Nest] 2491 - 2020/12/02 下午4:56:18 [InstanceLoader] AppModule dependencies initialized +20ms [Nest] 2491 - 2020/12/02 下午4:56:18 [RoutesResolver] AppController {}: +7ms [Nest] 2491 - 2020/12/02 下午4:56:18 [RouterExplorer] Mapped {, GET} route +3ms [Nest] 2491 - 2020/12/02 下午4:56:18 [NestApplication] Nest application successfully started +3ms ...   启动成功了。现在我们使用 curl 命令分别来请求这几个路由地址:\n请求 “localhost:3000/version”:\n1 2 3 4 5 6 7 8 9 10 11  # 项目默认的，首页 $ curl localhost:3000 Hello World!% # 默认GET请求\u0026#39;/version\u0026#39;: 存在，返回预期的结果 $ curl localhost:3000/version {\u0026#34;code\u0026#34;:200,\u0026#34;msg\u0026#34;:\u0026#34;OK\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;version\u0026#34;:\u0026#34;0.0.1\u0026#34;}}% # 改成POST请求\u0026#39;/version\u0026#39;: 不存在，框架自带的错误提示 $ curl -X POST localhost:3000/version {\u0026#34;statusCode\u0026#34;:404,\u0026#34;message\u0026#34;:\u0026#34;Cannot POST /version\u0026#34;,\u0026#34;error\u0026#34;:\u0026#34;Not Found\u0026#34;}%   请求 “localhost:3000/api”:\n1 2 3 4 5 6 7  # 使用 POST 请求 \u0026#39;/api\u0026#39;: 存在，返回预期的结果 $ curl -X POST localhost:3000/api {\u0026#34;code\u0026#34;:200,\u0026#34;msg\u0026#34;:\u0026#34;OK\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;version\u0026#34;:\u0026#34;0.0.1\u0026#34;}}% # 改成 GET 请求 \u0026#39;/api\u0026#39;: 不存在，框架自带的错误提示 $ curl localhost:3000/api {\u0026#34;statusCode\u0026#34;:404,\u0026#34;error\u0026#34;:\u0026#34;Not Found\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;Cannot GET /api\u0026#34;}%   参考文献 References https://blog.csdn.net/cnwyt\nhttps://nodejs.org/en/download/\nhttps://docs.nestjs.com/first-steps\n更新记录 Change log 2018.12.18 新增本文档，使用 nestjs 5.7.1 版本。\n2019.06.13 修改内容，并更新 nestjs 至 6.5 版本。\n2020.12.01 完善内容，并更新 nestjs 至 7.5 版本。\n 感谢阅读，如有问题请留言。\n [END]\n","description":"","id":30,"section":"posts","tags":null,"title":"","uri":"https://wangyongtao.github.io/cn/posts/nestjs-quick-start/"}]