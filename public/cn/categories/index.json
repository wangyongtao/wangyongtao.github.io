[{"content":"几种常见的数据结构，你知道哪些？\n数据结构大致包含以下几种存储结构：\n(1) 线性表，还可细分为顺序表、链表、栈和队列；\n(2) 树结构，包括普通树，二叉树，线索二叉树等；\n(3) 图存储结构；\n","description":"A brief guide to setup KaTeX","id":2,"section":"posts","tags":null,"title":"几种常见的数据结构，你知道哪些？","uri":"http://localhost:1313/cn/posts/cs/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%A0%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9B/"},{"content":"Docker Quick Start\n","description":"","id":3,"section":"posts","tags":["Docker","Linux"],"title":"Docker Quick Start","uri":"http://localhost:1313/cn/posts/linux/docker-quick-start/"},{"content":"程序员常用的技术栈、工具栈都有哪些？\n什么是技术栈？\n技术栈，就是一堆的技能的集合，是某项工作或某个职位需要掌握的一系列技能组合的统称。\n举个例子，开发一个电商后台管理系统，前端可能需要使用 HTML、CSS、JavaScript、VueJs或Angular，后端可能需要 Go (Gin框架) 或 PHP (Laravel/Lumen框架)、MySQL数据、Redis缓存等，这一系列技能组合可以称为开发后台管理系统的技术栈。\n前端工程师技术栈 基本前端知识: HTML 定义了网页的内容。HTML产生于1990年，1997年HTML4成为互联网标准。\nHTML5 在从前 HTML4.01 的基础上进行了改进，引入了不少的新特性。\nCSS 描述了网页的布局。\nJavaScript 控制了网页的行为，是 Web 的编程语言，简称JS。\nECMAScript 可以理解为是JavaScript的一个标准，它规定了JS语言的核心组成部分。\nES5: 是 ECMAScript 第五个版本。\nES6: 是 ECMAScript 第六个版本，提供大量新特性，引入 Modules，支持异步加载和可配置的模块加载。\nCSS 框架和库: Bootstrap，来自 Twitter 公司，是目前最受欢迎的前端框架。\nCSS 的预处理语言（ Stylus / LESS / SASS）\nJavaScript 框架和库: Vue.js\nReactJs\nAngular\nAngularJS\nBackbone\n传统的 DOM 操作框架 jQuery 、Zepto。\njQuery 是一个轻量级JavaScript 函数库，极大地简化了 JavaScript 编程。\njQuery UI: 是jQuery出的一套用户交互界面和效果库，比如弹出框，可以在页面里直接调用，方便开发。\n现在流行的 MV* 框架: 如 Angular / Backbone / Ember / React 等。\nVue、Angular、React 这是目前前端最火的三个框架。\nVue.js（读音类似于 view） 是一套构建用户界面的渐进式框架。Vue 的核心库只关注视图层，并且非常容易与其它库或已有项目整合。\nReact 是 Facebook 开源的一个用于构建用户界面的一款JavaScript库。React 它只专注于MVC框架中的 V （视图）。\nAngularJS 是一个 JavaScript 框架。AngularJS 通过 指令 扩展了 HTML，且通过表达式绑定数据到 HTML（现在已经停止维护）。\nAngular 是一个开源的 JavaScript 框架，用于构建 We 应用程序。可以称为是 AngularJs 的升级重构版本，为了与 AngularJs 区别，一般称为 Angular 2+。\nAngular 使用 TypeScript 语言开发。TypeScript 是 JavaScript 的超集，可以安全便捷的编译成 JavaScript 语言运行。\n工具 Webpack，现代 JavaScript 应用程序的静态模块打包器(module bundler)\n后端工程师技术栈 后端，即服务器端，后端工程师主要是开发服务端使用的一些功能。\n后端常用的开发语言有:\nJava 是由Sun公司推出的面向对象程序设计语言和Java平台（1995年）。后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 成为 Oracle 公司的产品。\nPHP 是创建动态网站的服务器端脚本语言（1995年），主要应用于Web服务端开发和命令行开发。\nASP.NET\nASP 指 Active Server Pages (动态服务器页面)，是 Microsoft 公司开发的服务器端脚本环境，可用来创建动态交互式web应用程序。\nC# 是微软推出的一种基于 .NET 框架的、面向对象的、面向组件的编程语言。\nC# 源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。\nVBScript 是微软公司出品的脚本语言（国内很少用了）。VBScript 是 Visual Basic Script 的简称，即 Visual Basic 脚本语言，有时也被缩写为 VBS。\nGo 是一个2012年由谷歌公司开源的一种静态强类型、编译型语言，融合了C语言、C++语言、Java等众家之所长，更简洁、安全、高效。为了方便搜索，Go语言也称 Golang。\nPython 是一种解释型、面向对象、动态数据类型的高级程序设计语言。\nPython 由 Guido van Rossum 于 1989 年底发明，1991 年第一版公开发行。\nPython 可以分为 Python 2.0 和 3.0 两个不兼容的版本。2020年1月停止 Python 2 的更新, Python 2.7 被确定为最后一个 Python 2.x 版本。推荐大家都使用 Python 3.0 以上的版本。\nSQL 是用于访问和处理数据库的标准的计算机语言。\n常见数据库 MySQL 是最流行的关系型数据库管理系统（RDBMS）。\nMySQL 由瑞典 MySQL AB 公司开发，现在属于 Oracle 旗下产品。 MySQL 使用 C和 C++编写，为多种编程语言提供了 API。\nMariaDB 数据库管理系统是 MySQL 的一个分支，主要由开源社区在维护。MariaDB 由 MySQL 的创始人Michael Widenius 主导开发，是 MySQL 的代替品。\nSQLite 使用 ANSI-C 编写的，是一个嵌入式的数据库引擎。SQLite 可在 UNIX（Linux, macOS, Android, iOS）和 Windows 中运行。\nPostgreSQL 是一个免费的对象-关系数据库服务器(ORDBMS)。PostgreSQL 的 Slogan 是 \u0026ldquo;世界上最先进的开源关系型数据库\u0026rdquo;。\nNoSQL\nNoSQL (NoSQL = Not Only SQL)，意即“不仅仅是 SQL”，指的是非关系型的数据库。\nNoSQL 的代表开源软件如：Membase、MongoDB、Hypertable、Apache Cassandra、CouchDB等。\nMongoDB 是一个面向文档存储的数据库。由 C++ 语言编写。MongoDB 文档类似于 JSON 对象，是一个介于关系数据库和非关系数据库之间的产品。\nRedis 是一个开源的高性能的 key-value 数据库，支持数据的持久化。\nMemcached 是一个开源的，高性能，基于内存的 key-value 缓存系统。\n常用工具栈 (1) 版本管理工具：\nGit: 开源的分布式版本控制系统。\nSVN: 即 Apache Subversion，是一个集中式的版本控制系统。\n(2) 文本编辑器：\nSublime Text\nVisual Studio Code\nNotepad++ (Windows)\n","description":"","id":4,"section":"posts","tags":["程序员"],"title":"程序员常用的技术栈、工具栈都有哪些？","uri":"http://localhost:1313/cn/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E6%A0%88%E5%B7%A5%E5%85%B7%E6%A0%88%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B/"},{"content":"HTTP 表单提交中 Request Payload 和 FormData 有什么区别？\nFormData 和 Request Payload 是浏览器传给服务端接口的两种格式，这两种方式浏览器是通过 Content-Type 来进行区分的。\n如果是 enctype=\u0026ldquo;application/x-www-form-urlencoded\u0026rdquo; 或 enctype=\u0026ldquo;multipart/form-data\u0026rdquo; 的话，则为 FormData 方式。\n如果是 application/json 或 enctype=\u0026ldquo;text/plain\u0026rdquo; 的话，则为 Request Payload 的方式。\nHtml代码查看 FormData 使用 HTML 直接提交数据。HTML代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;application/x-www-form-urlencoded\u0026#34;\u0026gt; --\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;text/plain\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; --\u0026gt; name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;formdata1\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; description: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;description\u0026#34; value=\u0026#34;测试测试测试...\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; tag: \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag1\u0026#34;\u0026gt; tag1 \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag2\u0026#34;\u0026gt; tag2 \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag3\u0026#34;\u0026gt; tag3 \u0026lt;br/\u0026gt; action: \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;action[blog][key]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;blog\u0026#34;\u0026gt; blog \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;action[blog][value]\u0026#34; value=\u0026#34;value111\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;action[bbs][key]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;bbs\u0026#34;\u0026gt; bbs \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;action[bbs][value]\u0026#34; value=\u0026#34;value222\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt; submit \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; 通过 Chrome 控制台 Network 查看请求头：\n1 2 3 4 5 6 7 8 9 10 // FormData 数据 name: formdata1 description: 测试测试测试... tags[]: tag1 tags[]: tag2 tags[]: tag3 action[blog][key]: blog action[blog][value]: value111 action[bbs][key]: bbs action[bbs][value]: value222 后端(PHP)接收到数据格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // index.php 文件输出的内容： Array ( [URLSearchParams] =\u0026gt; [name] =\u0026gt; formdata1 [description] =\u0026gt; 测试测试测试... [tags] =\u0026gt; Array ( [0] =\u0026gt; tag1 [1] =\u0026gt; tag2 [2] =\u0026gt; tag3 ) [action] =\u0026gt; Array ( [blog] =\u0026gt; Array( [key] =\u0026gt; blog [value] =\u0026gt; value111 ) [bbs] =\u0026gt; Array( [key] =\u0026gt; bbs [value] =\u0026gt; value222 ) ) ) 使用 JS 发送请求数据 在前端开发中，我们一般不直接使用 HTML 提交数据到后台，而需要 JS 处理后台（比如进行表单数据校验、数据转换等）后，直接使用 JS 提交数据。\n在之前，我们可以使用 jQuery 进行提交数据。\n1 2 3 4 5 6 7 8 9 10 11 var form = $(\u0026#34;#myForm\u0026#34;).serialize(); $.ajax({ type: \u0026#39;POST\u0026#39;, url: \u0026#39;https://wang123.net/api/test\u0026#39;, data: form, dataType: \u0026#39;json\u0026#39;, success: function (res) { // 请求成功后处理 console.log(res); } }); 现在 vuejs 开发中，一半使用 axios.js 请求库。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // axios.js 的默认请求使用 payload 传输 json数据 const formElement = document.querySelector(\u0026#39;#myForm\u0026#39;); const formData = new FormData(formElement); axios.post(\u0026#39;http://localhost:8003?Payload\u0026#39;, { type: \u0026#39;我是用payload提交的json数据\u0026#39;, name: formData.get(\u0026#39;name\u0026#39;), description: formData.get(\u0026#39;description\u0026#39;), tags: formData.getAll(\u0026#39;tags[]\u0026#39;), action: { blog: {key: 111, value: \u0026#39;asdf\u0026#39;}, bbs: {key: 222, value: \u0026#39;ghjk\u0026#39;}, }, }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); 服务端如何接受数据呢？ 预定义变量 $_REQUEST 、$_POST、 $_GET 只能获取 FormData 格式数据，即请求。\n(1)预定义的 $_POST 变量用于收集来自 method=\u0026quot;post\u0026quot; 的表单中的值。\n(2)预定义的 $_GET 变量用于收集来自 method=\u0026quot;get\u0026quot; 的表单中的值。\n(3)预定义的 $_REQUEST 变量包含了 $_GET、$_POST 和 $_COOKIE 的内容。\n想要获取 application/json 的原始数据，需要直接从 php://input 获取请求body的数据，自己反序列化成数组或对象。\nphp://input 是个可以访问请求的原始数据的只读流。\nphp://input 不能用于 enctype=\u0026quot;multipart/form-data\u0026quot;的表单数据。\n第一种： 原生PHP处理 Request Payload 数据示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php // 文件路径：demo/index.php // 服务端接受表单数据 // $_REQUEST 、$_POST、 $_GET 只能获取 FormData 格式数据 print_r($_REQUEST); // 需要直接从 php://input 获取请求body的原始数据，自己反序列化成数组或对象。 $requestBody = file_get_contents(\u0026#39;php://input\u0026#39;); var_dump($requestBody); $formData = json_decode($requestBody, true); print_r($formData); 测试环境可以使用 php -S localhost:8003 -t ./demo/ 启动服务。\n第二种： 使用现代框架\n如果使用 Web 框架，框架里一般都已经提供了 Request Payload 解析，可以直接使用。\n比如 PHP Laravel 框架，可以直接从 Request 对象中取到数据。\n第三中方法: 修改 axios 等类库，转成 FormData 提交数据。\n(1)可以引入 qs.js 类库来提交FormData数据（略）\n(2)可以使用URLSearchParams API， 提交 FormData 数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 引入 qs.js 类库 // 请求接口 使用 Qs.stringify 转换 axios.post(\u0026#39;index.php?Act=comm\u0026amp;do=query\u0026#39;, Qs.stringify(queryData), { timeout: 5000 } ) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); // 使用URLSearchParams API const params = new URLSearchParams(); for (let [key, value] of formData) { // console.log(\u0026#39;formData: \u0026#39;, key, value); params.append(key, value); } axios.post(\u0026#39;http://localhost:8003?URLSearchParams\u0026#39;, params) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); 完整代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;FormData测试\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;./axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;application/x-www-form-urlencoded\u0026#34;\u0026gt; --\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;form id=\u0026#34;myForm\u0026#34; method=\u0026#34;POST\u0026#34; onsubmit=\u0026#39;return checkForm()\u0026#39;\u0026gt; --\u0026gt; name: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; value=\u0026#34;formdata1\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; description: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;description\u0026#34; value=\u0026#34;测试测试测试...\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; tag: \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag1\u0026#34;\u0026gt; tag1 \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag2\u0026#34;\u0026gt; tag2 \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;tags[]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;tag3\u0026#34;\u0026gt; tag3 \u0026lt;br/\u0026gt; action: \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;action[blog][key]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;blog\u0026#34;\u0026gt; blog \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;action[blog][value]\u0026#34; value=\u0026#34;value111\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;action[bbs][key]\u0026#34; checked=\u0026#34;checked\u0026#34; value=\u0026#34;bbs\u0026#34;\u0026gt; bbs \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;action[bbs][value]\u0026#34; value=\u0026#34;value222\u0026#34;\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt; submit \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function checkForm() { console.log(\u0026#39;---\u0026gt; 表单提交：\u0026#39;); const formElement = document.querySelector(\u0026#39;#myForm\u0026#39;); const formData = new FormData(formElement); console.log(\u0026#34;---\u0026gt; formElement\u0026#34;, formElement) console.log(\u0026#34;---\u0026gt; formData\u0026#34;, formData) console.log(\u0026#34;---\u0026gt; formData.getAll name\u0026#34;, formData.getAll(\u0026#39;name\u0026#39;)) // axios 默认使用 payload 传递数据，将对象序列化为JSON axios.post(\u0026#39;http://localhost:8003?Payload\u0026#39;, { type: \u0026#39;我是用payload提交的json数据\u0026#39;, name: formData.get(\u0026#39;name\u0026#39;), description: formData.get(\u0026#39;description\u0026#39;), tags: formData.getAll(\u0026#39;tags[]\u0026#39;), action: { blog: {key: 111, value: \u0026#39;asdf\u0026#39;}, bbs: {key: 222, value: \u0026#39;ghjk\u0026#39;}, }, }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); // axios 提交 FormData 数据 axios.post(\u0026#39;http://localhost:8003?formData\u0026#39;, formData) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); // (1)可以引入 qs.js 类库来提交FormData数据（略） // (2)可以使用URLSearchParams API， 提交FormData数据 const params = new URLSearchParams(); for (let [key, value] of formData) { // console.log(\u0026#39;formData: \u0026#39;, key, value); params.append(key, value); } axios.post(\u0026#39;http://localhost:8003?URLSearchParams\u0026#39;, params) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); return true; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 参考资料 https://www.cnblogs.com/tugenhua0707/p/8975615.html\nhttps://gomakethings.com/how-to-serialize-form-data-with-vanilla-js/\n[END]\n","description":"","id":5,"section":"posts","tags":["Web","Request Payload","FormData"],"title":"HTTP 表单提交中 Request Payload 和 FormData 有什么区别","uri":"http://localhost:1313/cn/posts/request-payload-vs-formdata/"},{"content":"Golang中string和int类型相互转换\nstring 转成 int string 转成 int：\n1 int, err := strconv.Atoi(string) string 转成 int64：\n1 int64, err := strconv.ParseInt(string, 10, 64) string 转成 uint64：\n1 uint64, err := strconv.ParseUint(string, 10, 64) int 转成 string int 转成 string：\n1 string := strconv.Itoa(int) int64 转成 string：\n1 string := strconv.FormatInt(int64,10) uint64 转成 string：\n1 string := strconv.FormatUint(uint64,10) 数字类型\n1 2 3 4 5 6 7 8 1 uint8 : 无符号 8 位整型 (0 到 255) 2 uint16 : 无符号 16 位整型 (0 到 65535) 3 uint32 : 无符号 32 位整型 (0 到 4294967295) 4 uint64 : 无符号 64 位整型 (0 到 18446744073709551615) 5 int8 : 有符号 8 位整型 (-128 到 127) 6 int16 : 有符号 16 位整型 (-32768 到 32767) 7 int32 : 有符号 32 位整型 (-2147483648 到 2147483647) 8 int64 : 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807) 浮点型\n1 2 3 4 1 float32 IEEE-754 32位浮点型数 2 float64 IEEE-754 64位浮点型数 3 complex64 32 位实数和虚数 4 complex128 64 位实数和虚数 其他数字类型\n1 2 3 4 5 1 byte 类似 uint8 2 rune 类似 int32 3 uint 32 或 64 位 4 int 与 uint 一样大小 5 uintptr 无符号整型，用于存放一个指针 References ","description":"","id":6,"section":"posts","tags":["Golang"],"title":"Golang中string和int类型相互转换","uri":"http://localhost:1313/cn/posts/golang/golang%E4%B8%ADstring%E5%92%8Cint%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"content":"Markdownify box This is boxmd shortcode Simple box This is **box** shortcode Code tabs Make it easy to switch between different code\njava javascript 1 System.out.println(\u0026#39;Hello World!\u0026#39;); 1 console.log(\u0026#39;Hello World!\u0026#39;); Tabs for general purpose Windows MacOS Ubuntu Windows section 1 console.log(\u0026#39;Hello World!\u0026#39;); ⚠️Becareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\nMacOS section Hello world!\nUbuntu section Great!\nExpand Expand me Title contents\nExpand me2 Title2 contents2\nAlert Colored box\nthis is a text this is a text this is a text this is a text Notice success text info text warning text error text ","description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":7,"section":"posts","tags":["shortcode"],"title":"Shortcodes","uri":"http://localhost:1313/cn/posts/shortcodes/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Item First Sub-item Second Sub-item Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn: Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"","id":8,"section":"posts","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"http://localhost:1313/cn/posts/markdown-syntax/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nDiff 1 2 3 4 5 6 7 8 9 10 *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line Makefile CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. 1 2 3 4 5 CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. JSON 1 2 3 {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]} Markdown 1 2 3 **bold** *italics* [link](www.example.com) JavaScript 1 document.write(\u0026#39;Hello, world!\u0026#39;); CSS 1 2 3 body { background-color: red; } Objective C 1 2 3 4 5 6 #import \u0026lt;stdio.h\u0026gt; int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); } Python 1 print \u0026#34;Hello, world!\u0026#34; XML 1 2 3 4 5 \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt; Perl 1 print \u0026#34;Hello, World!\\n\u0026#34;; Bash 1 echo \u0026#34;Hello World\u0026#34; PHP 1 \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt; CoffeeScript 1 console.log(“Hello world!”); C# 1 2 3 4 5 6 7 8 using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } } C++ 1 2 3 4 5 6 7 #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; } SQL 1 2 SELECT column_name,column_name FROM table_name; Go 1 2 3 4 5 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) } Ruby 1 puts \u0026#34;Hello, world!\u0026#34; Java 1 2 3 4 5 6 7 8 9 10 11 12 import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame frame.pack(); //Setting size to smallest frame.setLocationRelativeTo(null); //Centering frame frame.setVisible(true); //Showing frame } } Latex Equation 1 \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; } ","description":"Syntax highlighting test","id":9,"section":"posts","tags":["hugo"],"title":"Syntax highlighting","uri":"http://localhost:1313/cn/posts/syntax-highlight/"},{"content":" We need goldmark katex entension which is not yet we have: [https://github.com/gohugoio/hugo/issues/6544](https://github.com/gohugoio/hugo/issues/6544) Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files. Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\n","description":"A brief guide to setup KaTeX","id":10,"section":"posts","tags":null,"title":"Math Typesetting","uri":"http://localhost:1313/cn/posts/math-typesetting/"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; } ","description":"Guide to emoji usage in Hugo","id":11,"section":"posts","tags":["emoji","gamoji","namoji","bamoji","amoji"],"title":"Emoji Support","uri":"http://localhost:1313/cn/posts/emoji-support/"},{"content":" digraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; label = \u0026#34;process #1\u0026#34;; } subgraph cluster_1 { node [style=filled]; b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; label = \u0026#34;process #2\u0026#34;; color=blue } start -\u0026gt; a0; start -\u0026gt; b0; a1 -\u0026gt; b3; b2 -\u0026gt; a3; a3 -\u0026gt; a0; a3 -\u0026gt; end; b3 -\u0026gt; end; start [shape=Mdiamond]; end [shape=Msquare]; } ","description":"A hack to put Graphviz on the web.","id":12,"section":"posts","tags":[null],"title":"Viz support","uri":"http://localhost:1313/cn/posts/test-viz/"},{"content":"{ \u0026#34;signal\u0026#34;: [ {\u0026#34;name\u0026#34;: \u0026#34;CLK\u0026#34;, \u0026#34;wave\u0026#34;: \u0026#34;p.....|...\u0026#34;}, {\u0026#34;name\u0026#34;:\u0026#34;DAT\u0026#34;, \u0026#34;wave\u0026#34;:\u0026#34;x.345x|=.x\u0026#34;, \u0026#34;data\u0026#34;:[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;]}, {\u0026#34;name\u0026#34;: \u0026#34;REQ\u0026#34;, \u0026#34;wave\u0026#34;: \u0026#34;0.1..0|1.0\u0026#34;}, {}, {\u0026#34;name\u0026#34;: \u0026#34;ACK\u0026#34;, \u0026#34;wave\u0026#34;: \u0026#34;1.....|01.\u0026#34;} ]} ","description":"WaveDrom is a Free and Open Source online digital timing diagram (waveform) rendering engine that uses javascript, HTML5 and SVG to convert a WaveJSON input text description into SVG vector graphics.","id":13,"section":"posts","tags":[null],"title":"Wavedrom support","uri":"http://localhost:1313/cn/posts/test-wavedrom/"},{"content":"{ \u0026#34;type\u0026#34;: \u0026#34;bar\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;labels\u0026#34;: [\u0026#34;One\u0026#34;, \u0026#34;Two\u0026#34;, \u0026#34;Three\u0026#34;, \u0026#34;Four\u0026#34;, \u0026#34;Five\u0026#34;, \u0026#34;Six\u0026#34;], \u0026#34;datasets\u0026#34;: [{ \u0026#34;label\u0026#34;: \u0026#34;# of Votes\u0026#34;, \u0026#34;data\u0026#34;: [12, 19, 3, 5, 3, 8] }] } } { \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;labels\u0026#34;: [\u0026#34;One\u0026#34;, \u0026#34;Two\u0026#34;, \u0026#34;Three\u0026#34;, \u0026#34;Four\u0026#34;, \u0026#34;Five\u0026#34;, \u0026#34;Six\u0026#34;], \u0026#34;datasets\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;# of Votes\u0026#34;, \u0026#34;data\u0026#34;: [12, 19, 3, 5, 2, 3], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;orange\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;Some other set\u0026#34;, \u0026#34;data\u0026#34;: [15, 8, 13, 5, 5, 9], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;#44ccff\u0026#34; } ] } } ","description":"Simple yet flexible JavaScript charting for designers \u0026 developers","id":14,"section":"posts","tags":[null],"title":"Chart support","uri":"http://localhost:1313/cn/posts/test-chartjs/"},{"content":"Alice-\u0026gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--\u0026gt;Alice: I am good thanks! Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow ","description":"Generates UML sequence diagrams from simple text","id":15,"section":"posts","tags":[null],"title":"JS Sequence Diagram support","uri":"http://localhost:1313/cn/posts/test-js-sequence-diagrams/"},{"content":"graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026#34;Dogs\u0026#34; : 386 \u0026#34;Cats\u0026#34; : 85 \u0026#34;Rats\u0026#34; : 15 ","description":"Generate diagrams, charts, graphs or flows from markdown-like text via javascript.","id":16,"section":"posts","tags":["diagram"],"title":"Mermaid support","uri":"http://localhost:1313/cn/posts/test-mermaid/"},{"content":"When $a \\ne 0$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\n","description":"A JavaScript display engine for mathematics that works in all browsers.No more setup for readers. It just works.","id":17,"section":"posts","tags":[null],"title":"MathJax support","uri":"http://localhost:1313/cn/posts/test-mathjax/"},{"content":"The following\n$$ \\int_{a}^{b} x^2 dx $$\nIs an integral\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEnable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.\nSee the online reference of supported TeX functions.\nNote: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.\nInline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $ Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","description":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.","id":18,"section":"posts","tags":[null],"title":"Katex support","uri":"http://localhost:1313/cn/posts/test-katex/"},{"content":"st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e ","description":"flowchart.js is a flowchart DSL and SVG render that runs in the browser and terminal. Nodes and connections are defined in separately so that nodes can be reused and connections can be quickly changed.","id":19,"section":"posts","tags":[null],"title":"Flowchart support","uri":"http://localhost:1313/cn/posts/test-flowchart/"},{"content":"Sample images from Pixabay\n","description":"cartoon gallery","id":20,"section":"gallery","tags":null,"title":"Cartoon","uri":"http://localhost:1313/cn/gallery/cartoon/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":21,"section":"gallery","tags":null,"title":"Photo","uri":"http://localhost:1313/cn/gallery/photo/"},{"content":"Go语言基本语言与C语言对比\nC语言与Go语言简介 C 语言是一种面向过程式的编程语言。1972 年，为了移植与开发 UNIX 操作系统，丹尼斯·里奇在贝尔电话实验室设计开发了 C 语言。UNIX 操作系统，C编译器，和几乎所有的 UNIX 应用程序都是用 C 语言编写的。由于各种原因，C 语言现在已经成为一种广泛使用的专业语言。最新的C语言标准是C18（2018）。\nGo，又称 Golang，是一个 Google 公司开源的静态的、编译型编程语言。Go语言起源于 2007 年，并在 2009 年正式对外开源，在2012年发布了 Go 1 稳定版本。Go语言早期（go1.4版本和以前）使用C语言和汇编编写的，从 Go 1.5 起开始Go语言实现了自举（Bootstrapping），即使用Go语言自己编写的Go语言。\n查看版本 1 2 $ go version go version go1.16.5 darwin/amd64 1 2 3 4 5 6 7 8 $ gcc --version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1 Apple clang version 12.0.0 (clang-1200.0.32.29) Target: x86_64-apple-darwin19.6.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin Hello World C 语言版的 hello world:\n1 2 3 4 5 6 // 源代码文件名为： hello.c #include \u0026lt;stdio.h\u0026gt; int main(int argc, char **argv) { printf(\u0026#34;Hello, World!\\n\u0026#34;); } C 语言编译并运行:\n1 2 3 4 5 6 # 使用 gcc 编译，默认生成可执行文件 a.out $ gcc hello.c # 直接运行 a.out $ ./a.out Hello, World! Go 语言版的 hello world:\n1 2 3 4 5 6 7 8 // 源代码文件名为： hello.go package main import \u0026#34;fmt\u0026#34; func main() { fmt.Printf(\u0026#34;Hello, World!\\n\u0026#34;) } Go 语言编译并运行:\n1 2 3 $ go build hello.go $ ./hello Hello, World! 可以使用 go run 直接编译运行 go 程序:\n1 2 $ go run hello.go Hello, World! C语言和Go语言都是以 main 函数作为程序的开始。\nGo语言需要指定包名，且包名必须是 main。\nC 语言没有包名或命名空间。C++ 有命名空间(namespace)。\nC 语言使用文件包含命令(#include)来引入对应的头文件（.h 文件）。\nGo 语言使用 import 命令来引入其他包的文件 (这一点同 Java、JavaScript 等语言)。\n定义变量 c 语言定义变量：\n1 2 3 4 5 6 7 8 /* if inside function, memory allocated on stack: */ int i; int j = 3; /* memory allocated on heap: */ int *ptr = malloc(sizeof *ptr); /* if malloc fails, it returns NULL and sets errno to ENOMEM */ *ptr = 7; go 语言定义变量：\n1 2 3 4 5 6 7 8 9 // memory allocated on stack: var i int // allocated on stack; type inferred from literal: j := 3 // memory allocated on heap: ptr := new(int) *ptr = 7 定义变量，Go可以使用 := 进行更省略的写法(比如 a := 0 等于 var a = 0)。\n空值在 c 语言中为 null，在 go 语言中为 nil。\nGo 语言中不能给变量赋值为 nil\n定义常量 1 #define PI 3.14 1 const Pi = 3.14 变量交换值 1 2 3 4 5 int x = 11, y = 22, tmp; tmp = x; x = y; y = tmp; 1 2 3 x := 11; y := 22; x, y = y, x 流程控制语句 if 语句：\nC语言和Go语言，都有 if / else if / else 关键字，Go 语言可以省略小括号。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 //// c语言 int signum; if (i \u0026gt; 0) { signum = 1; } else if (i == 0) { signum = 0; } else { signum = -1; } //// go 语言 var signum int if x \u0026gt; 0 { signum = 1 } else if x == 0 { signum = 0 } else { signum = -1 } switch 语句：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // ====\u0026gt; c 语言： /* switch expression must be an integer */ switch (i) { case 0: case 1: printf(\u0026#34;i is boolean\\n\u0026#34;); break; default: printf(\u0026#34;i is not a boolean\\n\u0026#34;); break; } // ====\u0026gt; go 语言： // switch expression can have any type switch i { case 0, 1: fmt.Println(\u0026#34;i is boolean\u0026#34;) default: fmt.Println(\u0026#34;i is not a boolean\u0026#34;) } Go语言开始支持switch下的多条件判断，简化了很多代码。\nGo 编程语言中 select 语句的语法如下：\n1 2 3 4 5 6 7 8 9 10 11 // ====\u0026gt; go 语言： select { case communication clause : statement(s); case communication clause : statement(s); // 可以定义任意数量的 case // default 可选 default : statement(s); } select 随机执行一个可运行的 case。如果没有 case 可运行，它将阻塞，直到有 case 可运行。一个默认的子句应该总是可运行的。\n循环语句 for 循环：\nfor 循环是一个循环控制结构，可以执行指定次数的循环。 Go 语言的 for 循环有 3 种形式，只有其中的一种使用分号。\n（1）和 C 语言的 for循环 一样：\nfor init; condition; post { }\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // ====\u0026gt; c 语言： int i, n; for (i = 1, n = 1; i \u0026lt;= 10; ++i) { n *= i; } // ====\u0026gt; go 语言： var i, n int // Initialization and afterthought must be single // statements; there is no comma operator. n = 1 for i = 1; i \u0026lt;= 10; i++ { n *= i; } （2）和 C 语言的 while 一样：for condition { }\n1 2 3 4 5 6 7 8 9 10 11 // ====\u0026gt; c 语言： int i = 0; while (i \u0026lt; 10) { ++i; } // ====\u0026gt; go 语言： i := 0 for i \u0026lt; 10 { i++ } （3）和 C 语言的 for(;;) 一样，死循环：for { }\n1 2 3 4 5 6 7 8 9 10 11 12 13 // c 语言 for 死循环： for (;;) { // some code } // c 语言 while 死循环： while (1) { // some code } // go 语言 for 死循环： for { // some code } Go语言有for .. range ..简化代码\n参考链接 https://hyperpolyglot.org/c\nhttps://baijiahao.baidu.com/s?id=1698155444836695087\nhttps://www.runoob.com/go/go-tutorial.html\n[END]\n","description":"","id":22,"section":"posts","tags":["Golang"],"title":"Go语言基本语言与C语言对比","uri":"http://localhost:1313/cn/posts/golang/golang-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95go-vs-c/"},{"content":"Go语言第一个HelloWorld程序\nGo语言简介 Go，又称 Golang，是一个 Google 公司开源的静态的、编译型编程语言。\nGo语言起源于 2007 年，并在 2009 年正式对外开源，在2012年发布了 Go 1 稳定版本。\nGo语言早期（go1.4版本和以前）使用C语言和汇编编写，从 Go 1.5 起开始Go语言实现了自举（Bootstrapping），即使用Go语言自己编写的Go语言。\n安装 Go 最简单的方式是，直接去官网(golang.org)下载安装包。\n安装包下载地址为：https://golang.org/dl/。\n如果打不开可以使用国内的这个地址：https://golang.google.cn/dl/。\n目前， Go语言最新版本为 go1.16.5 (released 2021-06-03) 。\nWindows: go1.16.5.windows-amd64.msi (119MB) macOS: go1.16.5.darwin-amd64.pkg (125MB) Linux: go1.16.5.linux-amd64.tar.gz (123MB) Source: go1.16.5.src.tar.gz (20MB) 下载对应操作系统的可执行文件，直接点击下一步安装即可。\n本次示例在 Mac 机器上，下载的是 go1.16.5.darwin-amd64.pkg 文件。\n查看当前系统的版本（macOS）：\n1 2 3 4 $ sw_vers ProductName: Mac OS X ProductVersion: 10.15.7 BuildVersion: 19H2 查看go命令路径，看看go语言程序放在哪里了？\n1 2 $ which go /usr/local/go/bin/go Go 被安装在了 /usr/local/go 路径下。 查看一下其目录结构如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 $ls -al /usr/local/go total 384 drwxr-xr-x 20 root wheel 640 6 4 01:18 . drwxr-xr-x 23 root wheel 736 6 18 14:33 .. -rw-r--r-- 1 root wheel 55669 6 4 01:18 AUTHORS -rw-r--r-- 1 root wheel 1339 6 4 01:18 CONTRIBUTING.md -rw-r--r-- 1 root wheel 101673 6 4 01:18 CONTRIBUTORS -rw-r--r-- 1 root wheel 1479 6 4 01:18 LICENSE -rw-r--r-- 1 root wheel 1303 6 4 01:18 PATENTS -rw-r--r-- 1 root wheel 1480 6 4 01:18 README.md -rw-r--r-- 1 root wheel 397 6 4 01:18 SECURITY.md -rw-r--r-- 1 root wheel 8 6 4 01:18 VERSION drwxr-xr-x 22 root wheel 704 6 4 01:18 api drwxr-xr-x 4 root wheel 128 6 4 02:36 bin drwxr-xr-x 6 root wheel 192 6 4 01:18 doc -rw-r--r-- 1 root wheel 5686 6 4 01:18 favicon.ico drwxr-xr-x 3 root wheel 96 6 4 01:18 lib drwxr-xr-x 14 root wheel 448 6 4 01:18 misc drwxr-xr-x 6 root wheel 192 6 4 01:20 pkg -rw-r--r-- 1 root wheel 26 6 4 01:18 robots.txt drwxr-xr-x 69 root wheel 2208 6 4 01:18 src drwxr-xr-x 333 root wheel 10656 6 4 01:18 test 在 /usr/local/go/bin/ 目录下有2个可执行文件，一个为 go,一个为 gofmt (格式化代码)。\n1 2 3 4 5 $ tree /usr/local/go/bin/ /usr/local/go/bin/ ├── go └── gofmt 0 directories, 2 files 使用 go version 命令，查看 go 语言的版本:\n1 2 3 4 5 $ go version go version go1.16.5 darwin/amd64 $ /usr/local/go/bin/go version go version go1.16.5 darwin/amd64 代码编辑器选择 Go 采用的是 UTF-8 编码的文本文件存放源代码。随便选择一款常用的文本编辑器就可以做Go语言开发了。\n这里推荐三款编辑器：\n(1) VSCode: 即 Visual Studio Code，是微软公司开源的一款轻量级、跨平台的代码编辑器。有丰富的插件生态系统。\n(2) SublimeText: 一个轻量、简洁、高效、跨平台的编辑器。可以无限期试用，不定时有激活弹出框提示。\n(3) Goland: 由 JetBrains 公司开发的一款收费的Go语言IDE。\n第一个 HelloWorld 程序 (1) 可以在任意目录下，创建一个文件名为: hello.go，代码如下：\n1 2 3 4 5 6 7 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;); } (2) 使用 go run 命令运行 hello.go 程序:\n1 2 $ go run hello.go Hello, World! 使用 go run 命令可以编译并直接运行程序。\n(3) 也可以使用 go build 构建代码，并执行编译后的可执行文件:\n1 2 3 $ go build hello.go $ ./hello Hello, World! 使用 go build 用于构建代码，主要检查是否会有编译错误，如果是一个可执行文件的源码（即是 main 包），就会直接生成一个可执行文件。\n程序分析 文件 hello.go :\n1 2 3 4 5 6 7 8 9 10 11 12 // 定义了包名 (可以看到包名和文件名) package main // 引入 fmt 包，fmt 包实现了格式化 IO（输入/输出）的函数 import \u0026#34;fmt\u0026#34; // main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数 // 如果有 init() 函数则会先执行该函数。 func main() { // 将字符串输出到控制台，并在最后自动增加换行字符\u0026#34;\\n\u0026#34; fmt.Println(\u0026#34;Hello, World!\u0026#34;) } 参考链接 https://golang.google.cn/\nhttps://www.runoob.com/go/go-tutorial.html\n更新记录 2018-12-08 编辑此文。\n2021-03-19 完善内容，更新到 go1.6.2 版本。\n2021-06-18 删除部分内容，更新到 go1.6.5 版本。\n[END]\n","description":"","id":23,"section":"posts","tags":["Golang"],"title":"Go语言第一个HelloWorld程序","uri":"http://localhost:1313/cn/posts/golang/go%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%80%E4%B8%AAhelloworld%E7%A8%8B%E5%BA%8F/"},{"content":"在软件开发过程中，对于如密码这样的信息，我们不能直接以明文的方式存储在数据库中\n在Node中我们若要利用bcrypt算法对数据加密，可以使用第三方模块bcryptjs\nnpm install bcryptjs\npassword_verify() 函数用于验证密码是否和散列值匹配。\npassword_hash() 函数用于创建密码的散列（hash）。\nbool password_verify ( string $password , string $hash )\n参数说明：\npassword: 用户的密码。\nhash: 一个由 password_hash() 创建的散列值。\nstring password_hash ( string $password , int $algo [, array $options ] )\npassword: 一个由 password_hash() 创建的散列值。\nalgo: 一个用来在散列密码时指示算法的密码算法常量。\noptions: 一个包含有选项的关联数组。\n$algo : 支持的算法 PASSWORD_DEFAULT - 使用 bcrypt 算法 (PHP 5.5.0 默认)。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 function login(string $loginName, string $loginPassword) : bool { // 从数据库查询用户信息 // (new User())-\u0026gt;where(\u0026#39;name\u0026#39;, $loginName)-\u0026gt;where(\u0026#39;valid\u0026#39;, 1)-\u0026gt;first(); $userInfo = [ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;admin111\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;$2y$07$BCryptRequires22Chrcte/VlQH0piJtjXl.0t1XkA8pw9dMXTpOq\u0026#39;, ]; // 校验输入的用户密码 与 数据库存储的是否一致 if (password_verify($loginPassword, $userInfo[\u0026#39;password\u0026#39;])) { return true; } return false; } $userName = \u0026#39;admin111\u0026#39;; $userPass = \u0026#39;rasmuslerdorf\u0026#39;; $result = login($userName, $userPass); var_dump($result); 1 2 3 4 5 6 7 8 $password = password_hash(\u0026#34;rasmuslerdorf\u0026#34;, PASSWORD_DEFAULT); var_dump($password); $pwd1 = \u0026#39;$2y$10$BawJulWXzhL3kGVwAHDSieKklqr.01/p3Qix2Ly3EpSaDMT.NefvO\u0026#39;; $pwd2 = \u0026#39;$2y$10$Z47m4aKOPQ.6hPQyraGv1u5COtUTn51t1TYVfSlH.xKDjchpPoJNy\u0026#39;; var_dump(password_verify(\u0026#39;rasmuslerdorf\u0026#39;, $pwd1)); // bool(true) var_dump(password_verify(\u0026#39;rasmuslerdorf\u0026#39;, $pwd2)); // bool(true) db.getCollection(\u0026#39;users\u0026#39;).find({\u0026#39;username\u0026#39;: \u0026#39;admin111\u0026#39;}).sort({\u0026#39;_id\u0026#39;:-1}) { \u0026#34;_id\u0026#34; : ObjectId(\u0026#34;5de780d9655694f90649d28a\u0026#34;), \u0026#34;createdAt\u0026#34; : ISODate(\u0026#34;2019-12-04T09:48:09.314Z\u0026#34;), \u0026#34;updatedAt\u0026#34; : ISODate(\u0026#34;2021-01-27T02:00:25.036Z\u0026#34;), \u0026#34;username\u0026#34; : \u0026#34;admin111\u0026#34;, \u0026#34;realname\u0026#34; : \u0026#34;Web后端技术\u0026#34;, \u0026#34;email\u0026#34; : \u0026#34;admin111@wang123.net\u0026#34;, \u0026#34;phone\u0026#34; : \u0026#34;13811112222\u0026#34;, \u0026#34;password\u0026#34; : \u0026#34;$2a$10$1wBgc8M4wwJAnzD4Ptcx6eGQ1gIP8DUqL5.cvTyJCaM7o5ezSMJQ2\u0026#34;, \u0026#34;roles\u0026#34; : [ ObjectId(\u0026#34;5588ccc679faf34f2cfc214d\u0026#34;) ], \u0026#34;enabled\u0026#34; : true } $pwd = \u0026#39;$2a$10$1wBgc8M4wwJAnzD4Ptcx6eGQ1gIP8DUqL5.cvTyJCaM7o5ezSMJQ2\u0026#39;; var_dump(password_verify(\u0026#39;12345678\u0026#39;, $pwd)); // bool(true) 用户 admin111 的密码为 12345678 (不建议用这么简单的密码)。\nMongoDB 保存的加密后的密码为：$2a$10$1wBgc8M4wwJAnzD4Ptcx6eGQ1gIP8DUqL5.cvTyJCaM7o5ezSMJQ2\n在终端用 php 的 password_verify 函数校验一下：\n$ php -a Interactive shell php \u0026gt; $pwd = \u0026#39;$2a$10$1wBgc8M4wwJAnzD4Ptcx6eGQ1gIP8DUqL5.cvTyJCaM7o5ezSMJQ2\u0026#39;; php \u0026gt; php \u0026gt; var_dump(password_verify(\u0026#39;12345678\u0026#39;, $pwd)); bool(true) php \u0026gt; 可以看到， 校验通过。\n","description":"","id":24,"section":"posts","tags":["PHP","Node","bcrypt"],"title":"PHP与Node中使用bcrypt算法存储密码","uri":"http://localhost:1313/cn/posts/php/php-bcrypt/"},{"content":"PostgreSQL入门-安装与基本使用（Ubuntu）\nPostgreSQL 是一个免费的对象-关系数据库服务器(ORDBMS)，号称是 \u0026ldquo;世界上最先进的开源关系型数据库\u0026rdquo;。\nPostgreSQL 是以加州大学计算机系开发的 POSTGRES 4.2版本为基础的对象关系型数据库。\n今天在Ubuntu系统上，我们一起来安装并简单使用一下PostgreSQL数据库。\n1.查看当前系统版本: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ cat /etc/issue Ubuntu 16.04.6 LTS \\n \\l $ sudo lsb_release -a LSB Version:\tcore-9.20160110 ubuntu0.2-amd64:core-9.20160110 ubuntu0.2-noarch:security-9.20160110 ubuntu0.2-amd64:security-9.20160110 ubuntu0.2-noarch Distributor ID:\tUbuntu Description:\tUbuntu 16.04.6 LTS Release:\t16.04 Codename:\txenial 系统是 Ubuntu 16.04.6 LTS。\n2.安装 PostgreSQL 1 $ sudo apt-get install postgresql 执行实例如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 $ sudo apt-get install postgresql Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: libpq5 postgresql-9.5 postgresql-client-9.5 postgresql-client-common postgresql-common postgresql-contrib-9.5 ssl-cert … … Creating config file /etc/postgresql-common/createcluster.conf with new version Creating config file /etc/logrotate.d/postgresql-common with new version Building PostgreSQL dictionaries from installed myspell/hunspell packages... Removing obsolete dictionary files: Setting up postgresql-9.5 (9.5.19-0ubuntu0.16.04.1) ... Creating new cluster 9.5/main ... config /etc/postgresql/9.5/main data /var/lib/postgresql/9.5/main locale en_US.UTF-8 socket /var/run/postgresql port 5432 update-alternatives: using /usr/share/postgresql/9.5/man/man1/postmaster.1.gz to provide /usr/share/man/man1/postmaster.1.gz (postmaster.1.gz) in auto mode Setting up postgresql (9.5+173ubuntu0.2) ... Setting up postgresql-contrib-9.5 (9.5.19-0ubuntu0.16.04.1) ... Processing triggers for libc-bin (2.23-0ubuntu11) ... Processing triggers for ureadahead (0.100.0-19.1) ... Processing triggers for systemd (229-4ubuntu21.21) ... 默认已经安装了 postgresql 的服务器(postgresql-9.5)和客户端(postgresql-client-9.5)。\n2019年10月03日，已经发布了PostgreSQL 12，如果想安装最新版的，需要更新一下源，参加 PostgreSQL Apt Repository\n可以使用 psql --version 来查看当前安装的版本:\n1 2 $ psql --version psql (PostgreSQL) 9.5.19 安装后会默认生成一个名为 postgres的数据库和一个名为postgres的数据库用户。\n同时还生成了一个名为 postgres 的 Linux 系统用户。\n可以使用以下命令查看:\n1 2 3 4 5 #查看用户 $ cat /etc/passwd #查看用户组 $ cat /etc/group 3.使用PostgreSQL控制台修改 postgres 数据库用户密码 默认生成的 postgres 的数据库用户没有密码，现在我们使用 postgres Linux用户的身份来登录到管理控制台中。\n1 2 3 4 5 # 切换到postgres用户。 $ sudo su - postgres postgres@iZm5e8p54dk31rre6t96xuZ:~$ postgres@iZm5e8p54dk31rre6t96xuZ:~$ whoami postgres Linux 用户 postgres 以同名的 postgres 数据库用户的身份登录，不用输入密码的。\n1 2 3 4 5 postgres@iZm5e8p54dk31rre6t96xuZ:~$ psql psql (9.5.19) Type \u0026#34;help\u0026#34; for help. postgres=# 使用 \\password 命令，为 postgres 用户设置一个密码\n1 2 3 4 postgres=# postgres=# CREATE USER db_user WITH PASSWORD \u0026#39;PWD123456\u0026#39;; CREATE ROLE postgres=# 创建用户数据库，这里为testdb，并指定所有者为db_user。\n1 2 3 postgres=# CREATE DATABASE testdb OWNER db_user; CREATE DATABASE postgres=# 将 testdb 数据库的所有权限都赋予 db_user 数据库用户， 否则 db_user 只能登录控制台，没有数据库操作权限。\n1 2 postgres=# GRANT ALL PRIVILEGES ON DATABASE testdb TO db_user; GRANT 使用 \\du 查看当前的数据库用户:\n1 2 3 4 5 6 postgres=# \\du; List of roles Role name | Attributes | Member of -----------+------------------------------------------------+----------- db_user | | {} postgres | Superuser,Create role,Create DB,Replication,Bypass RLS | {} 最后，使用 \\q 命令退出控制台， 并使用 exit 命令退出当前 db_user Linux用户。\n1 2 3 4 postgres=# \\q postgres@iZm5e8p54dk31rre6t96xuZ:~$ postgres@iZm5e8p54dk31rre6t96xuZ:~$ exit logout 4.数据库基本操作实例 创建数据库与删除数据库:\n1 2 3 4 5 6 7 # 创建数据库 postgres=# CREATE DATABASE lusiadas; CREATE DATABASE # 删除数据库 postgres=# DROP DATABASE lusiadas; DROP DATABASE 使用 \\c 切换数据库:\n1 2 3 4 5 6 postgres=# CREATE DATABASE testdb; CREATE DATABASE postgres=# \\c testdb; SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off) You are now connected to database \u0026#34;testdb\u0026#34; as user \u0026#34;postgres\u0026#34;. 新建表与删除表:\n1 2 3 4 5 6 # 创建一个表 tb_test：(两个字段，其中id 为自增ID) testdb=\u0026gt; CREATE TABLE tb_test(id bigserial, name VARCHAR(20)); CREATE TABLE # 删除一个表 tb_test testdb=\u0026gt; DROP table tb_test; DROP TABLE 增删改查操作:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # 创建一个用户表 tb_users(三个字段，其中id 为自增ID) testdb=\u0026gt; CREATE TABLE tb_users(id bigserial, age INT DEFAULT 0, name VARCHAR(20)); CREATE TABLE # 使用 INSERT 语句插入数据 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;张三丰\u0026#39;, 212); INSERT 0 1 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;李四光\u0026#39;, 83); INSERT 0 1 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;王重阳\u0026#39;, 58); INSERT 0 1 # 查询数据 testdb=\u0026gt; select * from tb_users; id | age | name ----+-----+-------- 1 | 212 | 张三丰 2 | 83 | 李四光 3 | 58 | 王重阳 (3 rows) testdb=\u0026gt; select * from tb_users WHERE id=3; id | age | name ----+-----+-------- 3 | 58 | 王重阳 (1 row) # 更新数据 (执行后输出更新的条数，第二次执行失败所以输出为`UPDATE 0`) testdb=\u0026gt; UPDATE tb_users set name = \u0026#39;全真派王重阳\u0026#39; WHERE name = \u0026#39;王重阳\u0026#39;; UPDATE 1 testdb=\u0026gt; UPDATE tb_users set name = \u0026#39;全真派王重阳\u0026#39; WHERE name = \u0026#39;王重阳\u0026#39;; UPDATE 0 # 插入2条数据 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;赵四\u0026#39;, 0); INSERT 0 1 testdb=\u0026gt; INSERT INTO tb_users(name, age) VALUES(\u0026#39;赵五娘\u0026#39;, 0); INSERT 0 1 # 模糊查询 testdb=\u0026gt; SELECT * FROM tb_users WHERE name LIKE \u0026#39;赵%\u0026#39;; id | age | name ----+-----+-------- 4 | 0 | 赵五娘 5 | 0 | 赵四 (2 rows) # 修改表结构: 新增字段 testdb=# ALTER TABLE tb_users ADD email VARCHAR(50); ALTER TABLE # 修改表结构: 修改字段 testdb=# ALTER TABLE tb_users ALTER COLUMN email TYPE VARCHAR(100); ALTER TABLE # 删除字段 testdb=# ALTER TABLE tb_users DROP COLUMN email; ALTER TABLE # 删除记录 testdb=\u0026gt; DELETE FROM tb_users WHERE id = 5; DELETE 1 使用 pg_database_size() 查看数据库的大小:\n1 2 3 4 5 6 7 8 9 10 testdb=# select pg_database_size(\u0026#39;testdb\u0026#39;); pg_database_size ------------------ 7991967 (1 row) testdb=# select pg_size_pretty(pg_database_size(\u0026#39;testdb\u0026#39;)); pg_size_pretty ---------------- 7805 kB (1 row) 5.PostgreSQL 的 timestamp 类型 查询 current_timestamp\n1 2 3 4 5 testdb=# select current_timestamp; current_timestamp ------------------------------- 2019-11-11 08:33:35.369887+00 (1 row) 使用 current_timestamp(0) 定义时间类型精度为0：(有时区)\n1 2 3 4 5 testdb=# select current_timestamp(0); current_timestamp ------------------------ 2019-11-11 08:31:08+00 (1 row) 使用 current_timestamp(0) 定义时间类型精度为0：(去掉时区)\n1 2 3 4 5 6 7 8 9 10 11 testdb=# select current_timestamp(0)::timestamp without time zone; current_timestamp --------------------- 2019-11-11 08:31:20 (1 row) testdb=# select cast (current_timestamp(0) as timestamp without time zone); current_timestamp --------------------- 2019-11-11 08:32:26 (1 row) 时间戳:\n1 2 3 4 5 testdb=# select extract(epoch from now()); date_part ------------------ 1573461495.47821 (1 row) 设置数据库时区:\n视图 pg_timezone_names 保存了所有可供选择的时区:\n1 2 # 查看时区 select * from pg_timezone_names; 比如可以选择上海 Asia/Shanghai 或重庆 Asia/Chongqing， 最简单的直接 PRC:\n1 2 3 4 5 6 7 8 9 10 11 12 testdb=# set time zone \u0026#39;PRC\u0026#39;; SET testdb=# show time zone; TimeZone ---------- PRC (1 row) testdb=# SELECT LOCALTIMESTAMP(0); localtimestamp --------------------- 2019-11-11 16:42:54 (1 row) Reference https://www.postgresql.org/docs/8.4/sql-altertable.html\nhttp://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html\n[END]\n","description":"","id":25,"section":"posts","tags":["PHP","Node","bcrypt"],"title":"PostgreSQL入门-安装与基本使用（Ubuntu）","uri":"http://localhost:1313/cn/posts/postgresql-quick-start/"},{"content":"Rust 是一种静态类型的编译语言，满足了大多数用户使用 C 或 C++ 能够实现的目标。 Rust 语言是内存安全且与操作系统无关的，这意味着它可以在任何计算机上运行。\nCargo: the Rust build tool and package manager\nWhen you install Rustup you’ll also get the latest stable version of the Rust build tool and package manager, also known as Cargo. Cargo does lots of things:\nbuild your project with cargo build\nrun your project with cargo run\ntest your project with cargo test\nbuild documentation for your project with cargo doc\npublish a library to crates.io with cargo publish\nTo test that you have Rust and Cargo installed, you can run this in your terminal of choice:\n$ cargo \u0026ndash;version\ncargo 1.51.0 (43b129a20 2021-03-16)\n1 $ curl https://sh.rustup.rs -sSf | sh source $HOME/.cargo/env\n查看 rustc 版本 和 cargo 版本：\n1 2 $ rustc --version rustc 1.51.0 (2fd73fabe 2021-03-23) 1 2 $ cargo --version cargo 1.51.0 (43b129a20 2021-03-16) 1 2 $ cargo new hello-rust Created binary (application) `hello-rust` package 1 2 3 4 5 6 7 $ tree hello-rust hello-rust ├── Cargo.toml └── src └── main.rs 1 directory, 2 files Cargo.toml 文件是什么？它是 Cargo 用来构建程序的文件。\nCargo.toml: is the manifest file for Rust. It’s where you keep metadata for your project, as well as dependencies.\nsrc/main.rs is where we’ll write our application code.\n查看 Cargo.toml 内容:\n1 2 3 4 5 6 7 [package] name = \u0026#34;hello-rust\u0026#34; version = \u0026#34;0.1.0\u0026#34; authors = [\u0026#34;wangyongtao \u0026lt;wangtom365@qq.com\u0026gt;\u0026#34;] edition = \u0026#34;2018\u0026#34; [dependencies] cargo new generates a \u0026ldquo;Hello, world!\u0026rdquo; project for us! We can run this program by moving into the new directory that we made and running this in our terminal:\n1 2 3 4 5 6 7 8 9 $ cd hello-rust $ cargo run Compiling hello-rust v0.1.0 (/Users/wangtom/Code/openapi/online-test/rust/hello-rust) Finished dev [unoptimized + debuginfo] target(s) in 10.21s Running `target/debug/hello-rust` $ cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.00s Running `target/debug/hello-rust` Hello, world! 第一次执行很慢。\n1 2 3 fn main() { println!(\u0026#34;Hello, world!\u0026#34;); } 添加依赖 现在我们来为应用添加依赖。您可以在 crates.io，即 Rust 包的仓库中找到所有类别的库。在 Rust 中，我们通常把包称作“crates”。\n在本项目中，我们使用了名为 ferris-says 的库。\n我们在 Cargo.toml 文件中添加以下信息（从 crate 页面上获取）：\n1 2 [dependencies] ferris-says = \u0026#34;0.2\u0026#34; 接着运行：\n$ cargo build 之后 Cargo 就会安装该依赖。\n运行此命令会创建一个新文件 Cargo.lock，该文件记录了本地所用依赖库的精确版本。\n要使用该依赖库，我们可以打开 main.rs，然后在其中添加下面这行代码：\nuse ferris_says::say;\n这样我们就可以使用 ferris-says crate 中导出的 say 函数了。\n现在我们用新的依赖库编写一个小应用。在 main.rs 中添加以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 use ferris_says::say; use std::io::{stdout, BufWriter}; fn main() { println!(\u0026#34;Hello, world!\u0026#34;); let stdout = stdout(); let message = String::from(\u0026#34;Hello fellow Rustaceans!\u0026#34;); let width = message.chars().count(); let mut writer = BufWriter::new(stdout.lock()); say(message.as_bytes(), width, \u0026amp;mut writer).unwrap(); } 保存完毕后，我们可以输入以下命令来运行此应用：\ncargo run\n如果一切正确，您会看到该应用将以下内容打印到了屏幕上：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ cargo run Compiling hello-rust v0.1.0 (/Users/wangtom/Code/rust/hello-rust) Finished dev [unoptimized + debuginfo] target(s) in 0.98s Running `target/debug/hello-rust` Hello, world! __________________________ \u0026lt; Hello fellow Rustaceans! \u0026gt; -------------------------- \\ \\ _~^~^~_ \\) / o o \\ (/ \u0026#39;_ - _\u0026#39; / \u0026#39;-----\u0026#39; \\ Reference https://www.rust-lang.org/zh-CN/learn/get-started\nhttps://doc.rust-lang.org/cargo/getting-started/first-steps.html\n","description":"","id":26,"section":"posts","tags":["Rust"],"title":"rust-quick-start","uri":"http://localhost:1313/cn/posts/rust-quick-start/"},{"content":" 1 2 3 4 $ sw_vers ProductName:\tMac OS X ProductVersion:\t10.15.1 BuildVersion:\t19B88 1 2 3 4 $ java --version java 13.0.1 2019-10-15 Java(TM) SE Runtime Environment (build 13.0.1+9) Java HotSpot(TM) 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing) 安装 SDKMAN\n1 $ curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash 查看 sdk list gradle 命令查看 gradle 的版本:\n1 $ sdk list gradle 查看安装的版本：\n1 2 $ sdk version SDKMAN 5.7.4+362 直接安装 gradle：\n1 2 3 4 5 6 7 $ sdk install gradle Downloading: gradle 6.0 In progress... ################################# 100.0% Installing: gradle 6.0 Done installing! Setting gradle 6.0 as default. 使用 gradle --version 查看 Gradle 的版本:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 $ gradle --version Welcome to Gradle 6.0! Here are the highlights of this release: - Substantial improvements in dependency management, including - Publishing Gradle Module Metadata in addition to pom.xml - Advanced control of transitive versions - Support for optional features and dependencies - Rules to tweak published metadata - Support for Java 13 - Faster incremental Java and Groovy compilation - New Zinc compiler for Scala - VS2019 support - Support for Gradle Enterprise plugin 3.0 For more details see https://docs.gradle.org/6.0/release-notes.html ------------------------------------------------------------ Gradle 6.0 ------------------------------------------------------------ Build time: 2019-11-08 18:12:12 UTC Revision: 0a5b531749138f2f983f7c888fa7790bfc52d88a Kotlin: 1.3.50 Groovy: 2.5.8 Ant: Apache Ant(TM) version 1.10.7 compiled on September 1 2019 JVM: 13.0.1 (Oracle Corporation 13.0.1+9) OS: Mac OS X 10.15.1 x86_64 Reference https://spring.io/guides/gs/rest-service/\n[END]\n","description":"","id":27,"section":"posts","tags":["Spring"],"title":"spring-rest-api","uri":"http://localhost:1313/cn/posts/spring-rest-api/"},{"content":"URL链接中的utm_source,utm_medium简析\nUTM stood for the Urchin Traffic Monitor, which was part of a software called “Urchin WebAnalytics Software” released in 1998.\nhttp://wang123.net/ads?utm_source=cost\u0026utm_campaign=v2ex\u0026utm_medium=display\u0026utm_content=shengji\n每个参数的详细信息和示例\n广告系列来源（utm_source）\n必填属性。使用 utm_source 来标识搜索引擎、简报名称或其他来源。\n示例：utm_source=google\n广告系列媒介（utm_medium）\n必填属性。使用 utm_medium 来标识媒介，比如电子邮件或每次点击费用。\n示例：utm_medium=cpc\n广告系列字词(utm_term)\n用于付费搜索。使用utm_term来注明此广告的关键字。\n示例：utm_term=running+shoes\n广告系列内容 (utm_content)\n用于A/B测试和按内容进行定位的广告。使用utm_content区分指向同一网址的广告或链接。\n示例：utm_content=logolink或utm_content=textlink\n广告系列名称(utm_campaign)\n用于关键字分析。使用utm_campaign来标识特定的产品促销活动或战略性广告系列。\n示例：utm_campaign=spring_sale\nhttps://www.maketecheasier.com/what-is-utm-source/\n","description":"","id":28,"section":"posts","tags":["Rust"],"title":"URL链接中的utm_source、utm_medium简析","uri":"http://localhost:1313/cn/posts/url%E9%93%BE%E6%8E%A5%E4%B8%AD%E7%9A%84utm_source%E7%AE%80%E6%9E%90/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 1 A private conversation 私人谈话\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy did the writer complain to the people behind him?\nLast week I went to the theatre. I had a very good seat. The play was very interesting. I did not enjoy it. A young man and a young woman were sitting behind me. They were talking loudly. I got very angry. I could not hear the actors. I turned round. I looked at the man and the woman angrily. They did not pay any attention. In the end, I could not bear it. I turned round again. \u0026lsquo;I can\u0026rsquo;t hear a word!\u0026rsquo; I said angrily.\n\u0026lsquo;It\u0026rsquo;s none of your business,\u0026rsquo; the young man said rudely. \u0026lsquo;This is a private conversation!\u0026rsquo;\n生词和短语 New words and expressions private adj. 私人的\nconversation n. 谈话\ntheatre n. 剧场，戏院\nseat n. 座位\nplay n. 戏\nloudly adv. 大声地\nangry adj. 生气的\nangrily adv. 生气地\nattention n. 注意\nbear v. 容忍\nbusiness n. 事\nrudely adv. 无礼地，粗鲁地\n参考译文 Translation 上星期我去看戏。我的座位很好，戏很有意思，但我却无法欣赏。一青年男子与一青年女子坐在我的身后，大声地说着话。我非常生气，因为我听不见演员在说什么。我回过头去怒视着那一男一女，他们却毫不理会。最后，我忍不住了，又一次回过头去，生气地说：“我一个字也听不见了！”\n“不关你的事，”那男的毫不客气地说，“这是私人间的谈话！”\n[END]\n","description":"","id":29,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 1 A private conversation","uri":"http://localhost:1313/cn/posts/nce2/lesson-01-a-private-conversation/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy was the writer\u0026rsquo;s aunt surprised?\nIt was Sunday. I never get up early on Sundays. I sometimes stay in bed until lunchtime. Last Sunday I got up very late. I looked out of the window. It was dark outside. \u0026lsquo;What a day!\u0026rsquo; I thought. \u0026lsquo;It\u0026rsquo;s raining again.\u0026rsquo; Just then, the telephone rang. It was my aunt Lucy. \u0026lsquo;I\u0026rsquo;ve just arrived by train,\u0026rsquo; she said. \u0026lsquo;I\u0026rsquo;m coming to see you.\u0026rsquo;\n\u0026lsquo;But I\u0026rsquo;m still having breakfast,\u0026rsquo; I said.\n\u0026lsquo;What are you doing?\u0026rsquo; she asked.\n\u0026lsquo;I\u0026rsquo;m having breakfast,\u0026rsquo; I repeated.\n\u0026lsquo;Dear me,\u0026rsquo; she said. \u0026lsquo;Do you always get up so late? It\u0026rsquo;s one o\u0026rsquo;clock!\u0026rsquo;\n生词和短语 New words and expressions\nuntil prep. 直到\noutside adv. 外面\nring v. （铃、电话等）响\naunt n. 姑，姨，婶，舅母\nrepeat v. 重复\n参考译文 Translation\n那是个星期天，而在星期天我是从来不早起的，有时我要一直躺到吃午饭的时候。上个星期天，我起得很晚。我望望窗外，外面一片昏暗。“鬼天气！”我想，“又下雨了。”正在这时，电话铃响了。是我姑母露西打来的。“我刚下火车，”她说，“我这就来看你。”\n“但我还在吃早饭，”我说。\n“你在干什么？”她问道。\n“我正在吃早饭，”我又说了一遍。\n“天啊，”她说，“你总是起得这么晚吗？现在已经1点钟了！”\n","description":"","id":30,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-02-breakfast-or-lunch/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 3\nPlease send me a card\n请给我寄一张明信片\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nHow many cards did the writer send?\nPostcards always spoil my holidays. Last summer, I went to Italy. I visited museums and sat in public gardens. A friendly waiter taught me a few words of Italian. Then he lent me a book. I read a few lines, but I did not understand a word. Everyday I thought about postcards. My holidays passed quickly, but I did not send cards to my friends. On the last day I made a big decision. I got up early and bought thirty-seven cards. I spent the whole day in my room, but I did not write a single card!\n生词和短语 New words and expressions\nsend v. 寄，送\npostcard n. 明信片\nspoil v. 使索然无味，损坏\nmuseum n. 博物馆\npublic adj. 公共的\nfriendly adj. 友好的\nwaiter n. 服务员，招待员\nlend v. 借给\ndecision n. 决定\nwhole adj. 整个的\nsingle adj. 唯一的，单一的\n参考译文 Translation\n明信片总搅得我假日不得安宁。去年夏天，我去了意大利。我参观了博物馆，还去了公园。一位好客的服务员教了我几句意大利语，之后还借给我一本书。我读了几行，但一个字也不懂。我每天都想着明信片的事。假期过得真快，可我还没有给我的朋友们寄过一张明信片。到了最后一天，我作出了一项重大决定。我早早起了床，买来了37张明信片。我在房间里关了整整一天。然而竟连一张明信片也没写成！\n","description":"","id":31,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-03-please-send-me-a-card/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 4\nAn exciting trip 激动人心的旅行\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy is Tim finding this trip exciting?\nI have just received a letter from my brother, Tim. He is in Australia. He has been there for six months. Tim is an engineer. He is working for a big firm and he has already visited a great number of different places in Australia. He has just bought an Australian car and has gone to Alice springs, a small town in the centre of Australia. He will soon visit Darwin. From there, he will fly to Perth. My brother has never been abroad before, so he is fending this trip very exciting.\n【New words and expressions】 生词和短语\nexciting adj. 令人兴奋的\nreceive v. 接受，收到\nfirm n. 商行，公司\ndifferent adj. 不同的\ncentre n. 中心\nabroad adv. 在国外\n【Notes on the text】 课文注释\n1 He has been there for six months. 他在那儿已经住了6个月了。关于动词的现在完成时，可以参看第1册第83至87课。\n2 a great number of…, 许多…，用于修饰复数可数名词。\n3 in the centre of…, 在……中部。\n【参考译文】\n我刚刚收到弟弟蒂姆的来信，他正在澳大利亚。他在那儿已经住了6个月了。蒂姆是个工程师，正在一家大公司工作，并且已经去过澳大利亚的不少地方了。他刚买了一辆澳大利亚小汽车，现在去了澳大利亚中部的小镇艾利斯斯普林斯。他不久还将到达达尔文去，从那里，他再飞往珀斯。我弟弟以前从未出过国，因此，他觉得这次旅行非常激动人心。\n","description":"","id":32,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-04-an-exciting-trip/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 5\nNo wrong numbers\n无错号之虞\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhat does \u0026lsquo;No wrong numbers\u0026rsquo; mean?\nMr.James Scott has a garage in Silbury and now he has just bought another garage in Pinhurst. Pinhurst is only five miles from Silbury, but Mr. Scott cannot get a telephone for his new garage, so he has just bought twelve pigeons. Yesterday, a pigeon carried the first message from Pinhurst to Silbury. The bird covered the distance in three minutes. Up to now, Mr.Scott has sent a great many requests for spare parts and other urgent messages from one garage to the other. In this way, he has begun his own private \u0026rsquo;telephone\u0026rsquo; service.\n生词和短语 New words and expressions\npigeon n. 鸽子\nmessage n. 信息\ncover v. 越过\ndistance n. 距离\nrequest n. 要求，请求\nspare part 备件\nservice n. 业务，服务\n参考译文 Translation\n詹姆斯.斯科特先生在锡尔伯里有一个汽车修理部，现在他刚在平赫斯特买了另一个汽车修理部。平赫特离锡尔伯里只有5英里，但詹姆斯.斯科特先生未能为他新的汽车修理部搞到一部电话机，所以他买了只鸽子。昨天，一只鸽子把第一封信从平赫特带到锡尔伯里。这只鸟只用了3分钟就飞完了全程。到目前为止，斯科特先生从一个汽车修理部向另一个发送了大量索取备件的信件和其他紧急函件。就这样，他开始自己的私人“电话”业务。\n","description":"","id":33,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-05-no-wrong-numbers/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 6\nPercy Buttons\n珀西.巴顿斯\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWho is Percy Buttons?\nI have just moved to a house in Bridge Street. Yesterday a beggar knocked at my door. He asked me for a meal and a glass of beer. In return for this, the beggar stood on his head and sang songs. I gave him a meal. He ate the food and drank the beer. Then he put a piece of cheese in his pocket and went away. Later a neighbour told me about him. Everybody knows him. His name is Percy Buttons. He calls at every house in the street once a month and always asks for a meal and a glass of beer.\n生词和短语 New words and expressions\nbeggar n. 乞丐\nfood n. 食物\npocket n. 衣服口袋\ncall v. 拜访，光顾\n参考译文 Translation\n我刚刚搬进了大桥街的一所房子。昨天一个乞丐来敲我的门，问我要一顿饭和一杯啤酒。作为回报，那乞丐头顶地倒立起来，嘴里还唱着歌。我给了他一顿饭。他把食物吃完，又喝了酒。然后把一块乳酪装进衣袋里走了。后来，一位邻居告诉了我他的情况。大家都认识他，他叫珀西.巴顿斯。他每月对这条街上的每户人家光顾一次，总是请求给他一顿饭和一杯啤酒。\n","description":"","id":34,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-06-percy-buttons/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 7\nToo late\n为时太晚\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nDid the detectives save the diamonds?\nThe plane was late and detectives were waiting at the airport all morning. They were expecting a valuable parcel of diamonds from South Africa. A few hours earlier, someone had told the police that thieves would try to steal the diamonds. When the plane arrived, some of the detectives were waiting inside the main building while others were waiting on the airfield. Two men took the parcel off the plane and carried it into the Customs House. While two detectives were keeping guard at the door, two others opened the parcel. To their surprise, the precious parcel was full of stones and sand!\n生词和短语 New words and expressions\ndetective n. 侦探\nairport n. 机场\nexpect v. 期待，等待\nvaluable adj. 贵重的\nparcel n. 包裹\ndiamond n. 钻石\nsteal v. 偷\nmain adj. 主要的\nairfield n. 飞机起落的场地\nguard n. 警戒，守卫\nprecious adj. 珍贵的\nstone n. 石子\nsand n. 沙子\n参考译文 Translation\n飞机误点了，侦探们在机场等了整整一上午。他们正期待从南非来的一个装着钻石的贵重包裹。数小时以前，有人向警方报告，说有人企图偷走这些钻石。当飞机到达时，一些侦探等候在主楼内，另一些侦探则守候在停机坪上。有两个人把包裹拿下飞机，进了海关。这时两个侦探把住门口，另外两个侦探打开了包裹。令他们吃惊的是，那珍贵的包裹里面装的全是石头和沙子！\n","description":"","id":35,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-07-too-late/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 8\nThe best and the worst\n最好的和最差的\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy is Joe\u0026rsquo;s garden the most beautiful one in the town?\nJoe Sanders has the most beautiful garden in our town. Nearly everybody enters for \u0026lsquo;The Nicest Garden Competition\u0026rsquo; each year, but Joe wins every time. Bill Frith\u0026rsquo;s garden is larger than Joe\u0026rsquo;s. Bill works harder than Joe and grows more flowers and vegetables, but Joe\u0026rsquo;s garden is more interesting. He has made neat paths and has built a wooden bridge over a pool. I like gardens too, but I do not like hard work. Every year I enter for the garden competition too, and I always win a little prize for the worst garden in the town!\n生词和短语 New words and expressions\ncompetition n. 比赛，竞赛\nneat adj. 整齐的，整洁的\npath n. 小路，小径\nwooden adj. 木头的\npool n. 水池\n参考译文 Translation\n乔.桑德斯拥有我们镇上最漂亮的花园。几乎每个人都参加每年举办的“最佳花园竞赛”，而每次都是乔获胜。比尔.弗里斯的花园比乔的花园大，他比乔也更为勤奋，种植的花卉和蔬菜也更多，但乔的花园更富有情趣。他修筑了一条条整洁的小路，并在一个池塘上架了一座小木桥。我也喜欢花园，但我却不愿意辛勤劳动。每年的花园竞赛我也参加，但总因是镇上最劣的花园而获得一个小奖！\n","description":"","id":36,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-08-the-best-and-the-worst/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 9 A cold welcome\n冷遇\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhat does \u0026lsquo;a cold welcome\u0026rsquo; refer to?\nOn Wednesday evening, we went to the Town Hall. It was the last day of the year and a large crowd of people had gathered under the Town Hall clock. It would strike twelve in twenty minutes\u0026rsquo; time. Fifteen minutes passed and then, at five to twelve, the clock stopped. The big minute hand did not move. We waited and waited, but nothing happened. Suddenly someone shouted. \u0026lsquo;It\u0026rsquo;s two minutes past twelve! The clock has stopped!\u0026rsquo; I looked at my watch. It was true. The big clock refused to welcome the New Year. At that moment, everybody began to laugh and sing.\n生词和短语 New words and expressions welcome n. 欢迎；v. 欢迎\ncrowd n. 人群\ngather v. 聚集\nhand n. （表或机器的）指针\nshout v. 喊叫\nrefuse v. 拒绝\nlaugh v. 笑\n参考译文 Translation 星期三的晚上，我们去了市政厅。 那是一年的最后一天，一大群人聚集在市政厅的大钟下面。再过20分钟，大钟将敲响12下。15分钟过去了，而就在11点55分时，大钟停了。那根巨大的分针不动了。 我们等啊等啊，可情况没有变化。突然有人喊道：“已经12点零2分了！那钟已经停了！”我看了一下我的手表，果真如此。那座大钟不愿意迎接新年。此时，大家已经笑了起来，同时唱起了歌。\n","description":"","id":37,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-09-a-cold-welcome/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 10 Not for jazz\n不适于演奏爵士乐\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhat happened to the clavichord?\nWe have an old musical instrument. It is called a clavichord. It was made in Germany in 1681. Our clavichord is kept in the living room. It has belonged to our family for a long time. The instrument was bought by my grandfather many years ago. Recently it was damaged by a visitor. She tried to play jazz on it! She struck the keys too hard and two of the strings were broken. My father was shocked. Now we are not allowed to touch it. It is being repaired by a friend of my father\u0026rsquo;s.\n生词和短语 New words and expressions jazz n. 爵士音乐\nmusical adj. 音乐的\ninstrument n. 乐器\nclavichord n. 古钢琴\nrecently adv. 最近\ndamage v. 损坏\nkey n. 琴键\nstring n. （乐器的）弦\nshock v. 使不悦或生气，震惊\nallow v. 允许，让\ntouch v. 触摸\n参考译文 Translation 我家有件古乐器，被称作古钢琴，是1681年德国造的。我们的这架古钢琴存放在起居室里。我们家有这件乐器已经很久了， 是我祖父在很多年以前买的。可它最近被一个客人弄坏了，因为她用它来弹奏爵士乐。她在击琴键时用力过猛，损坏了两根琴弦。我父亲大为吃惊，不许我们再动它。父亲的一个朋友正在修理这件乐器。\n","description":"","id":38,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-10-not-for-jazz/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 11 One good turn deserves another\n礼尚往来\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWho paid for Tony\u0026rsquo;s dinner?\nI was having dinner at a restaurant when Tony Steele came in. Tony worked in a lawyer\u0026rsquo;s office years ago, but he is now working at a bank. He gets a good salary, but he always borrows money from his friends and never pays it back. Tony saw me and came and sat at the same table. He has never borrowed money from me. While he was eating, I asked him to lend me twenty pounds. To my surprise, he gave me the money immediately. \u0026lsquo;I have never borrowed any money from you,\u0026rsquo; Tony said, \u0026lsquo;so now you can pay for my dinner!\u0026rsquo;\n生词和短语 New words and expressions turn n. 行为，举止\ndeserve v. 应得到，值得\nlawyer n. 律师\nbank n. 银行\nsalary n. 工资\nimmediately adv. 立刻\n参考译文 Translation 我正在一家饭馆吃饭，托尼.斯蒂尔走了进来。托尼曾在一家律师事务所工作，而现在正在一家银行上班。他的薪水很高，但他却总是向朋友借钱，并且从来不还。托尼看见了我，就走过来和我坐到一张桌子前。他从未向我借过钱。当他吃饭时，我提出向他借20英镑。令我惊奇的是，他立刻把钱给了我。“我还从未向你借过钱，”托尼说道，“所以现在你可以替我付饭钱了！”\n","description":"","id":39,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-11-one-good-turn-deserves-another/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 12 Goodbye and good luck\n再见，一路顺风\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhere is Captain Alison going and how?\nOur neighbour, Captain Charles Alison, will sail from Portsmouth tomorrow. We\u0026rsquo;ll meet him at the harbour early in the morning. He will be in his small boat, Topsail. Topsail is a famous little boat. It has sailed across the Atlantic many times. Captain Alison will set out at eight o\u0026rsquo;clock, so we\u0026rsquo;ll have plenty of time. We\u0026rsquo;ll see his boat and then we\u0026rsquo;ll say goodbye to him. He will be away for two months. We are very proud of him. He will take part in an important race across the Atlantic.\n生词和短语 New words and expressions luck n. 运气，幸运\ncaptain n. 船长\nsail v. 航行\nharbour n. 港口\nproud adj. 自豪\nimportant adj. 重要的\n参考译文 Translation 我们的邻居查尔斯.艾利森船长明天就要从朴次茅斯启航了。明天一大早我们将在码头为他送行。他将乘坐他的“涛波赛”号小艇。“涛波赛”号是艘有名的小艇，它已经多次横渡大西洋。艾利森船长将于8点钟启航，因此我们有充裕的时间。我们将参观他的船，然后和他告别。他要离开两个月，我们真为他感到自豪，他将参加一次重大的横渡大西洋的比赛。\n","description":"","id":40,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-12-goodbye-and-good-luck/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 13 The Greenwood Boys\n绿林少年\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy will the police have a difficult time?\nThe Greenwood Boys are a group of pop singers. At present, they are visiting all parts of the country. They will be arriving here tomorrow. They will be coming by train and most of the young people in the town will be meeting them at the station. Tomorrow evening they will be singing at the Workers\u0026rsquo; Club. The Greenwood Boys will be staying for five days. During this time, they will give five performances. As usual, the police will have a difficult time. They will be trying to keep order. It is always the same on these occasions.\n生词和短语 New words and expressions group n. 小组，团体\npop singer 流行歌手\nclub n. 俱乐部\nperformance n. 演出\noccasion n. 场合\n参考译文 Translation “绿林少年”是一个流行歌曲演唱团。目前他们正在全国各地巡回演出，明天就要到达此地。他们将乘火车来，镇上的大部分青年人将到车站迎接他们。明晚他们将在工人俱乐部演出。“绿林少年”准备在此逗留5天。在此期间，他们将演出5场。同往常一样，警察的日子将不好过，他们将设法维持秩序。每逢这种场合，情况都是这样。\n","description":"","id":41,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-13-the-greenwood-boys/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 14 Do you speak English?\n你会讲英语吗？\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nDid the young man speak English?\nI had an amusing experience last year. After I had left a small village in the south of France, I drove on to the next town. On the way, a young man waved to me. I stopped and he asked me for a lift. As soon as he had got into the car, I said good morning to him in French and he replied in the same language. Apart from a few words, I do not know any French at all. Neither of us spoke during the journey. I had nearly reached the town, when the young man suddenly said, very slowly, \u0026ldquo;Do you speak English?\u0026rsquo; As I soon learnt, he was English himself!'\n生词和短语 New words and expressions amusing adj. 好笑的，有趣的\nexperience n. 经历\nwave v. 招手\nlift n. 搭便车\nreply v. 回答\nlanguage n. 语言\njourney n. 旅行\n参考译文 Translation 去年我有过一次有趣的经历。在离开法国南部的一个小村庄后，我继续驶往下一个城镇。途中，一个青年人向我招手。我把车停下，他向我提出要求搭车。他一上车，我就用法语向他问早上好，他也同样用法语回答我。除了个别几个单词外，我根本不会法语。旅途中我们谁也没讲话。就要到达那个镇时，那青年突然开了口，慢慢地说道：“你会讲英语吗？”\n我很快了解到，他自己就是个英国人！\n","description":"","id":42,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-14-do-you-speak-english/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 15 Good news\n佳音\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhat was the good news?\nThe secretary told me that Mr. Harmsworth would see me. I felt very nervous when I went into his office. He did not look up from his desk when I entered. After I had sat down, he said that business was very bad. He told me that the firm could not afford to pay such large salaries. Twenty people had already left. I knew that my turn had come.\n\u0026lsquo;Mr.Harmsworth,\u0026rsquo; I said in a weak voice.\n\u0026lsquo;Don\u0026rsquo;t interrupt,\u0026rsquo; he said.\nThen he smiled and told me I would receive an extra thousand pounds a year!\n生词和短语 New words and expressions secretary n. 秘书\nnervous adj. 精神紧张的\nafford v. 负担得起\nweak adj. 弱的\ninterrupt v. 插话，打断\n参考译文 Translation 秘书告诉我说哈姆斯沃斯先生要见我。我走进他的办公室，感到非常紧张。我进去的时候，他连头也没抬。待我坐下后，他说生意非常不景气。他还告诉我，公司支付不起这么庞大的工资开支，有20个人已经离去。我知道这次该轮到我了。\n“哈姆斯沃斯先生，”我无力地说。\n“不要打断我的话，”他说。\n然后他微笑了一下告诉我说，我每年将得到1,000 英镑的额外收入。\n","description":"","id":43,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-15-good-news/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 16 A polite request\n彬彬有礼的要求\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhat was the polite request?\nIf you park your car in the wrong place, a traffic policeman will soon find it. You will be very lucky if he lets you go without a ticket. However, this does not always happen. Traffic police are sometimes very polite. During a holiday in Sweden, I found this note on my car: \u0026lsquo;sir, we welcome you to our city. This is a \u0026ldquo;No Parking\u0026rdquo; area. You will enjoy your stay here if you pay attention to our street signs. This note is only a reminder.\u0026rsquo; If you receive a request like this, you cannot fail to obey it!\n生词和短语 New words and expressions park v. 停放（汽车）\ntraffic n. 交通\nticket) n. 交通违规罚款单\nnote n. 便条\narea n. 地段\nsign n. 指示牌\nreminder n. 提示\nfail v. 无视，忘记\nobey v. 服从\n参考译文 Translation 一旦你把汽车停错了地方，交通警很快就会发现。如果他没给你罚单就放你走了，算你走运。然而，情况并不都是这样，交通警有时也很客气。有一次在瑞典度假，我发现我的车上有这样一个字条：“先生，欢迎您光临我们的城市。此处是‘禁止停车’区。如果您对我们街上的标牌稍加注意，您在此会过得很愉快的。谨此提请注意。”如果你收到这样的恳求，你是不会不遵照执行的！\n","description":"","id":44,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-16-a-polite-request/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 17 Always young\n青春常驻\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy doesn\u0026rsquo;t Aunt Jennifer tell anyone how old she is?\nMy aunt Jennifer is an actress. She must be at least thirty-five years old. In spite of this, she often appears on the stage as a young girl. Jennifer will have to take part in a new play soon. This time, she will be a girl of seventeen. In the play, she must appear in a bright red dress and long black stockings. Last year in another play, she had to wear short socks and a bright, orange-coloured dress. If anyone ever asks her how old she is, she always answers, \u0026lsquo;Darling, it must be terrible to be grown up!\u0026rsquo;\n生词和短语 New words and expressions appear v. 登场，扮演\nstage n. 舞台\nbright adj. 鲜艳的\nstocking n. （女用）长筒袜\nsock n. 短袜\n参考译文 Translation 我的姑姑詹妮弗是位演员，她至少也有35岁了。尽管如此，她却常在舞台上扮演小姑娘。詹妮弗很快又要参加一个新剧的演出。这一次，她将扮演一个17岁的少女。演出时她必须穿一条鲜红色的裙子和黑色的长筒袜。去年在演另一个剧时，她不得不穿短袜和一件鲜艳的橘红色的衣服。一旦有人问起她有多大年纪，她总是回答：“亲爱的，长成大人真可怕啊！”\n","description":"","id":45,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-17-always-young/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 18 He often does this!\n他经常干这种事！\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhat had happened to the writer\u0026rsquo;s bag?\nAfter I had had lunch at a village pub, I looked for my bag. I had left it on a chair beside the door and now it wasn\u0026rsquo;t there! As I was looking for it, the landlord came in.\n\u0026lsquo;Did you have a good meal?\u0026quot; he asked.\n\u0026lsquo;Yes, thank you,\u0026rsquo; I answered, \u0026lsquo;but I can\u0026rsquo;t pay the bill. I haven\u0026rsquo;t got my bag.\u0026rsquo;\nThe landlord smiled and immediately went out. In a few minutes he returned with my bag and gave it back to me.\n\u0026lsquo;I\u0026rsquo;m very sorry,\u0026rsquo; he said. \u0026lsquo;My dog had taken in into the garden. He often does this!\u0026rsquo;\n生词和短语 New words and expressions pub n. 小酒店\nlandlord n. 店主\nbill n. 帐单\n参考译文 Translation 我在一家乡村小酒店吃过午饭后，就找我的提包。我曾把它放在门边的椅子上，可这会儿不见了！当我正在寻找时，酒店老板走了进来。\n“您吃得好吗？”他问。\n“很好，谢谢。”我回答，“但我付不了帐，我的提包没有了。”\n酒店老板笑了笑，马上走了出去。一会儿工夫他拿着我的提包回来了，把它还给了我。\n“实在抱歉，”他说，“我的狗把它弄到花园里去了，他常干这种事！”\n","description":"","id":46,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-18-he-often-does-this/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 19 Sold out\n票已售完\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhen will the writer see the play?\n\u0026lsquo;The play may begin at any moment,\u0026rsquo; I said.\n\u0026lsquo;It may have begun already,\u0026rsquo; Susan answered.\nI hurried to the ticket office. \u0026lsquo;May I have two tickets please?\u0026rsquo; I asked.\n\u0026lsquo;I\u0026rsquo;m sorry, we\u0026rsquo;ve sold out,\u0026rsquo; the girl said.\n\u0026lsquo;What a pity!\u0026rsquo; Susan exclaimed.\nJust then, a man hurried to the ticket office.\n\u0026lsquo;Can I return these two tickets?\u0026rsquo; he asked.\n\u0026lsquo;Certainly,\u0026rsquo; the girl said.\nI went back to the ticket office at once.\n\u0026lsquo;Could I have those two tickets please?\u0026rsquo; I asked.\n\u0026lsquo;Certainly,\u0026rsquo; the girl said, \u0026lsquo;but they\u0026rsquo;re for next Wednesday\u0026rsquo;s performance. Do you still want them?\u0026rsquo;\n\u0026lsquo;I might as well have them,\u0026rsquo; I said sadly.\n生词和短语 New words and expressions hurry v. 匆忙\nticket office 售票处\npity n. 令人遗憾的事\nexclaim v. 大声说\nreturn v. 退回\nsadly adv. 悲哀地，丧气地\n参考译文 Translation “剧马上就要开演了，”我说。\n“也许已经开演了呢，”苏珊回答说。\n我匆匆赶到售票处，问：“我可以买两张票吗？”\n“对不起，票已售完。”那位姑娘说。\n“真可惜！”苏珊大声说。\n正在这时，一个男子匆匆奔向售票处。\n“我可以退掉这两张票吗？”他问。\n“当然可以，”那姑娘说。\n我马上又回到售票处。\n“我可以买那两张票吗？”我问。\n“当然可以，不过这两张票是下星期三的，您是否还要呢？”\n“我还是买下的好，”我垂头丧气地说。\n","description":"","id":47,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-19-sold-out/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 20 One man in a boat\n独坐孤舟\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy is fishing the writer\u0026rsquo;s favourite sport?\nFishing is my favourite sport. I often fish for hours without catching anything. But this does not worry me. Some fishermen are unlucky. Instead of catching fish, they catch old boots and rubbish. I am even less lucky. I never catch anything \u0026ndash; not even old boots. After having spent whole mornings on the river, I always go home with an empty bag. \u0026lsquo;You must give up fishing!\u0026rsquo; my friends say. \u0026lsquo;It\u0026rsquo;s a waste of time.\u0026rsquo; But they don\u0026rsquo;t realize one important thing. I\u0026rsquo;m not really interested in fishing. I am only interested in sitting in a boat and doing nothing at all!\n生词和短语 New words and expressions catch v. 抓到\nfisherman n. 钓鱼人，渔民\nboot n. 靴子\nwaste n. 浪费\nrealize v. 意识到\n参考译文 Translation 钓鱼是我特别喜爱的一项运动。我经常一钓数小时却一无所获，但我从不为此烦恼。有些垂钓者就是不走运，他们往往鱼钓不到，却钓上来些旧靴子和垃圾。我的运气甚至还不及他们。我什么东西也未钓到过 \u0026ndash; 就连旧靴子也没有。我总是在河上呆上整整一上午，然后空着袋子回家。“你可别再钓鱼了！”我的朋友们说，“这是浪费时间。”然而他们没有认识到重要的一点，我并不是真的对钓鱼有兴趣，我感兴趣的只是独坐孤舟，无所事事！\n","description":"","id":48,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-20-one-man-in-a-boat/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 21 Mad or not?\n是不是疯了\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy do people think the writer is mad?\nAeroplanes are slowly driving me mad. I live near an airport and passing planes can be heard night and day. The airport was built years ago, but for some reason it could not be used then. Last year, however, it came into use. Over a hundred people must have been driven away from their homes by the noise. I am one of the few people left. Sometimes I think this house will be knocked down by a passing plane. I have been offered a large sum of money to go away, but I am determined to stay here. Everybody says I must be mad and they are probably right.\n生词和短语 New words and expressions mad adj. 发疯\nreason n. 原因\nsum n. 量\ndetermined adj. 坚定的，下决心的\n参考译文 Translation 飞机正在逐渐把我逼疯。我住在一个机场附近，过往飞机日夜不绝于耳。机场是许多年前建的，但由于某种原因当时未能启用。然而去年机场开始使用了。有100多人肯定是被噪音逼得已经弃家远去，我是少数留下来的人中的一个。有时我觉得这房子就要被一架飞过的飞机撞倒。他们曾向我提供一大笔钱让我搬走，但我决定留在这儿。大家都说我肯定是疯了，也许他们说的是对的。\n","description":"","id":49,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-21-mad-or-not/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\n","description":"","id":50,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-22-a-glass-envelope/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 23 A new house\n新居\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nWhy is the new house special?\nI had a letter from my sister yesterday. She lives in Nigeria. In her letter, she said that she would come to England next year. If she comes, she will get a surprise. We are now living in a beautiful new house in the country. Work on it had begun before my sister left. The house was completed five months ago. In my letter, I told her that she could stay with us. The house has many large rooms and there is a lovely garden. It is a very modern house, so it looks strange to some people. It must be the only modern house in the district.\n生词和短语 New words and expressions complete v. 完成\nmodern adj. 新式的，与以往不同的\nstrange adj. 奇怪的\ndistrict n. 地区\n参考译文 Translation 昨天我收到了姐姐的一封信，她住在尼日利亚。在信中她说她明年将到英国来。如果她来了，她会感到非常惊奇了。我们现在住在乡间的一栋漂亮的新住宅里。这栋房子在我姐姐离开之前就已动工了，是在5个月以前竣工的。我在信中告诉她，她可以和我们住在一起。这栋房子里有许多房间，还有一个漂亮的花园。它是一栋非常现代化的住宅，因此在有些人看来很古怪。它肯定是这个地区唯一的一栋现代化住宅。\n","description":"","id":51,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-23-a-new-house/"},{"content":" 新概念英语第二册 Unit 1 (Lesson 1 ~ 24)\nLesson 1 A private conversation 私人谈话\nLesson 2 Breakfast or lunch? 早餐还是午餐？\nLesson 3 Please send me a card 请给我寄一张明信片\nLesson 4 An exciting trip 激动人心的旅行\nLesson 5 No wrong numbers 无错号之虞\nLesson 6 Percy Buttons 珀西?巴顿斯\nLesson 7 Too late 为时太晚\nLesson 8 The best and the worst 最好的和最差的\nLesson 9 A cold welcome 冷遇\nLesson 10 Not for jazz 不适于演奏爵士乐\nLesson 11 One good turn deserves another 礼尚往来\nLesson 12 Goodbye and good luck 再见，一路顺风\nLesson 13 The Greenwood Boys绿林少年\nLesson 14 Do you speak English? 你会讲英语吗？\nLesson 15 Good news 佳音\nLesson 16 A polite request 彬彬有礼的要求\nLesson 17 Always young 青春常驻\nLesson 18 He often does this! 他经常干这种事！\nLesson 19 Sold out 票已售完\nLesson 20 One man in a boat 独坐孤舟\nLesson 21 Mad or not? 是不是疯了？\nLesson 22 A glass envelope 玻璃信封\nLesson 23 A new house 新居\nLesson 24 It could be worse 不幸中之万幸\nLesson 24 If could be worse\n不幸中之万幸\nFirst listen and then answer the question.\n听录音，然后回答以下问题。\nHad the writer\u0026rsquo;s money been stolen?\nI entered the hotel manager\u0026rsquo;s office and sat down. I had just lost $50 and I felt very upset. \u0026lsquo;I left the money in my room,\u0026rsquo; I said, \u0026lsquo;and it\u0026rsquo;s not there now.\u0026rsquo; The manager was sympathetic, but he could do nothing. \u0026lsquo;Everyone\u0026rsquo;s losing money these days,\u0026rsquo; he said. He started to complain about this wicked world but was interrupted by a knock at the door. A girl came in and put an envelope on his desk. It contained $50. \u0026lsquo;I found this outside this gentleman\u0026rsquo;s room,\u0026rsquo; she said. \u0026lsquo;Well,\u0026rsquo; I said to the manager, \u0026rsquo;there is still some honesty in this world!\u0026rsquo;\n生词和短语 New words and expressions manager n. 经理\nupset adj. 不安\nsympathetic adj. 表示同情的\ncomplain v. 抱怨\nwicked adj. 很坏的，邪恶的\ncontain v. 包含，内装\nhonesty n. 诚实\n参考译文 Translation 我走进饭店经理的办公室，坐了下来。我刚刚丢了50英镑，感到非常烦恼。“我把钱放在房间里，”我说，“可现在没有了。”经理深表同情，但却无能为力。“现在大家都在丢钱，”他说。他开始抱怨起这个邪恶的世道来，却被一阵敲门声打断了。一个姑娘走了进来，把一个信封放在了他桌上。它里面装着50英镑。“这是我在这位先生的房门外捡到的，”她说。“是啊，”我对那位经理说，“这世界上还是有诚实可言的！”\n","description":"","id":52,"section":"posts","tags":["新概念","新概念"],"title":"新概念英语2：Lesson 7 Too late 为时太晚","uri":"http://localhost:1313/cn/posts/nce2/lesson-24-it-could-be-worse/"},{"content":"C语言是一门面向过程的的通用程序设计语言，广泛应用于底层开发。\nC语言是普适性最强的一种计算机程序编辑语言，它不仅可以发挥出高级编程语言的功用，还具有汇编语言的优点。\nC语言诞生于美国的贝尔实验室，由 D.M.Ritchie 以B语言为基础发展而来。在它的主体设计完成后，Thompson 和 Ritchie 用它完全重写了 UNIX 操作系统.\n1989年，ANSI 发布了第一个完整的 C语言 标准 —— ANSI X3.159—1989，简称“C89”，人们习惯称其为“ANSI C”。\nC89在1990年被国际标准组织 ISO(International Standard Organization)采纳，给予的名称为：ISO/IEC 9899，所以ISO/IEC9899: 1990也通常被简称为“C90”。\n1999年，在做了一些必要的修正和完善后，ISO发布了新的C语言标准，命名为ISO/IEC 9899：1999，简称“C99”。\n在2011年12月8日，ISO又正式发布了新的标准，称为ISO/IEC9899: 2011，简称为“C11”。\n第一个c语言程序： hell.c 文件内容:\n1 2 3 4 5 6 7 8 9 10 #include \u0026lt;stdio.h\u0026gt; // 代码从 main() 函数开始执行。 int main() { // 我的第一个 C语言 程序 printf(\u0026#34;Hello, World! \\n\u0026#34;); return 0; } 常见的编译器简介 （1）GCC编译器\nGCC原名为GNU C语言编译器（GNU C Compiler），只能处理C语言。但其很快扩展，变得可处理C++，后来又扩展为能够支持更多编程语言，如Fortran、Pascal、Objective -C、Java、Ada、Go以及各类处理器架构上的汇编语言等，所以改名GNU编译器套件（GNU Compiler Collection）。\n（2）Clang 编译器\nLow Level Virtual Machine (LLVM) 是一个开源的编译器架构，它已经被成功应用到多个应用领域。Clang 是 LLVM 的一个编译器前端，它目前支持 C, C++, Objective-C 以及 Objective-C++ 等编程语言。\n（3）VC6.0 (已淘汰)\nMicrosoft Visual C++ 6.0，简称VC6.0，是微软于1998年推出的一款C++编译器。Microsoft Visual C++ 6.0对windows7和windows8的兼容性较差。\n（4）Turbo C (已淘汰)\nTurbo C 是美国Borland公司的产品，Borland公司是一家专门从事软件开发、研制的公司。 1987年首次推出Turbo C 1.0 产品, 其中使用了全然一新的集成开发环境, 大大方便了程序的开发。Turbo C 2.0 则是Borland公司1989年出版的。\n（5）Visual Studio\nMicrosoft Visual Studio（简称VS）是美国微软公司的开发工具包系列产品。2017年3月8日，微软发布 Visual Studio 2017。 2019年4月2日，微软发布Visual Studio2019.\n使用 GCC 编译并执行 查看 gcc 版本：\n1 2 3 4 5 6 7 8 $ gcc --version Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1 Apple clang version 12.0.0 (clang-1200.0.32.2) Target: x86_64-apple-darwin19.6.0 Thread model: posix InstalledDir: /Library/Developer/CommandLineTools/usr/bin 使用 gcc 编译并执行：\n1 2 $ gcc hello.c \u0026amp;\u0026amp; ./a.out Hello, World! 说明，命令 gcc hello.c 表示编译 hello.c 文件里的代码。 ./a.out 表示执行一个可执行文件 a.out。\n\u0026amp;\u0026amp; 表示 and，即执行完第一个命令后，继续执行第二个命令。\n可执行文件 a.out 是，编译c语言代码后生成的默认的可执行文件。\n我们可以指定生成的可执行文件的名称，使用 -o 参数即可。\n1 2 3 $ gcc hello.c -o hello2020 $ ./hello2020 Hello, World! 这里我们使用了 -o 参数指定生成的可执行文件名称为 hello2020。\n使用 Clang 编译并执行 查看 clang 版本：\n1 2 3 4 5 $ clang --version Apple clang version 12.0.0 (clang-1200.0.32.2) Target: x86_64-apple-darwin19.6.0 Thread model: posix InstalledDir: /Library/Developer/CommandLineTools/usr/bin 使用 clang 编译并执行：\n1 2 $ clang hello.c \u0026amp;\u0026amp; ./a.out Hello, World! 参考 Reference http://c.biancheng.net/c/\nhttps://www.runoob.com/cprogramming/c-tutorial.html\nhttps://baike.baidu.com/item/c%E8%AF%AD%E8%A8%80\n","description":"","id":53,"section":"posts","tags":["Rust"],"title":"第一个c语言程序","uri":"http://localhost:1313/cn/posts/c-quick-start/"},{"content":"Go不会对数据进行隐式的类型转换，只能手动去执行转换操作。\nstrconv 包提供了简单数据类型之间的类型转换功能。\n以下是常用的一些转换函数：\n将 int 类型转成 string 类型: (Itoa) 1 2 3 4 5 6 7 8 num := 3311 str := strconv.Itoa(num) fmt.Printf(\u0026#34;--\u0026gt; 类型: %T, 值: %v \\n\u0026#34;, num, num) // 输出结果: “--\u0026gt; 类型: string, 值: 3311” fmt.Printf(\u0026#34;--\u0026gt; 类型: %T, 值: %v \\n\u0026#34;, str, str) // 输出结果: “--\u0026gt; 类型: string, 值: 3311” 将 int64 类型转换成 string 类型: (FormatInt) func FormatInt(i int64, base int) string\n1 2 3 4 5 v := int64(-4235) s10 := strconv.FormatInt(v, 10) fmt.Printf(\u0026#34;--\u0026gt; %T, %v\\n\u0026#34;, s10, s10) // 输出结果: string, -4235 将 string 类型转成 int 类型 (Atoi) Atoi: 将 string 类型转成 int 类型\n1 2 3 4 5 6 7 // Atoi: 将 string 类型转成 int 类型 fmt.Println(\u0026#34;---- Atoi -----\u0026#34;) num2 := \u0026#34;1012\u0026#34; if s, err := strconv.Atoi(num2); err == nil { fmt.Printf(\u0026#34;--\u0026gt; 类型: %T, 值: %v \\n\u0026#34;, s, s) // 输出结果: “--\u0026gt; 类型: int, 值: 1012” } 将 string 类型转换到 int64 类型: 将 string 类型转换到 int64 类型\n1 2 3 4 5 6 7 8 9 10 11 v32 := \u0026#34;-354634382\u0026#34; if s, err := strconv.ParseInt(v32, 10, 32); err == nil { fmt.Printf(\u0026#34;%T, %v\\n\u0026#34;, s, s) // 输出: int64, -354634382 } v64 := \u0026#34;-3546343826724305832\u0026#34; if s, err := strconv.ParseInt(v64, 10, 64); err == nil { fmt.Printf(\u0026#34;%T, %v\\n\u0026#34;, s, s) // 输出: int64, -3546343826724305832 } 代码实例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { fmt.Println(\u0026#34;--\u0026gt; Hello, World!\u0026#34;); tips := \u0026#34;这里是my类型转换?\u0026#34; fmt.Println(\u0026#34;--\u0026gt; tips: \u0026#34; + tips); // int 类型转成 string 类型 fmt.Println(\u0026#34;---- Itoa -----\u0026#34;) num := 3311 str := strconv.Itoa(num) fmt.Printf(\u0026#34;--\u0026gt; 类型: %T, 值: %v \\n\u0026#34;, num, num) // 输出结果: “--\u0026gt; 类型: string, 值: 3311” fmt.Printf(\u0026#34;--\u0026gt; 类型: %T, 值: %v \\n\u0026#34;, str, str) // 输出结果: “--\u0026gt; 类型: string, 值: 3311” // Atoi: 将 string 类型转成 int 类型 fmt.Println(\u0026#34;---- Atoi -----\u0026#34;) num2 := \u0026#34;1012\u0026#34; if s, err := strconv.Atoi(num2); err == nil { fmt.Printf(\u0026#34;--\u0026gt; 类型: %T, 值: %v \\n\u0026#34;, s, s) // 输出结果: “--\u0026gt; 类型: int, 值: 1012” } // ParseFloat: 将字符串转换成浮点数 fmt.Println(\u0026#34;---- ParseFloat -----\u0026#34;) v3 := \u0026#34;3.1415926535\u0026#34; if s, err := strconv.ParseFloat(v3, 32); err == nil { // 输出结果: “--\u0026gt; 类型: float64, 值: 3.1415927410125732” fmt.Printf(\u0026#34;--\u0026gt; 类型: %T, 值: %v \\n\u0026#34;, s, s) } if s, err := strconv.ParseFloat(v3, 64); err == nil { // 输出结果: “--\u0026gt; 类型: float64, 值: 3.1415926535” fmt.Printf(\u0026#34;--\u0026gt; 类型: %T, 值: %v \\n\u0026#34;, s, s) } // 特殊字符转义 fmt.Println(\u0026#34;---- Quote -----\u0026#34;) // there is a tab character inside the string literal s := strconv.Quote(`\u0026#34;Fran \u0026amp; \\n \\t Freddie\u0026#39;s Diner ☺\u0026#34;`) // 输出结果: “\u0026#34;\\\u0026#34;Fran \u0026amp; \\\\n \\\\t Freddie\u0026#39;s Diner\\t☺\\\u0026#34;\u0026#34;” fmt.Println(s) // QuoteToASCII 将字符串转换为“双引号”引起来的 ASCII 字符串 fmt.Println(strconv.QuoteToASCII(\u0026#34;to quote Shakespeare 引用莎士比亚的话\u0026#34;)) // 特殊字符取消转义 fmt.Println(\u0026#34;---- Unquote -----\u0026#34;) s1 := \u0026#34;`Hello 世界！`\u0026#34; // 解析反引号字符串 s2 := `\u0026#34;Hello\\t\\u4e16\\u754c\\uff01\u0026#34;` // 解析双引号字符串 s3 := `\u0026#34;to quote Shakespeare \\u5f15\\u7528\\u838e\\u58eb\\u6bd4\\u4e9a\\u7684\\u8bdd\u0026#34;` // 解析双引号字符串 fmt.Println(strconv.Unquote(s1)) // Hello 世界！ \u0026lt;nil\u0026gt; fmt.Println(strconv.Unquote(s2)) // Hello 世界！ \u0026lt;nil\u0026gt; fmt.Println(strconv.Unquote(s3)) // to quote Shakespeare 引用莎士比亚的话 \u0026lt;nil\u0026gt; } 运行代码\n1 $ go run ~/development/golang/go-string-strconv.go 代码输出结果如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 --\u0026gt; Hello, World! --\u0026gt; tips: 这里是my类型转换? ---- Itoa ----- --\u0026gt; 类型: int, 值: 3311 --\u0026gt; 类型: string, 值: 3311 ---- Atoi ----- --\u0026gt; 类型: int, 值: 1012 ---- ParseFloat ----- --\u0026gt; 类型: float64, 值: 3.1415927410125732 --\u0026gt; 类型: float64, 值: 3.1415926535 ---- Quote ----- \u0026#34;\\\u0026#34;Fran \u0026amp; \\\\n \\\\t Freddie\u0026#39;s Diner\\t☺\\\u0026#34;\u0026#34; \u0026#34;to quote Shakespeare \\u5f15\\u7528\\u838e\\u58eb\\u6bd4\\u4e9a\\u7684\\u8bdd\u0026#34; ---- Unquote ----- Hello\t世界！ \u0026lt;nil\u0026gt; Hello\t世界！ \u0026lt;nil\u0026gt; to quote Shakespeare 引用莎士比亚的话 \u0026lt;nil\u0026gt; Reference https://golang.google.cn/pkg/strconv/\nhttps://www.cnblogs.com/golove/p/3262925.html\nhttps://www.cnblogs.com/f-ck-need-u/p/9863915.html\n[END]\n","description":"","id":54,"section":"posts","tags":["Golang"],"title":"Golang-使用strconv包string/int/int64类型转换","uri":"http://localhost:1313/cn/posts/golang/golang-%E4%BD%BF%E7%94%A8strconv%E5%8C%85string-int-int64%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":55,"section":"","tags":null,"title":"关于 About","uri":"http://localhost:1313/cn/about/"},{"content":"Nest (NestJS)是一个用于构建高效、可伸缩的 Node.js 服务器端框架。\nNestJS 默认使用 JavaScript 的超集 TypeScript 进行开发。\n环境准备 查看node和npm版本:\n1 2 3 4 5 $ node --version v15.2.1 $ npm --version 7.0.14 安装 @nestjs/cli 使用 npm 全局安装 @nestjs/cli:\n1 2 3 4 5 $ npm i -g @nestjs/cli /usr/local/bin/nest -\u0026gt; /usr/local/lib/node_modules/@nestjs/cli/bin/nest.js in/nest.js + @nestjs/cli@7.5.3 added 3 packages from 3 contributors and updated 10 packages in 39.209s 使用 nest --version 命令查看 nest 当前版本:\n1 2 $ nest --version 7.5.3 使用 nest new 命令创建一个名为 nest-api 的项目:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 $ nest new nest-api ⚡ We will scaffold your app in a few seconds.. CREATE nest-api/.eslintrc.js (630 bytes) CREATE nest-api/.prettierrc (51 bytes) CREATE nest-api/README.md (3339 bytes) CREATE nest-api/nest-cli.json (64 bytes) CREATE nest-api/package.json (1962 bytes) CREATE nest-api/tsconfig.build.json (97 bytes) CREATE nest-api/tsconfig.json (339 bytes) CREATE nest-api/src/app.controller.spec.ts (617 bytes) CREATE nest-api/src/app.controller.ts (274 bytes) CREATE nest-api/src/app.module.ts (249 bytes) CREATE nest-api/src/app.service.ts (142 bytes) CREATE nest-api/src/main.ts (208 bytes) CREATE nest-api/test/app.e2e-spec.ts (630 bytes) CREATE nest-api/test/jest-e2e.json (183 bytes) ? Which package manager would you ❤️ to use? npm ▸▹▹▹▹ Installation in progress... ☕ 🚀 Successfully created project nest-api 👉 Get started with the following commands: $ cd nest-api $ npm run start Thanks for installing Nest 🙏 Please consider donating to our open collective to help us maintain this package. 🍷 Donate: https://opencollective.com/nest 启动项目 进入项目，并启动项目\n1 2 3 4 5 6 7 8 9 10 11 $ cd nest-api $ npm run start \u0026gt; nest-api@0.0.1 start \u0026gt; nest start [Nest] 95920 - 2020/12/02 下午4:17:34 [NestFactory] Starting Nest application... [Nest] 95920 - 2020/12/02 下午4:17:34 [InstanceLoader] AppModule dependencies initialized +18ms [Nest] 95920 - 2020/12/02 下午4:17:34 [RoutesResolver] AppController {}: +9ms [Nest] 95920 - 2020/12/02 下午4:17:34 [RouterExplorer] Mapped {, GET} route +4ms [Nest] 95920 - 2020/12/02 下午4:17:34 [NestApplication] Nest application successfully started +3ms 查看启动效果：\n（1）打开浏览器，访问 http://localhost:3000/ 就可以看到页面输出了 Hello World! 文字。\n（2）在终端使用 curl 请求:\n1 2 3 4 5 6 7 8 9 10 11 $ curl -i localhost:3000 HTTP/1.1 200 OK X-Powered-By: Express Content-Type: text/html; charset=utf-8 Content-Length: 12 ETag: W/\u0026#34;c-Lve95gjOVATpfV8EL5X4nxwjKHE\u0026#34; Date: Wed, 02 Dec 2020 08:18:21 GMT Connection: keep-alive Keep-Alive: timeout=5 Hello World!% 可以看到， 输出了 Hello World! 字符串。\n使用 -i 参数，表示要输出 header 头信息。\n在 header 头信息中，我们可以看到，X-Powered-By 值为 Express， 就是告诉我们这个网站或框架底层是 Express 框架。\nExpress 是一个基于 Node.js 平台，快速、开放、极简的 Web 开发框架。\n项目结构 查看一下项目结构:\n1 2 3 4 5 6 7 8 9 10 11 12 $ ll nest-api total 1432 -rw-r--r-- 1 wangtom staff 3.3K 12 2 16:14 README.md drwxr-xr-x 15 wangtom staff 480B 12 2 16:17 dist/ -rw-r--r-- 1 wangtom staff 64B 12 2 16:14 nest-cli.json drwxr-xr-x 593 wangtom staff 19K 12 2 16:15 node_modules/ -rw-r--r-- 1 wangtom staff 695K 12 2 16:15 package-lock.json -rw-r--r-- 1 wangtom staff 1.9K 12 2 16:15 package.json drwxr-xr-x 7 wangtom staff 224B 12 2 16:14 src/ drwxr-xr-x 4 wangtom staff 128B 12 2 16:14 test/ -rw-r--r-- 1 wangtom staff 97B 12 2 16:14 tsconfig.build.json -rw-r--r-- 1 wangtom staff 339B 12 2 16:14 tsconfig.json 可以使用 tree 命令查看项目的目录结构:\n比如使用 tree ./nest-api -L 1, 查看1级目录结构。\n1 2 3 4 5 6 7 8 9 10 11 12 13 $ tree ./nest-api -L 1 ./nest-api ├── README.md ├── dist/ ├── nest-cli.json ├── node_modules/ ├── package-lock.json ├── package.json ├── src/ ├── test/ ├── tsconfig.build.json └── tsconfig.json 4 directories, 6 files 项目的结构如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ./nest-api ├── README.md ├── nest-cli.json ├── node_modules/ ├── package-lock.json ├── package.json ├── src/ # 源码目录 │ ├── app.controller.spec.ts # 控制器测试文件 │ ├── app.controller.ts # 控制器类 │ ├── app.module.ts # 模块 │ ├── app.service.ts # 服务类 │ └── main.ts # 入口文件 ├── test/ # 测试代码目录 │ ├── app.e2e-spec.ts │ └── jest-e2e.json ├── tsconfig.build.json └── tsconfig.json 可以看到，和 Angular 的项目结构很相似。\n查看项目的入口文件 src/main.ts, 定义了一个异步方法(bootstrap)来启动应用，默认监听端口 3000:\n1 2 3 4 5 6 7 8 9 10 // main.ts import { NestFactory } from \u0026#39;@nestjs/core\u0026#39;; import { AppModule } from \u0026#39;./app.module\u0026#39;; async function bootstrap() { const app = await NestFactory.create(AppModule); await app.listen(3000); } bootstrap(); 控制器: app.controller.ts\n1 2 3 4 5 6 7 8 9 10 11 12 13 // app.controller.ts import { Controller, Get } from \u0026#39;@nestjs/common\u0026#39;; import { AppService } from \u0026#39;./app.service\u0026#39;; @Controller() export class AppController { constructor(private readonly appService: AppService) {} @Get() getHello(): string { return this.appService.getHello(); } } 控制器中定义了一个名为 getHello() 的方法，使用 @Get 注解，表示可以通过 Get 方法访问。\n控制器构造方法中引入了私有只读的服务类 AppService， 在 getHello() 方法中调动了服务类(AppService)中的 getHello() 方法。\n服务类: app.service.ts\n1 2 3 4 5 6 7 8 9 // app.service.ts import { Injectable } from \u0026#39;@nestjs/common\u0026#39;; @Injectable() export class AppService { getHello(): string { return \u0026#39;Hello World!\u0026#39;; } } 在服务类AppService中，定义了 getHello() 方法，该方法只返回了字符串 Hello World!。\n将代码提交到 gitee 为了方便管理代码，可以将代码提交到 github 或 gitee 代码托管网站中保存。这里我提交到 gitee 网站。\n查看当前的 git 版本：\n$ git --version git version 2.23.0 初始化 git 仓库:\n1 2 $ git init Reinitialized existing Git repository in /Users/wangtom/Code/nest-api/.git/ 提示 git repository 已经存在了。说明在使用 nest new 命令创建这个项目时，就已经帮我们初始化了git仓库了。\n提交代码，将远程源设置为 gitee.com 的仓库。\n需要先在 gitee.com 网站创建好自己的仓库（【新建仓库】）。\n比如，我们已经在 gitee 创建了一个名为 nest-api 的新仓库，直接执行 git remote add origin git@gitee.com:wangyongtao/nest-api.git 即可。\n1 2 3 4 5 6 7 8 9 10 $ git commit -a \u0026#34;init\u0026#34; $ git remote add origin git@gitee.com:wangyongtao/nest-api.git $ git pull origin You asked to pull from the remote \u0026#39;origin\u0026#39;, but did not specify a branch. Because this is not the default configured remote for your current branch, you must specify a branch on the command line. $ git pull origin master From gitee.com:wangyongtao/nest-api * branch master -\u0026gt; FETCH_HEAD fatal: refusing to merge unrelated histories 出错了，提示不能合并不相干的历史记录。网上一搜，找到解决办法，增加个 --allow-unrelated-histories 参数。\n1 2 3 4 5 6 7 8 $ git pull origin master --allow-unrelated-histories From gitee.com:wangyongtao/nest-api * branch master -\u0026gt; FETCH_HEAD CONFLICT (add/add): Merge conflict in README.md Auto-merging README.md CONFLICT (add/add): Merge conflict in .gitignore Auto-merging .gitignore Automatic merge failed; fix conflicts and then commit the result. 有冲突，打开代码文件，解决冲突代码后保存文件。提交代码后推送到远程(master)。\n1 2 3 4 $ git add . $ git commit -am \u0026#34;MERGE\u0026#34; [master 5347fd5] MERGE $ git push origin master 打开网址 https://gitee.com/wangyongtao/nest-api 就可看到提交的代码了。\n小试牛刀 熟悉了项目目录结构与基本运行代码后，我们来增加一些自己的方法，感受一个这个框架。\n推荐使用 Visual Studio Code 编辑器来编辑代码。\n(1) 自定义一个返回当前版本的接口，获取当前应用的版本:\n修改控制器文件 src/app.controller.ts:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // app.controller.ts // 导入 Post import { Controller, Get } from \u0026#39;@nestjs/common\u0026#39;; import { AppService } from \u0026#39;./app.service\u0026#39;; @Controller() export class AppController { constructor(private readonly appService: AppService) {} @Get() getHello(): string { return this.appService.getHello(); } // 自定义 getVersion 方法: @Get(\u0026#39;/version\u0026#39;) getVersion(): Object { return this.appService.getVersion(); } // 自定义 postIndex 方法: @Post(\u0026#39;/api\u0026#39;) postIndex(): Object { return this.appService.getVersion(); } } 在控制器文件 src/app.controller.ts 中:\n新增了一个使用 @Get 注解的 getVersion() 方法，可以通过Get访问，路由为 “/version”。\n新增了一个使用 @Post 注解的 postIndex() 方法，可以通过Post访问, 路由为 “/api”。\n修改服务类文件 app.service.ts:\n新增一个名为 getVersion() 的方法，返回 Object 格式的json数据。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // app.service.ts import { Injectable } from \u0026#39;@nestjs/common\u0026#39;; @Injectable() export class AppService { getHello(): string { return \u0026#39;Hello World!\u0026#39;; } // 自定义：获取版本 getVersion(): Object { return { code: 200, msg: \u0026#34;OK\u0026#34;, data: { version: \u0026#34;0.0.1\u0026#34; }, } } } 代码修改好后，使用 Control + C 结束终端运行。\n这次我们使用 npm run start:dev 启动项目，这样项目里的文件有修改会自动重启服务:\n(更多的命令可以在项目 package.json 文件的 scripts 部分看到)\n1 2 3 4 5 6 7 8 9 10 $ npm run start:dev [下午4:56:14] Starting compilation in watch mode... [下午4:56:17] Found 0 errors. Watching for file changes. [Nest] 2491 - 2020/12/02 下午4:56:18 [NestFactory] Starting Nest application... [Nest] 2491 - 2020/12/02 下午4:56:18 [InstanceLoader] AppModule dependencies initialized +20ms [Nest] 2491 - 2020/12/02 下午4:56:18 [RoutesResolver] AppController {}: +7ms [Nest] 2491 - 2020/12/02 下午4:56:18 [RouterExplorer] Mapped {, GET} route +3ms [Nest] 2491 - 2020/12/02 下午4:56:18 [NestApplication] Nest application successfully started +3ms ... 启动成功了。现在我们使用 curl 命令分别来请求这几个路由地址:\n请求 “localhost:3000/version”:\n1 2 3 4 5 6 7 8 9 10 11 # 项目默认的，首页 $ curl localhost:3000 Hello World!% # 默认GET请求\u0026#39;/version\u0026#39;: 存在，返回预期的结果 $ curl localhost:3000/version {\u0026#34;code\u0026#34;:200,\u0026#34;msg\u0026#34;:\u0026#34;OK\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;version\u0026#34;:\u0026#34;0.0.1\u0026#34;}}% # 改成POST请求\u0026#39;/version\u0026#39;: 不存在，框架自带的错误提示 $ curl -X POST localhost:3000/version {\u0026#34;statusCode\u0026#34;:404,\u0026#34;message\u0026#34;:\u0026#34;Cannot POST /version\u0026#34;,\u0026#34;error\u0026#34;:\u0026#34;Not Found\u0026#34;}% 请求 “localhost:3000/api”:\n1 2 3 4 5 6 7 # 使用 POST 请求 \u0026#39;/api\u0026#39;: 存在，返回预期的结果 $ curl -X POST localhost:3000/api {\u0026#34;code\u0026#34;:200,\u0026#34;msg\u0026#34;:\u0026#34;OK\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;version\u0026#34;:\u0026#34;0.0.1\u0026#34;}}% # 改成 GET 请求 \u0026#39;/api\u0026#39;: 不存在，框架自带的错误提示 $ curl localhost:3000/api {\u0026#34;statusCode\u0026#34;:404,\u0026#34;error\u0026#34;:\u0026#34;Not Found\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;Cannot GET /api\u0026#34;}% 参考文献 References https://blog.csdn.net/cnwyt\nhttps://nodejs.org/en/download/\nhttps://docs.nestjs.com/first-steps\n更新记录 Change log 2018-12-18 新增本文档，使用 nestjs 5.7.1 版本。\n2019-06-13 修改内容，并更新 nestjs 至 6.5 版本。\n2020-12-01 完善内容，并更新 nestjs 至 7.5 版本。\n感谢阅读，如有问题请留言。\n[END]\n","description":"","id":56,"section":"posts","tags":["NestJS"],"title":"NestJS快速入门-安装与配置","uri":"http://localhost:1313/cn/posts/nestjs-quick-start/"},{"content":"消息队列 RabbitMQ 的安装与配置(Docker)\n打开 RabbitMQ 官网, 点击进入 [Docs] 菜单，我们可以看到有多个平台的不同安装文档介绍，我们只要选择和我们系统平台对应的即可。\n在本文中，我们选择使用 Docker image 来安装。\n下面我们来走一遍流程。\n环境说明 虚拟机软件使用的 VirtualBox，使用的是名为 vbox-test 的一个 Docker 虚拟机， IP是 192.168.99.100:\n查看Docker 虚拟机信息:\n// 使用“docker-machine ls”列出虚拟机 $ docker-machine ls NAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS vbox-test - virtualbox Running tcp://192.168.99.100:2376 v18.03.1-ce // 查看我的虚拟机ip: $ docker-machine ip vbox-test 192.168.99.100 登录虚拟机 通过 docker-machine ssh 命令登录到 vbox-test 虚拟机中:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ docker-machine ssh vbox-test ## . ## ## ## == ## ## ## ## ## === /\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\\___/ === ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ / ===- ~~~ \\______ o __/ \\ \\ __/ \\____\\_______/ _ _ ____ _ _ | |__ ___ ___ | |_|___ \\ __| | ___ ___| | _____ _ __ | \u0026#39;_ \\ / _ \\ / _ \\| __| __) / _` |/ _ \\ / __| |/ / _ \\ \u0026#39;__| | |_) | (_) | (_) | |_ / __/ (_| | (_) | (__| \u0026lt; __/ | |_.__/ \\___/ \\___/ \\__|_____\\__,_|\\___/ \\___|_|\\_\\___|_| Boot2Docker version 18.03.1-ce, build HEAD : cb77972 - Thu Apr 26 16:40:36 UTC 2018 Docker version 18.03.1-ce, build 9ee9f40 查看目前运行中的容器，我这里还有没运行任何容器:\ndocker@vbox-test:~$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 查看镜像列表, 我之前已经拉取过了，已经有 rabbitmq 镜像了:\ndocker@vbox-test:~$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE base/archlinux latest 6f30e92a4162 3 days ago 541MB redis alpine d3117424aaee 4 days ago 27.1MB rabbitmq 3-management a15563f1e21c 9 days ago 151MB rabbitmq 3 72cee1616e73 9 days ago 127MB 使用 docker pull rabbitmq 命令来拉取或更新 rabbitmq 镜像:\ndocker@vbox-test:~$ docker pull rabbitmq\nUsing default tag: latest\nlatest: Pulling from library/rabbitmq\nDigest: sha256:2cd00c31d2e443ab170dac2b3b37ef85fc09effb0c2528f8e81a806ccc3d9455\nStatus: Image is up to date for rabbitmq:latest\n使用 docker run 命令运行 rabbitmq 镜像:\n使用 -d 参数来指定后台运行rabbitmq, 并打印出容器的ID (container ID)\n使用 \u0026ndash;hostname 参数来指定 主机名为： my-rabbit\n使用 \u0026ndash;name 参数来指定 容器名为：some-rabbit\ndocker@vbox-test:~$ docker run -d \u0026ndash;hostname my-rabbit \u0026ndash;name some-rabbit rabbitmq\n9f555cba9297c165e1376cfeec5396236376bfeb7858f108d8119c81e5061fac\ndocker@vbox-test:~$ docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n9f555cba9297 rabbitmq \u0026ldquo;docker-entrypoint.s…\u0026rdquo; 18 seconds ago Up 18 seconds 4369/tcp, 5671-5672/tcp, 25672/tcp some-rabbit\n查看启动日志 docker logs some-rabbit\n$ docker logs some-rabbit\n2018-02-09 08:55:33.500 [info] \u0026lt;0.33.0\u0026gt; Application lager started on node \u0026lsquo;rabbit@my-rabbit\u0026rsquo;\n\u0026hellip; \u0026hellip;\n2018-02-09 08:55:34.265 [info] \u0026lt;0.183.0\u0026gt;\nStarting RabbitMQ 3.7.3 on Erlang 20.1.7\nCopyright (C) 2007-2018 Pivotal Software, Inc.\nLicensed under the MPL. See http://www.rabbitmq.com/\n## RabbitMQ 3.7.3. Copyright (C) 2007-2018 Pivotal Software, Inc. ########## Licensed under the MPL. See http://www.rabbitmq.com/\n########## Logs: Starting broker\u0026hellip;\n2018-02-09 08:55:34.306 [info] \u0026lt;0.183.0\u0026gt;\nnode : rabbit@my-rabbit\nhome dir : /var/lib/rabbitmq\nconfig file(s) : /etc/rabbitmq/rabbitmq.conf\ncookie hash : YZ+Mu7/Mufu5lw/I9DXYBw==\nlog(s) : database dir : /var/lib/rabbitmq/mnesia/rabbit@my-rabbit\n\u0026hellip; \u0026hellip;\n可以看到节点(node)的名称: rabbit@my-rabbit, 配置文件路径: /etc/rabbitmq/rabbitmq.conf 等信息。\n停止容器运行，删除容器:\ndocker@vbox-test:~$ docker stop some-rabbit\nsome-rabbit\ndocker@vbox-test:~$ docker rm some-rabbit\nsome-rabbit\n拉取 rabbitmq:3-management 镜像，这个镜像带管理后台:\ndocker@vbox-test:~$ docker pull rabbitmq:3-management\n3-management: Pulling from library/rabbitmq\nDigest: sha256:ce1f6f597861a0e11942ad30415b192379a69b491a5899eead98abcf88430e31\nStatus: Image is up to date for rabbitmq:3-management\n使用docker run命令运行 rabbitmq:3-management 镜像:\n使用 -p 参考来映射当前端口号和docker容器的端口号, 我们启动的名为 some-rabbit 容器的管理后台默认登录端口是 15672， 我们给映射成 8080， 这样就可以通过 8080 来访问了。\n// 运行容器\ndocker@vbox-test:~$ docker run -d \u0026ndash;hostname my-rabbit \u0026ndash;name some-rabbit -p 8080:15672 rabbitmq:3-management\nadd2359445d8c38053ca9635ac75fb08f18e229c487ac30356d99802ebcff699\n// 查看运行的容器\ndocker@vbox-test:~$ docker ps\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\nadd2359445d8 rabbitmq:3-management \u0026ldquo;docker-entrypoint.s…\u0026rdquo; About an hour ago Up About an hour 4369/tcp, 5671-5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:8080-\u0026gt;15672/tcp some-rabbit\n打开浏览器，输入地址: http://localhost:8080 或者 http://host-ip:8080\n由于我是在虚拟机(vbox-test)中安装的，虚拟机ip是 192.168.99.100, 打开地址: http://192.168.99.100:8080/ 输入账号密码: guest / guest， 即可登录管理后台了。\n使用 docker exec 命令，登录到 some-rabbit 容器中:\ndocker@vbox-test:~$ docker exec -it some-rabbit /bin/bash\nroot@my-rabbit:/# ls\nbin docker-entrypoint.sh lib mnt proc sbin tmp\nboot etc lib64 opt root srv usr\ndev home media plugins run sys var\n使用 rabbitmqctl 命令，对队列进行管理：\n列出所有的用户: /usr/lib/rabbitmq/bin/rabbitmqctl -n rabbit@my-rabbit list_users\nrabbitmqctl 使用管理 RabbitMQ 的命令行工具, 默认路径为: /usr/lib/rabbitmq/bin/rabbitmqctl\nmy-rabbit 使我们启动容器指定的 hostname\nlist_users 是列出所有用户的命令，详见rabbitmqctl\n// 已经进入到容器里了，列出所有的用户\nroot@my-rabbit:/#\nroot@my-rabbit:~# /usr/lib/rabbitmq/bin/rabbitmqctl -n rabbit@my-rabbit list_users\nListing users \u0026hellip;\nguest [administrator]\n// 添加新用户\nroot@my-rabbit:~# /usr/lib/rabbitmq/bin/rabbitmqctl -n rabbit@my-rabbit add_user mq-admin mq-admin123456\nAdding user \u0026ldquo;mq-admin\u0026rdquo; \u0026hellip;\n// 列出所有的用户\nroot@my-rabbit:~# /usr/lib/rabbitmq/bin/rabbitmqctl -n rabbit@my-rabbit list_users\nListing users \u0026hellip;\nmq-admin []\nguest [administrator]\n查看队列的状态信息:\nroot@my-rabbit:/# /usr/lib/rabbitmq/bin/rabbitmqctl status\nStatus of node rabbit@my-rabbit \u0026hellip;\n[{pid,315},\n{running_applications,\n[{rabbitmq_management,\u0026ldquo;RabbitMQ Management Console\u0026rdquo;,\u0026ldquo;3.7.3\u0026rdquo;},\n{rabbitmq_management_agent,\u0026ldquo;RabbitMQ Management Agent\u0026rdquo;,\u0026ldquo;3.7.3\u0026rdquo;},\n{rabbitmq_web_dispatch,\u0026ldquo;RabbitMQ Web Dispatcher\u0026rdquo;,\u0026ldquo;3.7.3\u0026rdquo;},\n{amqp_client,\u0026ldquo;RabbitMQ AMQP Client\u0026rdquo;,\u0026ldquo;3.7.3\u0026rdquo;},\n{rabbit,\u0026ldquo;RabbitMQ\u0026rdquo;,\u0026ldquo;3.7.3\u0026rdquo;},\n{mnesia,\u0026ldquo;MNESIA CXC 138 12\u0026rdquo;,\u0026ldquo;4.15.1\u0026rdquo;},\n{rabbit_common,\u0026ldquo;Modules shared by rabbitmq-server and rabbitmq-erlang-client\u0026rdquo;,\u0026ldquo;3.7.3\u0026rdquo;},\n{cowboy,\u0026ldquo;Small, fast, modern HTTP server.\u0026rdquo;,\u0026ldquo;2.0.0\u0026rdquo;},\n{ranch_proxy_protocol,\u0026ldquo;Ranch Proxy Protocol Transport\u0026rdquo;,\u0026ldquo;1.4.4\u0026rdquo;},\n{ranch,\u0026ldquo;Socket acceptor pool for TCP protocols.\u0026rdquo;,\u0026ldquo;1.4.0\u0026rdquo;},\n{ssl,\u0026ldquo;Erlang/OTP SSL application\u0026rdquo;,\u0026ldquo;8.2.2\u0026rdquo;},\n{public_key,\u0026ldquo;Public key infrastructure\u0026rdquo;,\u0026ldquo;1.5.1\u0026rdquo;},\n{asn1,\u0026ldquo;The Erlang ASN1 compiler version 5.0.3\u0026rdquo;,\u0026ldquo;5.0.3\u0026rdquo;},\n{xmerl,\u0026ldquo;XML parser\u0026rdquo;,\u0026ldquo;1.3.15\u0026rdquo;},\n{jsx,\u0026ldquo;a streaming, evented json parsing toolkit\u0026rdquo;,\u0026ldquo;2.8.2\u0026rdquo;},\n{cowlib,\u0026ldquo;Support library for manipulating Web protocols.\u0026rdquo;,\u0026ldquo;2.0.0\u0026rdquo;},\n{crypto,\u0026ldquo;CRYPTO\u0026rdquo;,\u0026ldquo;4.1\u0026rdquo;},\n{os_mon,\u0026ldquo;CPO CXC 138 46\u0026rdquo;,\u0026ldquo;2.4.3\u0026rdquo;},\n{recon,\u0026ldquo;Diagnostic tools for production use\u0026rdquo;,\u0026ldquo;2.3.2\u0026rdquo;},\n{inets,\u0026ldquo;INETS CXC 138 49\u0026rdquo;,\u0026ldquo;6.4.4\u0026rdquo;},\n{lager,\u0026ldquo;Erlang logging framework\u0026rdquo;,\u0026ldquo;3.5.1\u0026rdquo;},\n{goldrush,\u0026ldquo;Erlang event stream processor\u0026rdquo;,\u0026ldquo;0.1.9\u0026rdquo;},\n{compiler,\u0026ldquo;ERTS CXC 138 10\u0026rdquo;,\u0026ldquo;7.1.3\u0026rdquo;},\n{syntax_tools,\u0026ldquo;Syntax tools\u0026rdquo;,\u0026ldquo;2.1.3\u0026rdquo;},\n{sasl,\u0026ldquo;SASL CXC 138 11\u0026rdquo;,\u0026ldquo;3.1\u0026rdquo;},\n{stdlib,\u0026ldquo;ERTS CXC 138 10\u0026rdquo;,\u0026ldquo;3.4.2\u0026rdquo;},\n{kernel,\u0026ldquo;ERTS CXC 138 10\u0026rdquo;,\u0026ldquo;5.4\u0026rdquo;}]},\n{os,{unix,linux}},\n{erlang_version,\u0026ldquo;Erlang/OTP 20 [erts-9.1.5] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:64] [hipe] [kernel-poll:true]\\n\u0026rdquo;},\n{memory,\n[{connection_readers,0},\n{connection_writers,0},\n{connection_channels,0},\n{connection_other,24536},\n{queue_procs,0},\n{queue_slave_procs,0},\n{plugins,1121680},\n{other_proc,22007712},\n{metrics,194848},\n{mgmt_db,194440},\n{mnesia,73648},\n{other_ets,2168952},\n{binary,114224},\n{msg_index,28912},\n{code,28209092},\n{atom,1123529},\n{other_system,21360675},\n{allocated_unused,21689944},\n{reserved_unallocated,57344},\n{strategy,rss},\n{total,[{erlang,76622248},{rss,98369536},{allocated,98312192}]}]},\n{alarms,[]},\n{listeners,[{clustering,25672,\u0026quot;::\u0026quot;},{amqp,5672,\u0026quot;::\u0026quot;},{http,15672,\u0026quot;::\u0026quot;}]},\n{vm_memory_calculation_strategy,rss},\n{vm_memory_high_watermark,0.4},\n{vm_memory_limit,417692057},\n{disk_free_limit,50000000},\n{disk_free,14999191552},\n{file_descriptors,\n[{total_limit,1048476},\n{total_used,2},\n{sockets_limit,943626},\n{sockets_used,0}]},\n{processes,[{limit,1048576},{used,367}]},\n{run_queue,0},\n{uptime,3364},\n{kernel,{net_ticktime,60}}]\n可以看到： {listeners,[{clustering,25672,\u0026quot;::\u0026quot;},{amqp,5672,\u0026quot;::\u0026quot;},{http,15672,\u0026quot;::\u0026quot;}]}\n默认rabbitmq监听了三个端口号:\nclustering: 25672\namqp: 5672\nhttp: 15672\n参考内容 http://www.rabbitmq.com/download.html\nhttps://hub.docker.com/r/_/rabbitmq/\n更新记录 2018-02-08 新增本文内容\n2018-02-10 修改完善本文内容及格式\n[END]\n","description":"","id":58,"section":"posts","tags":["Golang"],"title":"消息队列 RabbitMQ 的安装与配置(Docker)","uri":"http://localhost:1313/cn/posts/rabbitmq-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-rabbitmq-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEdocker/"},{"content":"Laravel-缓存标签(Cache::tags)的使用\nLaravel 缓存系统支持多种驱动方式，包括 file, database, Redis, Memcached 等， 也可以自定义一些其他的驱动方式。\n在使用 Redis 驱动时，Laravel 提供了一种 缓存标签 (Cache Tags), 可以很方便的对缓存进行管理分组。\n注意:\n缓存标签目前不支持 file 或 database 缓存驱动。\n当使用多标签的缓存被设置为永久存储(forever)时，使用 memcached 驱动的缓存有着最佳性能表现，因为 Memcached 会自动清除陈旧记录。存储被打上标签的缓存项 (put)缓存标签允许你给相关缓存项打上同一个标签以便于后续清除这些缓存值，被打上标签的缓存可以通过传递一个被排序的标签数组来访问。\n例如，我们可以通过以下方式在添加缓存的时候设置标签：\n1 2 Cache::tags([\u0026#39;people\u0026#39;, \u0026#39;artists\u0026#39;])-\u0026gt;put(\u0026#39;John\u0026#39;, $john, $minutes); Cache::tags([\u0026#39;people\u0026#39;, \u0026#39;authors\u0026#39;])-\u0026gt;put(\u0026#39;Anne\u0026#39;, $anne, $minutes); 你可以给多个缓存项打上相同标签，这是没有数目限制的。\n访问被打上标签的缓存项 (get)\n要获取被打上标签的缓存项，传递同样的有序标签数组到 tags 方法然后使用你想要获取的key来调用get方法：\n1 2 $john = Cache::tags([\u0026#39;people\u0026#39;, \u0026#39;artists\u0026#39;])-\u0026gt;get(\u0026#39;John\u0026#39;); $anne = Cache::tags([\u0026#39;people\u0026#39;, \u0026#39;authors\u0026#39;])-\u0026gt;get(\u0026#39;Anne\u0026#39;); 移除被打上标签的数据项 (flush)\n你可以同时清除被打上同一标签/标签列表的所有缓存项。\n例如，以下语句会移除被打上 people 或 authors 标签的所有缓存：\n1 Cache::tags([\u0026#39;people\u0026#39;, \u0026#39;authors\u0026#39;])-\u0026gt;flush(); 这样，上面设置的 Anne 和 John 缓存项都会从缓存中移除。\n相反，以下语句只移除被打上 authors 标签的语句，所以只有 Anne 会被移除, 而 John 不会被移除：\n1 Cache::tags(\u0026#39;authors\u0026#39;)-\u0026gt;flush(); Reference https://laravel.com/docs/5.4/cache#cache-tags\nhttp://laravelacademy.org/post/6858.html\n[END]\n","description":"","id":60,"section":"posts","tags":["Golang"],"title":"Laravel-缓存标签(Cache::tags)的使用","uri":"http://localhost:1313/cn/posts/php/laravel-%E7%BC%93%E5%AD%98%E6%A0%87%E7%AD%BEcache-tags%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"content":"Nginx-使用Expires缓存静态文件\nThe ngx_http_headers_module module allows adding the “Expires” and “Cache-Control” header fields, and arbitrary fields, to a response header.\n1 2 3 4 Syntax: expires [modified] time; expires epoch | max | off; Default: expires off; Context: http, server, location, if in location 缓存静态文件\n可以用以下的时间单位：\nms: 毫秒\ns: 秒\nm: 分钟\nh: 小时\nd: 天\nw: 星期\nM: 月 (30 天)\ny: 年 (365 天)\nExample Configuration\n1 2 3 4 5 6 7 8 expires 24h; expires modified +24h; expires @24h; expires 0; expires -1; expires epoch; expires $expires; add_header Cache-Control private; The max parameter sets “Expires” to the value “Thu, 31 Dec 2037 23:55:55 GMT”, and “Cache-Control” to 10 years.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 location ~* \\.(?:manifest|appcache|html?|xml|json)$ { expires -1; } # Feed location ~* \\.(?:rss|atom)$ { expires 1h; } # Media: images, icons, video, audio, swf, flv location ~* \\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp3|mp4|mmf|ogg|ogv|webm|wma|wmv|asf|swf|flv)$ { expires 1M; access_log off; add_header Cache-Control \u0026#34;public\u0026#34;; } # CSS and Javascript location ~* \\.(?:css|js)$ { expires 1y; access_log off; } # WebFonts location ~* \\.(?:ttf|ttc|otf|eot|woff|woff2)$ { expires 1M; access_log off; } 修改实例\n使用360奇云给网站打分，看到如下提示:\n指标描述: CSS、JS、图片资源都应该明确的指定一个缓存时间，避免了接下来的页面访问中不必要的HTTP请求。 评分规则: 如果有静态文件没有设置缓存，将会得到警告。 查看请求 favicon.ico 文件的响应头：\n使用 curl -I 命令只查看请求的响应头:\n1 2 3 4 5 6 7 8 9 10 $ curl -I http://wang123.net/favicon.ico HTTP/1.1 200 OK Server: nginx/1.10.2 Date: Thu, 13 Apr 2017 02:31:38 GMT Content-Type: image/x-icon Content-Length: 4286 Last-Modified: Mon, 20 Mar 2017 15:01:10 GMT Connection: keep-alive ETag: \u0026#34;58cfeeb6-10be\u0026#34; Accept-Ranges: bytes 修改Nginx配置文件，然后重启服务:\n在Nginx配置文件中增加以下配置，设置静态文件的缓存时间:\n1 2 3 4 5 6 7 8 // 编辑服务器配置文件 $ vi /usr/local/webserver/nginx/conf/wang123_net.conf # CSS, Javascript, images, icons, video, audio, location ~* \\.(?:css|js|jpg|jpeg|gif|png|ico|svg|svgz|mp3|mp4|ogg|ogv|webm|wma|wmv|swf|flv)$ { expires 1M; access_log off; add_header Cache-Control \u0026#34;public\u0026#34;; } 重启服务:\n1 2 3 4 $ sudo /usr/local/webserver/nginx/nginx -t nginx: the configuration file /usr/local/webserver/nginx/nginx.conf syntax is ok nginx: configuration file /usr/local/webserver/nginx/nginx.conf test is successful $ sudo /usr/local/webserver/nginx/nginx -s reload 重新查看请求favicon.ico文件的响应头:\n1 2 3 4 5 6 7 8 9 10 11 12 13 $ curl -I http://wang123.net/favicon.ico HTTP/1.1 200 OK Server: nginx/1.10.2 Date: Thu, 13 Apr 2017 02:29:58 GMT Content-Type: image/x-icon Content-Length: 4286 Last-Modified: Mon, 20 Mar 2017 15:01:10 GMT Connection: keep-alive ETag: \u0026#34;58cfeeb6-10be\u0026#34; Expires: Sat, 13 May 2017 02:29:58 GMT Cache-Control: max-age=2592000 Cache-Control: public Accept-Ranges: bytes 可以看到，返回结果中已经存在了 Expires、Cache-Control，说明我们配置成功。\n重新使用360奇云测给网站打分， 可以看到就不会再有这个警告了。\nReference http://nginx.org/en/docs/http/ngx_http_headers_module.html\nhttps://github.com/h5bp/server-configs-nginx\nhttp://www.cnblogs.com/lpfuture/p/5798811.html\n[END]\n","description":"","id":61,"section":"posts","tags":["Nginx","Linux"],"title":"Nginx-使用Expires缓存静态文件","uri":"http://localhost:1313/cn/posts/linux/nginx-%E4%BD%BF%E7%94%A8expires%E7%BC%93%E5%AD%98%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"},{"content":"Laravel-使用macro方法来扩展基础类的功能\n在一般编程中，我们要扩展一个基础类，我们需要进行继承才能扩充。\n然而Laravel利用PHP的特性，编写了一套叫做 Macroable 的 Traits，这样，凡是使用Macroable的类，都是可以使用这个方法扩充的。\n基本使用方法\n我下面用Collection类来做示范。\n要给Collection加一个扩充方法可以这样写：\n1 2 3 4 \u0026lt;?php Collection::macro(\u0026#34;macro_name\u0026#34;, function ($parameters) { // Your macro }); 这样就很容易的就扩充了Collection的方法，而不需要进行复杂的继承。\n我们再举个具体的例子，把所有Collection的字符数组全部变成大写。那么我们就这样写：\n1 2 3 4 5 6 7 \u0026lt;?php Collection::macro(\u0026#39;uppercase\u0026#39;, function () { return collect($this-\u0026gt;items)-\u0026gt;map(function ($item) { return strtoupper($item); }); }); collect([“hello”, “world”])-\u0026gt;uppercase(); 这个结果是: [“HELLO”, “WORLD”]\n关于 macro 内部的 $this\nCollection $this 在macro的作用域必须注意，$this不是指向你文件类的对象，而是指向你marco扩充的类。比如例子中的$this是指向Collection的。\n这是因为在Marcoable的源代码中，是可以看到static::$macros[$method]-\u0026gt;bindTo($this, static::class)这段代码。而bindTo是改变$this上下文指向的方法。\nmarco的代码应该放在哪里?#\nmarco的代码应该放在哪里才能让整个项目都能使用， 这个问题其实困扰了我很久， 所以一直没有写这个教程。不过现在研究明白了。\n要让marco扩充的类，保证整个项目都能使用， 需要创建一个ServiceProvider，并把扩充的方法，放入boot()的方法中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?php namespace App\\Providers; use Collection; use Illuminate\\Support\\ServiceProvider; class CollectionMacroServiceProvider extends ServiceProvider { public function boot() { Collection::macro(\u0026#39;uppercase\u0026#39;, function () { return collect($this-\u0026gt;items)-\u0026gt;map(function ($item) { return strtoupper($item); }); }); } } 然后我们就可以在config/app.php中的providers中下面加App\\ProvidersCollectionMacroServiceProvider::class即可\n哪些类可以使用 marco ?\nResponse\nRequest\nCollection\nHTML\nForm\nFilesystem\nCache\nStr\nArr\nTranslator\n等等,使用了 Marcoable 的 Traits ，如果是自己编写的类，使用了Marcoable，也可以这样扩充使用（写Laravel开源库的时候）\n参考内容： https://github.com/laravel/framework/blob/7d116dc5a008e69c97f864af79ac46ab6a8d5895/src/Illuminate/Support/Traits/Macroable.php\nhttps://github.com/laravel/framework/search?utf8=%E2%9C%93\u0026q=macroable\nhttp://laravel-recipes.com/recipes/181/creating-html-macros\nhttps://laravelcollective.com/docs/5.3/html#custom-macros\nhttps://laravel.com/docs/5.3/responses#response-macros\n","description":"A brief description of Hugo Shortcodes","id":62,"section":"posts","tags":["shortcodes","privacy"],"title":"Laravel-使用macro方法来扩展基础类的功能","uri":"http://localhost:1313/cn/posts/php/laravel-%E4%BD%BF%E7%94%A8macro%E6%96%B9%E6%B3%95%E6%9D%A5%E6%89%A9%E5%B1%95%E5%9F%BA%E7%A1%80%E7%B1%BB%E7%9A%84%E5%8A%9F%E8%83%BD/"},{"content":"Laravel-Lumen-使用网易邮箱SMTP发送邮件\nLaravel 是目前最流行的PHP框架，而 Lumen 是 Laravel 的精简版，主要用于后端接口开发。\n在 Laravel 框架汇总，邮件发送服务是基于 Symfony 组件 Swift Mailer 的。\n本文记录了在 Lumen / Laravel 环境中，使用网易邮箱 SMTP 发送邮件的主要步骤，希望对大家有一些参考价值。\n获取网易邮箱的服务器和授权码: 登录网易邮箱: http://mail.163.com/\n获取服务器地址：点击【设置】 \u0026gt; 【POP3/SMTP/IMAP】选项\n可以查看到，服务器地址:\nPOP3 服务器: pop.163.com SMTP 服务器: smtp.163.com IMAP 服务器: imap.163.com POP3 是Post Office Protocol 3的简称，即邮局协议的第3个版本，用来接收电子邮件的。POP3协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作（如移动邮件、标记已读等），不会反馈到服务器上。\nSMTP 的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议。\nIMAP 全称是Internet Mail Access Protocol，即交互式邮件存取协议，它是跟POP3类似邮件访问标准协议之一。IMAP提供webmail 与电子邮件客户端之间的双向通信，客户端的操作都会反馈到服务器上，对邮件进行的操作，服务器上的邮件也会做相应的动作。\n获取客户端授权密码： 开启 IMAP 服务：\n（1）点击【设置】，选择【POP3/SMTP/IMAP】；\n（2）在【开启服务】里，选择开启【IMAP/SMTP服务】；\n（3）会让手机发送短信验证，开启后记录下【客户端授权密码】，稍后在发邮件的时候要用到这个密码。\n在【授权密码管理】部分，也可以增加密码。\n授权密码管理:\n授权码是用于登录第三方邮件客户端的专用密码。\n适用于登录以下服务: POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务。\n0000000000000000000000\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;\n333333333333333333333333333333\n3333333333333333333333333333333333333333333333333333222222222222222222222222222222222222222222222222222222222222222222222222222222\n添加发邮件模块 Laravel 框架已经包含了邮件模块，不需要安装。\n由于 Lumen 是简化版的 Laravel, 需要添加 illuminate/mail 模块:\n执行 “composer require” 命令， 安装 illuminate/mail模块。\n1 $ composer require illuminate/mail 或者，修改 composer.json 文件中 require 部分，再执行 composer up 安装，文件 composer.json 的 require 部分配置如下:\n1 2 3 4 5 6 7 \u0026#34;require\u0026#34;: { \u0026#34;php\u0026#34;: \u0026#34;^7.3|^8.0\u0026#34;, \u0026#34;cnwyt/user-agent-parser\u0026#34;: \u0026#34;dev-master\u0026#34;, \u0026#34;guzzlehttp/guzzle\u0026#34;: \u0026#34;^7.3\u0026#34;, \u0026#34;illuminate/mail\u0026#34;: \u0026#34;^8.47\u0026#34;, \u0026#34;laravel/lumen-framework\u0026#34;: \u0026#34;^8.0\u0026#34;, } 配置文件修改: （1）修改配置文件 .env:\nLaravel/Lumen 的系统配置一般都配置项目根目录的 “.env” 文件中，然后再代码中通过 env() 方法获取。\n打开配置文件“.env”文件，新增以下配置:\n1 2 3 4 5 6 7 8 MAIL_MAILER=smtp MAIL_HOST=smtp.163.com MAIL_PORT=25 MAIL_USERNAME=cnwytnet@163.com MAIL_PASSWORD=MAIL_PASSWORD_BXVQLZ MAIL_ENCRYPTION=null MAIL_FROM_ADDRESS=cnwytnet@163.com MAIL_FROM_NAME=\u0026#34;${APP_NAME}\u0026#34; 注意，MAIL_PASSWORD 的配置就是上边获取的【客户端授权密码】。\n（2）需要增加 mail.php 配置文件：\n确保 Laravel 或 Luemn 项目中存在 app/config/mail.php 配置文件。\nLaravel 框架已经包含了此配置文件，不需新增。Lumen 项目可能不存在，需要从 Laravel 代码中复制一份， 或者直接添加以下配置代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;?php return [ // 默认使用的邮件服务类型 \u0026#39;default\u0026#39; =\u0026gt; env(\u0026#39;MAIL_MAILER\u0026#39;, \u0026#39;smtp\u0026#39;), // 邮件服务配置 \u0026#39;mailers\u0026#39; =\u0026gt; [ \u0026#39;smtp\u0026#39; =\u0026gt; [ \u0026#39;transport\u0026#39; =\u0026gt; \u0026#39;smtp\u0026#39;, \u0026#39;host\u0026#39; =\u0026gt; env(\u0026#39;MAIL_HOST\u0026#39;, \u0026#39;smtp.mailgun.org\u0026#39;), \u0026#39;port\u0026#39; =\u0026gt; env(\u0026#39;MAIL_PORT\u0026#39;, 587), \u0026#39;encryption\u0026#39; =\u0026gt; env(\u0026#39;MAIL_ENCRYPTION\u0026#39;, \u0026#39;tls\u0026#39;), \u0026#39;username\u0026#39; =\u0026gt; env(\u0026#39;MAIL_USERNAME\u0026#39;), \u0026#39;password\u0026#39; =\u0026gt; env(\u0026#39;MAIL_PASSWORD\u0026#39;), \u0026#39;timeout\u0026#39; =\u0026gt; null, \u0026#39;auth_mode\u0026#39; =\u0026gt; null ], \u0026#39;ses\u0026#39; =\u0026gt; [ \u0026#39;transport\u0026#39; =\u0026gt; \u0026#39;ses\u0026#39; ], \u0026#39;mailgun\u0026#39; =\u0026gt; [ \u0026#39;transport\u0026#39; =\u0026gt; \u0026#39;mailgun\u0026#39; ], \u0026#39;postmark\u0026#39; =\u0026gt; [ \u0026#39;transport\u0026#39; =\u0026gt; \u0026#39;postmark\u0026#39; ], \u0026#39;sendmail\u0026#39; =\u0026gt; [ \u0026#39;transport\u0026#39; =\u0026gt; \u0026#39;sendmail\u0026#39;, \u0026#39;path\u0026#39; =\u0026gt; \u0026#39;/usr/sbin/sendmail -bs\u0026#39; ], \u0026#39;log\u0026#39; =\u0026gt; [ \u0026#39;transport\u0026#39; =\u0026gt; \u0026#39;log\u0026#39;, \u0026#39;channel\u0026#39; =\u0026gt; env(\u0026#39;MAIL_LOG_CHANNEL\u0026#39;) ], \u0026#39;array\u0026#39; =\u0026gt; [ \u0026#39;transport\u0026#39; =\u0026gt; \u0026#39;array\u0026#39; ] ], // Markdown Mail Settings \u0026#39;markdown\u0026#39; =\u0026gt; [ \u0026#39;theme\u0026#39; =\u0026gt; \u0026#39;default\u0026#39;, \u0026#39;paths\u0026#39; =\u0026gt; [ resource_path(\u0026#39;views/vendor/mail\u0026#39;) ] ] ]; 注意，该配置文件的结构在 Laravel 5+ 与 Laravel 8+ 中略有不同。\n创建发邮件脚本 在 Laravel 框架中，可以使用 php artisan 命令创建脚本文件:\n1 2 $ php artisan make:command SendEmailCommand Console command created successfully. 该命令会在自动创建一个类名为 “SendEmailCommand” 的脚本文件。\n其路径是: app/Console/Command/SendMailCommand.php\n该脚本的具体初始内容如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?php namespace App\\Console\\Commands; use Illuminate\\Console\\Command; class SendEmailCommand extends Command { // 脚本的命令名称 protected $signature = \u0026#39;command:name\u0026#39;; // 脚本的描述 protected $description = \u0026#39;Command description\u0026#39;; // 构造方法 public function __construct() { parent::__construct(); } // 具体的脚本内容写在这里 public function handle() { return 0; } } 在 Lumen 框架中，可以手动创建该脚本文件，用来发送邮件。\n打开文件，引入 Mail 门面 (facade)， 使用 Mail::raw() 方法发送邮件:\n其代码内容如下:\n// 发送 纯文本邮件 Mail::raw($content, function ($message) use ($toMail, $subject) { $message-\u0026gt;subject($subject); $message-\u0026gt;to($toMail); }); 注册脚本 使用低版本Laravel 或者 Lumen 框架时，需要手动将脚本文件加入到 app/Console/Kernel.php 中，才可以执行命令:\n1 2 3 protected $commands = [ Commands\\SendMailCommand::class, //测试发邮件脚本 ]; 在 Laravel 5.5以上版本中，已默认注册了所有 Commands 目录下的脚步文件了，不需要再手动添加在 Kernel.php 中了:\n/** * Register the commands. * * @return void */ protected function commands() { // 加载所有 Commands 下脚本 $this-\u0026gt;load(__DIR__.\u0026#39;/Commands\u0026#39;); require base_path(\u0026#39;routes/console.php\u0026#39;); } 执行发邮件操作 使用 php artisan 命令可以查看目前可用的脚本列表, 可以看到我们新加的脚本命令 “test:send-mail”:\n$ php artisan test test:send-mail SendMail:测试邮件发送 执行发送邮件脚本:\n$ php artisan test:send-mail 不出意外的话，邮件发送成功。\n查看发件人的发件箱，或者查看收件人的收件箱，确认一下吧。\n使用模板邮件 上边我们发送的是纯文本的邮件，但是我们常用的都是带有模板的邮件。\n在 app/resources/views 目录下， 创建一个 emails 目录，创建一个 test.blade.php 邮件模板文件:\n使用 Mail::send() 方法发送:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // 邮件模板文件 $view = \u0026#39;emails.test\u0026#39;; // 模板展示数据 // $data = [\u0026#39;content\u0026#39; =\u0026gt; $content,]; $data = [ \u0026#39;content\u0026#39; =\u0026gt; $content, \u0026#39;logo\u0026#39; =\u0026gt; \u0026#39;https://gitee.com/phpspace/php-demo/raw/master/Laravel-Demo/public/images/qrcode_344.jpg\u0026#39;, ]; // 添加附件 $attach = \u0026#34;/Users/wangtest/code/php-demo/laravel-demo/public/robots.txt\u0026#34;; return Mail::send($view, $data, function ($message) use ($toMail, $subject, $attach) { $message-\u0026gt;subject($subject); $message-\u0026gt;to($toMail); $message-\u0026gt;attach($attach); }); 常见的报错与解决办法 这里收集了一些常见的错误，可能不同的 Laravel 版本，提示信息略有不同。\n报错1: 没有正常设置配置文件，报530错误 (Lavavel5.5):\n1 2 In AbstractSmtpTransport.php line 419: Expected response code 250 but got code \u0026#34;530\u0026#34;, with message \u0026#34;530 5.7.1 Authentication required\u0026#34; 未正确配置 .env 配置文件。 比如 MAIL_HOST，在.env中配置默认的邮件服务配置是:MAIL_HOST=mailhog，需要修改。\n1 2 3 4 5 6 # 执行发送邮件脚本 $ php artisan test:send-mail Swift_TransportException Connection could not be established with host mailhog : stream_socket_client(): php_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known 报错2: 授权码认证失败:\n授权码错误 (Lavavel5.5):\n1 2 In AuthHandler.php line 181: Failed to authenticate on SMTP server with username \u0026#34;cnwytnet@163.com\u0026#34; using 2 possible authenticators 不填授权码 MAIL_PASSWORD 或者 MAIL_PASSWORD 错误 (Lavavel5.4):\n1 2 [Swift_TransportException] Failed to authenticate on SMTP server with username “cnwytnet@163.com” using 2 possible authenticators 注意 MAIL_PASSWORD 不是邮箱的密码，而是授权码。\n报错3: 邮件地址 MAIL_FROM_ADDRESS 必须和 MAIL_USERNAME 不一致:\n1 2 3 4 5 6 # 执行发送邮件脚本 $ php artisan test:send-mail Swift_TransportException Failed to authenticate on SMTP server with username \u0026#34;cnwytnet@163.com\u0026#34; using 2 possible authenticators. Authenticator LOGIN returned Expected response code 235 but got code \u0026#34;535\u0026#34;, with message \u0026#34;535 Error: authentication failed\u0026#34;. 调试邮件: 可以在配置文件中，将邮件驱动改成 MAIL_DRIVER=log, 就可以在本地日志中看到邮件内容了，这在测试的时候会很有用。\n打开配置文件 .env，修改邮件驱动为 MAIL_DRIVER=log， 执行邮件发送脚本，将会把邮件发送内容保存到 storage/logs/laravel.log 中。\n比如，发送纯文本邮件时，实例内容如下:\n[2018-06-13 02:52:17] local.DEBUG: Message-ID: \u0026lt;c75569f9a301cbb32b6ef7b0b6c78d09@swift.generated\u0026gt; Date: Wed, 13 Jun 2018 02:52:17 +0000 Subject: =?utf-8?Q?=5BTEST=5D=E6=B5=8B=E8=AF=95?= =?utf-8?Q?=E9=82=AE=E4=BB=B6=E6=A0=87=E9=A2=98?= SendMail - 2018-06-13 02:52:17 From: cnwytnet \u0026lt;cnwytnet@163.com\u0026gt; To: wangtom365@qq.com MIME-Version: 1.0 Content-Type: text/plain; charset=utf-8 Content-Transfer-Encoding: quoted-printable Hi, 这是一封来自Laravel的测试邮件. 具体代码可以在码云查看: https://gitee.com/phpspace/php-demo\n拓展内容 Swift Mailer\nSwift Mailer， 是由 symfony 开发的一个邮件发送类库。其网址是: swiftmailer.symfony.com。\n参考链接 https://laravel.com/docs/5.4/mail\nhttps://laravel.com/docs/8.x/mail\nhttp://laravelacademy.org/post/1986.html\nhttp://help.163.com/10/0312/13/61J0LI3200752CLQ.html\nhttp://help.163.com/09/1223/14/5R7P6CJ600753VB8.html\n更新记录 2017-04-01 基于 Lumen 5.4 新增文章\n2017-06-13 基于 Laravel 5.5/5.6 完善内容\n2021-06-17 基于 Laravel 8+ 完善内容\n","description":"","id":63,"section":"posts","tags":["PHP","CSV"],"title":"Laravel-Lumen-使用网易邮箱SMTP发送邮件","uri":"http://localhost:1313/cn/posts/php/laravel-lumen-%E4%BD%BF%E7%94%A8%E7%BD%91%E6%98%93%E9%82%AE%E7%AE%B1smtp%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"},{"content":"安装或升级 composer : Composer 是 PHP 用来管理依赖（dependency）关系的工具。\n2020年10月24日已经发布了 Composer 2.0 版本。Composer 2.0 内部重构了依赖更新的方式，性能有了很大的提示，推荐升级。\n1 2 3 $ composer self-update Upgrading to version 2.1.3 (stable channel). Use composer self-update --rollback to return to version 2.0.3 查看升级后的版本：\n1 2 composer --version Composer version 2.1.3 2021-06-09 16:31:20 通过 composer 安装 Laravel: 要创建基于Composer的新项目，可以使用create-project命令。格式如下：\n1 2 # 创建一个目录为 ExampleAppName 的项目 $ composer create-project laravel/laravel ExampleAppName 在这里，我们创建一个名为 Laravel 的项目：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 $ composer create-project laravel/laravel Laravel Creating a \u0026#34;laravel/laravel\u0026#34; project at \u0026#34;./Laravel\u0026#34; Installing laravel/laravel (v8.5.20) - Downloading laravel/laravel (v8.5.20) - Installing laravel/laravel (v8.5.20): Extracting archive Created project in /Users/wangtom/Code/Laravel \u0026gt; @php -r \u0026#34;file_exists(\u0026#39;.env\u0026#39;) || copy(\u0026#39;.env.example\u0026#39;, \u0026#39;.env\u0026#39;);\u0026#34; Loading composer repositories with package information Updating dependencies Lock file operations: 104 installs, 0 updates, 0 removals (。。。略。。。) - Installing phpspec/prophecy (1.13.0): Extracting archive - Installing phar-io/version (3.1.0): Extracting archive - Installing phar-io/manifest (2.0.1): Extracting archive - Installing myclabs/deep-copy (1.10.2): Extracting archive - Installing phpunit/phpunit (9.5.5): Extracting archive 61 package suggestions were added by new dependencies, use `composer suggest` to see details. Generating optimized autoload files \u0026gt; Illuminate\\Foundation\\ComposerScripts::postAutoloadDump \u0026gt; @php artisan package:discover --ansi Discovered Package: facade/ignition Discovered Package: fideloper/proxy Discovered Package: fruitcake/laravel-cors Discovered Package: laravel/sail Discovered Package: laravel/tinker Discovered Package: nesbot/carbon Discovered Package: nunomaduro/collision Package manifest generated successfully. 74 packages you are using are looking for funding. Use the `composer fund` command to find out more! \u0026gt; @php artisan key:generate --ansi Application key set successfully. 查看生成的 Laravel 目录结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 $ cd Laravel $ ls -al . total 632 drwxr-xr-x 26 wangtom staff 832 6 16 18:31 . drwxr-xr-x 60 wangtom staff 1920 6 16 18:26 .. -rw-r--r-- 1 wangtom staff 220 6 15 23:48 .editorconfig -rw-r--r-- 1 wangtom staff 920 6 16 18:31 .env -rw-r--r-- 1 wangtom staff 869 6 15 23:48 .env.example -rw-r--r-- 1 wangtom staff 111 6 15 23:48 .gitattributes -rw-r--r-- 1 wangtom staff 207 6 15 23:48 .gitignore -rw-r--r-- 1 wangtom staff 181 6 15 23:48 .styleci.yml -rw-r--r-- 1 wangtom staff 3810 6 15 23:48 README.md drwxr-xr-x 7 wangtom staff 224 6 15 23:48 app -rwxr-xr-x 1 wangtom staff 1686 6 15 23:48 artisan drwxr-xr-x 4 wangtom staff 128 6 15 23:48 bootstrap -rw-r--r-- 1 wangtom staff 1624 6 15 23:48 composer.json -rw-r--r-- 1 wangtom staff 268017 6 16 18:31 composer.lock drwxr-xr-x 16 wangtom staff 512 6 15 23:48 config drwxr-xr-x 6 wangtom staff 192 6 15 23:48 database -rw-r--r-- 1 wangtom staff 473 6 15 23:48 package.json -rw-r--r-- 1 wangtom staff 1202 6 15 23:48 phpunit.xml drwxr-xr-x 7 wangtom staff 224 6 15 23:48 public drwxr-xr-x 6 wangtom staff 192 6 15 23:48 resources drwxr-xr-x 6 wangtom staff 192 6 15 23:48 routes -rw-r--r-- 1 wangtom staff 563 6 15 23:48 server.php drwxr-xr-x 5 wangtom staff 160 6 15 23:48 storage drwxr-xr-x 6 wangtom staff 192 6 15 23:48 tests drwxr-xr-x 44 wangtom staff 1408 6 16 18:31 vendor -rw-r--r-- 1 wangtom staff 559 6 15 23:48 webpack.mix.js 使用 Laravel 内置命令启动服务：\n1 2 3 4 5 6 7 8 $ php artisan serve Starting Laravel development server: http://127.0.0.1:8000 [Wed Jun 16 18:43:45 2021] PHP 8.0.3 Development Server (http://127.0.0.1:8000) started [Wed Jun 16 18:43:52 2021] 127.0.0.1:57783 Accepted [Wed Jun 16 18:43:52 2021] 127.0.0.1:57784 Accepted [Wed Jun 16 18:43:53 2021] 127.0.0.1:57783 Closing [Wed Jun 16 18:43:53 2021] 127.0.0.1:57784 [200]: GET /favicon.ico [Wed Jun 16 18:43:53 2021] 127.0.0.1:57784 Closing 打开浏览器，访问 http://127.0.0.1:8000/ 即可以看到结果。\n","description":"","id":64,"section":"posts","tags":["PHP","Laravel"],"title":"Laravel环境安装与配置","uri":"http://localhost:1313/cn/posts/php/laravel-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"content":"Linux-压力测试工具Siege安装与使用\nSiege 是Linux/Unix下的一个WEB系统的压力测试工具。\nSiege is an http load testing and benchmarking utility.\n下载与安装:\n下载地址: http://download.joedog.org/siege/\n目前最新版本是 2016-05-20 发布的 siege-4.0.2.tar.gz\n1 2 3 4 5 6 $ wget http://download.joedog.org/siege/siege-latest.tar.gz $ tar zxf siege-latest.tar.gz $ cd siege-4.0.2/ $ ./configure $ sudo make $ sudo make install 查看是否安装成功:\n查看siege安装路径:\n1 2 $ which siege /usr/local/bin/siege 查看siege版本:\n1 2 $ siege -V SIEGE 4.0.2 参数说明:\n可以使用”siege -h”命令来查看帮助信息:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 $ siege -h SIEGE 4.0.2 Usage: siege [options] siege [options] URL siege -g URL Options: -V, --version VERSION, prints the version number. -h, --help HELP, prints this section. -C, --config CONFIGURATION, show the current config. -v, --verbose VERBOSE, prints notification to screen. -q, --quiet QUIET turns verbose off and suppresses output. -g, --get GET, pull down HTTP headers and display the transaction. Great for application debugging. -c, --concurrent=NUM CONCURRENT users, default is 10 -r, --reps=NUM REPS, number of times to run the test. -t, --time=NUMm TIMED testing where \u0026#34;m\u0026#34; is modifier S, M, or H ex: --time=1H, one hour test. -d, --delay=NUM Time DELAY, random delay before each requst -b, --benchmark BENCHMARK: no delays between requests. -i, --internet INTERNET user simulation, hits URLs randomly. -f, --file=FILE FILE, select a specific URLS FILE. -R, --rc=FILE RC, specify an siegerc file -l, --log[=FILE] LOG to FILE. If FILE is not specified, the default is used: PREFIX/var/siege.log -m, --mark=\u0026#34;text\u0026#34; MARK, mark the log file with a string. between .001 and NUM. (NOT COUNTED IN STATS) -H, --header=\u0026#34;text\u0026#34; Add a header to request (can be many) -A, --user-agent=\u0026#34;text\u0026#34; Sets User-Agent in request -T, --content-type=\u0026#34;text\u0026#34; Sets Content-Type in request 查看当前的配置信息\n$ siege -C\n使用说明:\n(1) 直接请求URL:\n$ siege -c 20 -r 10 http://www.cnwytnet.com\n参数说明： -c 是并发量，并发数为20人 -r 是重复次数， 重复10次\n(2) 随机选取urls.txt中列出所有的网址\n在当前目录下创建一个名为”urls-demo.txt”的文件。\n文件里边填写URL地址，可以有多条，每行一条，比如：\n1 2 3 # URLs: http://www.sogou.com/web?query=php\u0026amp;from=wang_yong_tao https://www.baidu.com/ // 执行 $ siege -c 5 -r 10 -f urls-demo.txt $ siege -c 5 -r 10 -f /Users/WangYoungTom/temp/urls-demo.txt\n参数说明： -c 是并发量，并发数为5人 -r 是重复次数， 重复10次 -f 指定使用文件，urls-demo.txt就是一个文本文件，每行都是一个url，会从里面随机访问的\nSiege从Siege-V2.06起支持POST和GET两种请求方式。 如果想模拟POST请求，可以在urls-demo.txt中安装一下格式填写URL:\nURL （POST）: http://wangtest.com/index.php POST UserId=XXX\u0026amp;StartIndex=0\u0026amp;OS=Android\u0026amp;Sign=cff6wyt505wyt4c\nhttp://wangtest.com/articles.php POST UserId=XXX\u0026amp;StartIndex=0\u0026amp;OS=iOS\u0026amp;Sign=cff63w5905wyt4c\n使用示例:\n1 2 3 // 请求http://www.cnwytnet.com，并发人数为10，重复5次，每次请求间隔3秒 $ siege --concurrent=10 --reps=5 --delay=3 http://www.cnwytnet.com $ siege -c 10 -r 5 -d 3 http://www.cnwytnet.com 结果说明:\n1 2 3 4 5 6 7 8 9 10 11 12 Transactions: 153 hits (处理次数，本次处理了153此请求) Availability: 100.00 % (可用性/成功次数的百分比,比如本次100%成功) Elapsed time: 17.22 secs （运行时间，本次总消耗17.22秒） Data transferred: 7.70 MB （数据传送量） Response time: 0.17 secs （响应时间） Transaction rate: 8.89 trans/sec (处理请求频率，每秒钟处理8.89次请求） Throughput: 0.45 MB/sec （吞吐量,传输速度） Concurrency: 1.54 (实际最高并发连接数) Successful transactions: 153 (成功的传输次数) Failed transactions: 0 (失败的传输次数) Longest transaction: 0.70 (处理传输是所花的最长时间) Shortest transaction: 0.02 (处理传输是所花的最短时间) 使用实例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 $ siege -c 5 -r 10 http://www.baidu.com Transactions: 386 hits Availability: 100.00 % Elapsed time: 37.40 secs Data transferred: 19.47 MB Response time: 0.43 secs Transaction rate: 10.32 trans/sec Throughput: 0.52 MB/sec Concurrency: 4.45 Successful transactions: 386 Failed transactions: 0 Longest transaction: 2.38 Shortest transaction: 0.02 参考链接: 官网 https://www.joedog.org/\n文档 https://www.joedog.org/siege-manual/#a01\nhttp://blog.csdn.net/qingye2008/article/details/34500949\n更新记录: 2016-09-08 整理本文内容\n2016-09-09 新增整理POST请求内容\n[END]\n","description":"","id":66,"section":"posts","tags":["Siege","Linux"],"title":"Linux-压力测试工具Siege安装与使用","uri":"http://localhost:1313/cn/posts/linux/linux-%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7siege%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"content":"PHP-如何导出CSV文件?使用Excel打开乱码怎么办?\n使用PHP代码，可以很方便的将数据导出成CSV格式的文件。\nCSV格式的文件可以在 Office Excel 中打开，也可以很快速的转换成 xls/xlsx 格式的文件。\n什么是CSV文件呢？ CSV，是Comma Separated Value（逗号分隔值）的英文缩写，通常都是使用英文逗号(\u0026quot;,\u0026quot;)分隔的纯文本表格文件。\nCSV可以使用什么软件打开? CSV文件是纯文本的数据文件，可以使用任何文本/代码编辑器打开。\n也可以使用 MS Office Excel、Mac Numbers.app 等软件打开。\nCSV文件的格式？ CSV文件格式：\n(1) 以行为单位，每一行记录一条数据。\n(2) 每一行的数据中，每一列数据以半角逗号（即英文逗号\u0026quot;,\u0026quot;）作为分隔符，如果列为空也要有逗号分隔。\n(3) 列中的内容如存在半角引号（即\u0026quot;）,则替换成半角双引号（\u0026quot;\u0026quot;）。就是半角单引号需要使用双引号包起来。\n如何将数据导出成CSV格式？ 直接看代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function downloadAsCsvFile( array \u0026amp;$csvTitle, array \u0026amp;$csvData, $fileName=\u0026#39;\u0026#39; ) { if(empty($fileName)){ //保存的文件名称 $fileName = \u0026#39;download_\u0026#39;.date(\u0026#39;Ymd_His\u0026#39;); } header(\u0026#39;Content-type: application/csv\u0026#39;); header(\u0026#39;Content-Transfer-Encoding: binary; charset=utf-8\u0026#39;); header(\u0026#39;Content-Disposition: attachment; filename=\u0026#39;.$fileName.\u0026#39;.csv\u0026#39;); $fp = fopen(\u0026#34;php://output\u0026#34;, \u0026#39;w\u0026#39;); //生成BOM头 fputs($fp, $bom =( chr(0xEF) . chr(0xBB) . chr(0xBF) )); //生成标题栏 fputcsv($fp, $csvTitle); foreach ($csvData as $row) { fputcsv($fp, $row); } exit(); } 可以看到代码中有个生成BOM头的操作，这是为啥呢？\n我们平常编写代码，总是选择将代码文件保存成 \u0026ldquo;无BOM头的UTF8\u0026rdquo; 格式。\n但是因为历史原因，Windows下的文本文件需使用 \u0026ldquo;有BOM头的UTF8\u0026rdquo; 格式，否则Excel打开就乱码了。\nFROM [itelite博客]:\n为了识别 Unicode 文件，Microsoft 建议所有的 Unicode 文件应该以 ZERO WIDTH NOBREAK SPACE字符开头。\n这作为一个”特征符”或”字节顺序标记（byte-order mark，BOM）”来识别文件中使用的编码和字节顺序（big-endian或little-endian）。\n以UTF-8无BOM格式编码，因此要想导出Microsoft Excel可以正常显示的UTF-8的CSV文件，需要显式的输出BOM(EF BB BF)，然后再输出有效数据。\n如何将数据导出成TXT格式？ 同样我们也可以直接下载成TXT格式的文件，使用空格分隔数据。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 function downloadAsTxtFile( array \u0026amp;$txtTitle, array \u0026amp;$txtData, $fileName=\u0026#39;\u0026#39; ) { if(empty($fileName)){ //保存的文件名称 $fileName = \u0026#39;download_\u0026#39;.date(\u0026#39;Ymd_His\u0026#39;); } header(\u0026#34;Content-Disposition: attachment; filename={$fileName}.txt\u0026#34;); header(\u0026#34;Content-Type: charset=utf-8\u0026#34;); $fp = fopen(\u0026#34;php://output\u0026#34;, \u0026#39;w\u0026#39;); //生成BOM头 fputs($fp, $bom =( chr(0xEF) . chr(0xBB) . chr(0xBF) )); //生成标题栏 $titleLine = implode(\u0026#34;\\t\u0026#34;, $txtTitle).\u0026#34;\\n\u0026#34;; fputs($fp, $titleLine, strlen($titleLine)); foreach ($txtData as $row) { $line = implode(\u0026#34;\\t\u0026#34;, $row).\u0026#34;\\n\u0026#34;; fputs($fp, $line, strlen($line)); } exit(); } 使用示例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 //示例：$data为导出CSV数据 $data = array( 0 =\u0026gt; array(\u0026#39;id\u0026#39;=\u0026gt;487, \u0026#39;date\u0026#39;=\u0026gt;\u0026#39;201605\u0026#39;, \u0026#39;product_id\u0026#39;=\u0026gt;487, \u0026#39;product_name\u0026#39;=\u0026gt;\u0026#39;法国皇家ROYALCANIN\u0026#39;, \u0026#39;create_time\u0026#39;=\u0026gt;1468931234,), 1 =\u0026gt; array(\u0026#39;id\u0026#39;=\u0026gt;13866, \u0026#39;date\u0026#39;=\u0026gt;\u0026#39;201606\u0026#39;, \u0026#39;product_id\u0026#39;=\u0026gt;13866, \u0026#39;product_name\u0026#39;=\u0026gt;\u0026#39;BOTH室内挑嘴小型犬奶糕及幼犬500g微生态系列\u0026#39;, \u0026#39;create_time\u0026#39;=\u0026gt;1468810086,), 2 =\u0026gt; array(\u0026#39;id\u0026#39;=\u0026gt;20374, \u0026#39;date\u0026#39;=\u0026gt;\u0026#39;201607\u0026#39;, \u0026#39;product_id\u0026#39;=\u0026gt;20374, \u0026#39;product_name\u0026#39;=\u0026gt;\u0026#39;Orijen渴望 无谷成犬配方狗粮2.27kg 香港直购\u0026#39;, \u0026#39;create_time\u0026#39;=\u0026gt;1488810010,), ); $filename = \u0026#39;TEST_\u0026#39;.date(\u0026#39;Ymd\u0026#39;).\u0026#39;_\u0026#39;.time(); $title = array(\u0026#39;ID\u0026#39;, \u0026#39;月份\u0026#39;, \u0026#39;产品ID\u0026#39;, \u0026#39;产品名称\u0026#39;,\u0026#39;新建时间\u0026#39;); $data = array(); //拼装要导出的数据字段 foreach ($data as $key =\u0026gt; $row) { $data[$key][\u0026#39;id\u0026#39;] = $row[\u0026#39;id\u0026#39;]; $data[$key][\u0026#39;date\u0026#39;] = $row[\u0026#39;date\u0026#39;]; $data[$key][\u0026#39;product_id\u0026#39;] = $row[\u0026#39;product_id\u0026#39;]; $data[$key][\u0026#39;product_name\u0026#39;]= $row[\u0026#39;product_name\u0026#39;]; $data[$key][\u0026#39;create_time\u0026#39;] = ($row[\u0026#39;create_time\u0026#39;]) ? date(\u0026#39;Y-m-d H:i:s\u0026#39;, $row[\u0026#39;create_time\u0026#39;]) : 0; } //导出TXT文件 //downloadAsTxtFile($download_title, $data, $filename); //导出CSV文件 downloadAsCsvFile($title, $data, $filename); 导出的其他选择 数据导出除了导出CSV格式文件，也可以直接导出成Excel(xls/xlsx)格式文件，这就需要使用PHPExcel库。\n(1) 使用 PHPOffice/PHPExcel 类库。（已归档不维护了）\n(2) 使用 PHPOffice/PhpSpreadsheet 类库。（PHPExcel的继承者）\n用到的 PHP 函数 header() : Send a raw HTTP header\nfopen() : Opens file or URL\nfclose() : Closes an open file pointer\nfputs() : Alias of fwrite() fwrite() : Binary-safe file write\nfputcsv() : Format line as CSV and write to file pointer (PHP 5 \u0026gt;= 5.1.0, PHP 7)\n参考链接 http://www.creativyst.com/Doc/Articles/CSV/CSV01.htm#EmbedBRs\nhttp://www.cnblogs.com/itelite/archive/2012/11/28/2792545.html http://file.org/extension/csv\nPHPExcel: https://github.com/PHPOffice/PHPExcel\n更新记录 20160729 新整理此文 ","description":"","id":67,"section":"posts","tags":["PHP","CSV"],"title":"PHP-如何导出CSV文件?使用Excel打开乱码怎么办?","uri":"http://localhost:1313/cn/posts/php/php-%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8excel%E6%89%93%E5%BC%80%E4%B9%B1%E7%A0%81/"},{"content":"MySQL-多表update-SQL语句总结\n假定我们有两张表:\n一张表为Product表存放产品信息，其中有产品价格列Price；\n另外一张表是ProductPrice表，我们要将ProductPrice表中的价格字段Price更新为Price表中价格字段的80%。\n在 MySQL 中我们有几种手段可以做到这一点，一种是 update table1 t1, table2 ts …的方式：\n1 2 3 UPDATE product p, productPrice pp SET pp.price = pp.price * 0.8 WHERE p.productId = pp.productId AND p.dateCreated \u0026lt; ‘2004-01-01’ 另外一种方法是使用inner join然后更新：\n1 2 3 4 UPDATE product p INNER JOIN productPrice pp ON p.productId = pp.productId SET pp.price = pp.price * 0.8 WHERE p.dateCreated \u0026lt; ‘2004-01-01’ 另外我们也可以使用left outer join来做多表update，比方说如果ProductPrice表中没有产品价格记录的话，将Product表的isDeleted字段置为1，如下sql语句：\n1 2 3 4 UPDATE product p LEFT JOIN productPrice pp ON p.productId = pp.productId SET p.deleted = 1 WHERE pp.productId IS null 另外，上面的几个例子都是两张表之间做关联，但是只更新一张表中的记录，其实是可以同时更新两张表的，如下sql：\n1 2 3 4 UPDATE product p INNER JOIN productPrice pp ON p.productId = pp.productId SET pp.price = pp.price * 0.8, p.dateUpdate = CURDATE() WHERE p.dateCreated \u0026lt; ‘2004-01-01’ 两张表做关联，更新了ProductPrice表的price字段和Product表字段的dateUpdate两个字段。\n[END]\n","description":"","id":68,"section":"posts","tags":["MySQL"],"title":"MySQL-多表update-SQL语句总结","uri":"http://localhost:1313/cn/posts/mysql/mysql-%E5%A4%9A%E8%A1%A8update-sql%E8%AF%AD%E5%8F%A5%E6%80%BB%E7%BB%93/"},{"content":"PHP常量详解：define和const的区别\n常量是一个简单值的标识符（名字）。\n如同其名称所暗示的，在脚本执行期间该值不能改变（除了所谓的魔术常量，它们其实不是常量）。\n常量默认为大小写敏感。通常常量标识符总是大写的。\n可以用 define() 函数来定义常量。\n在 PHP 5.3.0 以后，可以使用 const 关键字在类定义的外部定义常量，先前版本const 关键字只能在类（class）中使用。\n一个常量一旦被定义，就不能再改变或者取消定义。\n常量只能包含标量数据（boolean，integer，float 和 string）。\n可以定义 resource 常量，但应尽量避免，因为会造成不可预料的结果。\n可以简单的通过指定其名字来取得常量的值，与变量不同，不应该在常量前面加上 $ 符号。\n如果常量名是动态的，也可以用函数constant() 来获取常量的值。\n用get_defined_constants() 可以获得所有已定义的常量列表。\n常量和变量有如下不同：\n·常量前面没有美元符号（$）；\n·常量只能用 define() 函数定义，而不能通过赋值语句；\n·常量可以不用理会变量的作用域而在任何地方定义和访问；\n·常量一旦定义就不能被重新定义或者取消定义；\n·常量的值只能是标量。\nExample #1 定义常量\n1 2 3 4 5 \u0026lt;？php define(\u0026#34;CONSTANT\u0026#34;, \u0026#34;Hello world.\u0026#34;); echo CONSTANT; // outputs \u0026#34;Hello world.\u0026#34; echo Constant; // 输出 \u0026#34;Constant\u0026#34; 并发出一个提示性信息 ?\u0026gt; Example #2 使用关键字 const 定义常量\n1 2 3 4 5 \u0026lt;？php // 以下代码在 PHP 5.3.0 后可以正常工作 const CONSTANT = \u0026#39;Hello World\u0026#39;; echo CONSTANT; ?\u0026gt; Example #3 合法与非法的常量名\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;？php // 合法的常量名 define(\u0026#34;FOO\u0026#34;, \u0026#34;something\u0026#34;); define(\u0026#34;FOO2\u0026#34;, \u0026#34;something else\u0026#34;); define(\u0026#34;FOO_BAR\u0026#34;, \u0026#34;something more\u0026#34;); // 非法的常量名 define(\u0026#34;2FOO\u0026#34;, \u0026#34;something\u0026#34;); // 下面的定义是合法的，但应该避免这样做：(自定义常量不要以__开头) // 也许将来有一天PHP会定义一个__FOO__的魔术常量 // 这样就会与你的代码相冲突 define(\u0026#34;__FOO__\u0026#34;, \u0026#34;something\u0026#34;); ?\u0026gt; 【问】在php中定义常量时,const与define的区别?\n【答】使用const使得代码简单易读，const本身就是一个语言结构，而define是一个函数。另外const在编译时要比define快很多。\n(1).const用于类成员变量的定义，一经定义，不可修改。define不可用于类成员变量的定义，可用于全局常量。\n(2).const可在类中使用，define不能。\n(3).const不能在条件语句中定义常量。\n例如：\n1 2 3 4 5 6 if (...){ const FOO = \u0026#39;BAR\u0026#39;; // 无效的invalid } if (...) { define(\u0026#39;FOO\u0026#39;, \u0026#39;BAR\u0026#39;); // 有效的valid } (4).const采用一个普通的常量名称，define可以采用表达式作为名称。\n1 2 3 4 const FOO = \u0026#39;BAR\u0026#39;; for ($i = 0; $i \u0026lt; 32; ++$i) { define(\u0026#39;BIT_\u0026#39; . $i, 1 \u0026lt;\u0026lt; $i); } (5).const只能接受静态的标量，而define可以采用任何表达式。\n例如：\n1 2 const BIT_5 = 1 \u0026lt;\u0026lt; 5; // 无效的invalid define(\u0026#39;BIT_5\u0026#39;, 1 \u0026lt;\u0026lt; 5); // 有效的valid (6).const定义的常量时大小写敏感的，而define可通过第三个参数（为true表示大小写不敏感）来指定大小写是否敏感。\n例如：\n1 2 3 define(\u0026#39;FOO\u0026#39;, \u0026#39;BAR\u0026#39;, true); echo FOO; // BAR echo foo; // BAR 相关函数： define — 定义一个常量\n说明：\nbool define ( string $name , mixed $value [, bool $case_insensitive = false ]\n参数：\nname ：常量名。\nvalue ：常量的值；仅允许标量和 null。标量的类型是 integer， float，string 或者 boolean。 也能够定义常量值的类型为 resource ，但并不推荐这么做，可能会导致未\n知状况的发生。\ncase_insensitive ：如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。比如， CONSTANT 和 Constant 代表了不同的值。（Note: 大小写不敏感的常量以小写\n的方式储存。）\n返回值：成功时返回 TRUE， 或者在失败时返回 FALSE.\nconstant — 返回一个常量的值\n说明：\nmixed constant ( string $name )\n通过 name 返回常量的值。当你不知道常量名，却需要获取常量的值时，constant() 就很有用了。也就是常量名储存在一个变量里，或者由函数返回常量名。该函数也适用\nclass constants。\n参数：\nname ：常量名。\n返回值：\n返回常量的值。如果常量未定义则返回 NULL。\ndefined — 检查某个名称的常量是否存在\n说明：\nbool defined ( string $name )\n检查该名称的常量是否已定义。\nNote: 如果你要检查一个变量是否存在，请使用 isset()。 defined() 函数仅对 constants 有效。如果你要检测一个函数是否存在，使用 function_exists()。\n参数：\nname ：常量的名称。\n返回值：\n如果该名称的常量已定义，返回 TRUE；未定义则返回 FALSE。\nget_defined_constants:\nReturns an associative array with the names of all the constants and their values\n以关联数组返回常量名和常量的值。这包括那些由扩展以及由define()函数创建的常量。\n参考链接： php中定义常量define和const区别 http://www.dewen.org/q/4280\n更新记录： 2013-07-29 新增此文档 (wangyt)\n2017-04-12 重新整理本文档 (wangyt)\n[END]\n","description":"","id":69,"section":"posts","tags":["PHP"],"title":"PHP-PHP常量详解define和const的区别?","uri":"http://localhost:1313/cn/posts/php/php-%E5%B8%B8%E9%87%8F%E8%AF%A6%E8%A7%A3define%E5%92%8Cconst%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"content":"PHP如何以POST形式发送XML数据，PHP如何接收XML文件?\n发送XML文件: postXml.php\n1 2 3 4 5 6 7 8 $xmlData = \u0026#34; \u0026lt;xml \u0026gt;ad775b217\u0026lt;/ToUserName\u0026gt; \u0026lt;FromUserName \u0026gt;tWy3zC3xUgQMR5coXif5SA\u0026lt;/FromUserName\u0026gt; \u0026lt;CreateTime \u0026gt;1366181013\u0026lt;/CreateTime\u0026gt; \u0026lt;MsgType \u0026gt;text\u0026lt;/MsgType \u0026gt; \u0026lt;Content \u0026gt;我的测试\u0026lt;/Content \u0026gt; \u0026lt;MsgId \u0026gt;5867702771251151243\u0026lt;/MsgId \u0026gt; \u0026lt;/xml \u0026gt;\u0026#34;; 第一种发送方式，也是推荐的方式，使用 curl：\n1 2 3 4 5 6 7 8 9 10 11 12 13 $url = \u0026#39;http://cnwyt.net/xml/getXml.php\u0026#39;; //接收xml数据的文件 $header[] = \u0026#34;Content-type: text/xml\u0026#34;; //定义content-type为xml,注意是数组 $ch = curl_init ($url); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, $header); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $xmlData); $response = curl_exec($ch); if(curl_errno($ch)){ print curl_error($ch); } curl_close($ch); 第二种发送方式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $url = \u0026#39;http://cnwyt.net/xml/getXml.php\u0026#39;; $header[] = \u0026#34;Content-type: text/xml\u0026#34;;//定义content-type为xml $server =\u0026#39;http://wang.net/\u0026#39;; $contentLength = strlen($xml_data); $fp = fsockopen(\u0026#39;127.0.0.1\u0026#39;, 80); fputs($fp, \u0026#34;POST $url HTTP/1.0\\r\\n\u0026#34;); fputs($fp, \u0026#34;Host: $server\\r\\n\u0026#34;); fputs($fp, \u0026#34;Content-Type: text/xml\\r\\n\u0026#34;); fputs($fp, \u0026#34;Content-Length: $contentLength\\r\\n\u0026#34;); fputs($fp, \u0026#34;Connection: close\\r\\n\u0026#34;); fputs($fp, \u0026#34;\\r\\n\u0026#34;); // all headers sent fputs($fp, $xmlData ); $result = \u0026#39;\u0026#39;; while (!feof($fp)) { $result .= fgets($fp, 128); } var_dump($result); 接收XML文件: getXml.php\n1 2 3 4 5 //$xml = $HTTP_RAW_POST_DATA; $xml = $GLOBALS[\u0026#39;HTTP_RAW_POST_DATA\u0026#39;]; //将xml数据写入文本文件\u0026#34;a.txt\u0026#34;中 $handle = fopen(\u0026#39;a.txt\u0026#39;,\u0026#39;a+\u0026#39;); fwrite($handle,$xml); 问题：为什么不使用$_POST接收？ 解答：由于PHP默认只识别 application/x-www.form-urlencoded 标准的数据类型，对型如 text/xml 的内容无法解析为 $_POST数组，故保留原型，交给 $GLOBALS['HTTP_RAW_POST_DATA'] 来接收。\n注意，$HTTP_RAW_POST_DATA 对于 enctype=\u0026quot;multipart/form-data\u0026quot; 表单数据不可用。\n扩展阅读： 使用PHP CURL的POST数据\nhttp://www.nowamagic.net/librarys/veda/detail/124\n$HTTP_RAW_POST_DATA\nhttp://www.cnblogs.com/xwblog/archive/2011/12/23/2299672.html\n[END]\n","description":"","id":70,"section":"posts","tags":["PHP"],"title":"PHP-如何以POST形式发送XML数据，PHP如何接收XML文件?","uri":"http://localhost:1313/cn/posts/php/php-%E5%A6%82%E4%BD%95%E4%BB%A5post%E5%BD%A2%E5%BC%8F%E5%8F%91%E9%80%81xml%E6%95%B0%E6%8D%AE/"},{"content":"PHP如何判断接收到的是否为正确的图片二进制数据\nPHP检测图片是否损坏，PHP检测图片是否正常?\n(一)、如果存在GD库，可以使用 imagecreatefromstring () 函数： 格式：resource imagecreatefromstring ( string $image )\nimagecreatefromstring() 返回一个图像标识符，其表达了从给定字符串得来的图像。图像格式将自动检测，只要 PHP 支持：JPEG，PNG，GIF，WBMP 和 GD2。\n返回值：成功则返回图像资源，如果图像格式不支持，数据不是认可的格式，或者图像已损坏则返回 FALSE。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?php // 代码开始 $imgUrl = \u0026#34;http://www.baidu.com/img/shouye_b5486898c692066bd2cbaeda86d74448.gif\u0026#34;; $data = file_get_contents($imgUrl); // echo ($data); $im = imagecreatefromstring($data); if($im != false){ echo \u0026#39;\u0026lt;p\u0026gt;图片正常...\u0026lt;/p\u0026gt;\u0026#39;; }else{ echo \u0026#39;\u0026lt;p\u0026gt;图片已损坏...\u0026lt;/p\u0026gt;\u0026#39;; } 1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;?php $data = \u0026#39;iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAMAAAB/2U7WAAAABl\u0026#39; . \u0026#39;BMVEUAAAD///+l2Z/dAAAASUlEQVR4XqWQUQoAIAxC2/0vXZDr\u0026#39; . \u0026#39;EX4IJTRkb7lobNUStXsB0jIXIAMSsQnWlsV+wULF4Avk9fLq2r\u0026#39; . \u0026#39;8a5HSE35Q3eO2XP1A1wQkZSgETvDtKdQAAAABJRU5ErkJggg==\u0026#39;; $data = base64_decode($data); $im = imagecreatefromstring($data); if ($im !== false) { header(\u0026#39;Content-Type: image/png\u0026#39;); imagepng($im); } else { echo \u0026#39;An error occured.\u0026#39;; } ###（二）、如果没有GD库可以使用下边的方法：\n正常的JPG文件都是以FFD8开头，FFD9结尾的，如果丢失了文件尾部，JPG仍然可以被识别，但是就会丢失部分图像数据。\n代码如下：\n1 2 3 4 5 6 7 8 9 function check_img_by_source($source) { switch(bin2hex(substr($source,0,2))){ case \u0026#39;ffd8\u0026#39; : return \u0026#39;ffd9\u0026#39; === bin2hex(substr($source,-2)); case \u0026#39;8950\u0026#39; : return \u0026#39;6082\u0026#39; === bin2hex(substr($source,-2)); case \u0026#39;4749\u0026#39; : return \u0026#39;003b\u0026#39; === bin2hex(substr($source,-2)); default : return false; } } var_dump(check_img_by_source(file_get_contents(\u0026#39;11.gif\u0026#39;)); 这里只针对了 jpg,png,gif 做了判断。想加其他的按照以上规则增加即可。\n不过上边这个判断不够严谨，别人可以根据以上判断规则构造一个假数据。\n###（三）、使用 getimagesize 函数\ngetimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型和一个可以用于普通 HTML 文件中 IMG 标记中的 height/width 文本字符串。\n如果不能访问 filename 指定的图像或者其不是有效的图像，getimagesize() 将返回 FALSE 并产生一条 E_WARNING 级的错误。\n函数拓展：\nimagecreatefromjpeg() - 从 JPEG 文件或 URL 新建一图像 imagecreatefrompng() - 从 PNG 文件或 URL 新建一图像 imagecreatefromgif() - 从 GIF 文件或 URL 新建一图像 imagecreatetruecolor() - 新建一个真彩色图像 exif_read_data() — 从 JPEG 或 TIFF 文件中读取 EXIF 头信息（别名：read_exif_data ） file_get_contents() — 将整个文件读入一个字符串 base64_decode() — 对使用 MIME base64 编码的数据进行解码 bin2hex() — 将二进制数据转换成十六进制表示 参考链接： 德问：http://www.dewen.org/q/2643 （链接已失效）\n更新记录 2013-03-22 新增此文档 (wangyt)\n2017-04-12 重新整理本文档 (wangyt)\n[END]\n","description":"","id":71,"section":"posts","tags":["PHP"],"title":"PHP-如何去除字符串中的最后一个字符","uri":"http://localhost:1313/cn/posts/php/php-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E6%98%AF%E5%90%A6%E4%B8%BA%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%9B%BE%E7%89%87%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE/"},{"content":"关于jQuery的AJAX不兼容IE的解决办法\n在使用jQuery的AJAX：get方法去检测数据是否存在时，会发现IE会出现不兼容的情况。\n用AJAX:post方法时，使用Chrome/FireFox/IE均能出现正确的结果，但是在使用AJAX:get方法时，IE却不能返回正确的结果。\n解决过程 难道是数据超出了get方法的限制的长度，这个也不可能，我总共才传了一点点数据。排除。\n网上一些网友说是IE缓存的问题，在请求数据后边加上随机数就行，比如加上时间数new Date().getTime()。\n先前的代码中我已经添加了随机数，用的是“Math.random()”也不行。难道用时间比较靠谱？\n那就改成获取时间试试，在参数后加“new Date().getTime()”后反复测试还是不行，真是百思不得其解！这个错误也排除了。\n反复查看手册后发现请求的数据格式还是有一种JSON格式，如{foo:[“bar1”, “bar2”]} ，然后就按照这种格式书写，还真的返回了正确的查询结果。真不知道IE还有这点要求。（完）\n先前的格式：\n1 2 type: \u0026#34;get\u0026#34;, data: \u0026#34;bid=\u0026#34;+my_bid+\u0026#34;\u0026amp;name_cn=\u0026#34;+name_cn+\u0026#34;\u0026amp;timeStamp=\u0026#34;+new Date().getTime(), 修改后格式：\n1 2 type: \u0026#34;get\u0026#34;, data: {\u0026#39;bid\u0026#39;:my_bid,\u0026#39;name_cn\u0026#39;:name_cn,\u0026#39;timeStamp\u0026#39;:new Date().getTime()}, 在jQuery手册中是这样描述的：\ndata Object,String\n发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。\n查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。\n如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:[\u0026ldquo;bar1\u0026rdquo;, \u0026ldquo;bar2\u0026rdquo;]} 转换为 \u0026ldquo;\u0026amp;foo=bar1\u0026amp;foo=bar2\u0026rdquo;。\n代码片段如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var siteUrl=\u0026#34;http://blog.sina.com.cn/cnwyt\u0026#34;; jQuery.ajax({ type: \u0026#34;get\u0026#34;, url: siteUrl+\u0026#34;cosmetics/product/ajax_check?\u0026#34;, //data: \u0026#34;bid=\u0026#34;+my_bid+\u0026#34;\u0026amp;name_cn=\u0026#34;+name_cn+\u0026#34;\u0026amp;timeStamp=\u0026#34; + new Date().getTime(), data: {\u0026#39;bid\u0026#39;:my_bid,\u0026#39;name_cn\u0026#39;:name_cn,\u0026#39;timeStamp\u0026#39;:new Date().getTime()}, dataType: \u0026#39;json\u0026#39;, error: function (err) { alert(\u0026#39;网络故障,请与管理员联系！\u0026#39;); }, success: function (message) { if (message!=false){ //ture的代码 } else { //false的代码 } } }); 问题描述：jQuery.get() 方法在 FireFox 下可以正常获取值并显示，但是在 IE 下不行。\n原因1：因为IE的缓存问题 解决：在URL后面加一个随机数或时间参数\n1\nurl = \u0026ldquo;chek.php?timeStamp=\u0026quot;+new Date().getTime();\n或者写成：\n1 2 3 4 5 data:{ \u0026#39;type\u0026#39;: type, \u0026#39;name\u0026#39;: name, \u0026#39;timeStamp\u0026#39;: new Date().getTime() }, 获取随机数 Math.random()\n获取时间数 new Date().getTime()\n原因2：数据格式问题 先前的格式：\n1 2 3 4 type:\u0026#34;get\u0026#34;, data:\u0026#34;bid=\u0026#34;+my_bid+\u0026#34;\u0026amp;name_cn=\u0026#34;+name_cn+\u0026#34;\u0026amp;timeStamp=\u0026#34;+new Date().getTime(), dataType:\u0026#39;json\u0026#39;, 修改后的格式：\n1 2 3 4 type:\u0026#34;get\u0026#34;, data:{\u0026#39;bid\u0026#39;:my_bid,\u0026#39;name_cn\u0026#39;:name_cn,\u0026#39;timeStamp\u0026#39;:new Date().getTime()}, dataType:\u0026#39;json\u0026#39;, 参考链接： jQuery 的 .get和.post和.ajax方法IE的兼容问题\nhttp://blog.csdn.net/muziduoxi/article/details/7541800\njquery ajax在IE下失效\nhttp://www.im87.cn/blog/256\n更新记录 2012-11-02 新增此文档 (wangyt)\n2017-04-12 重新整理本文档 (wangyt)\n[END]\n","description":"","id":72,"section":"posts","tags":["JavaScritp"],"title":"JS-关于jQuery的AJAX不兼容IE的解决办法","uri":"http://localhost:1313/cn/posts/js-%E5%85%B3%E4%BA%8Ejquery%E7%9A%84ajax%E4%B8%8D%E5%85%BC%E5%AE%B9ie%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"content":"PHP-如何不使用临时变量来交换两个数值变量？\n如何在PHP中不使用临时变量来交换两个数值变量？\n解析如下： 一般情况下，交换两个变量的值应该使用中间变量：\n1 2 3 4 5 function swap($a, $b){ $temp = $a; $a = $b; $b = $temp; } 1.这个方法很容易想到，但是只限于交换数值类型的变量：\n1 2 3 4 5 function swap (\u0026amp;$a,\u0026amp;$b){ $a = $a+$b; $b = $a-$b; $a = $a-$b; } 2.使用 list 语言结构。\n1 2 3 4 list($a, $b) = array($b, $a); // 自 PHP 5.4 起 list($a, $b) = [$b, $a]; 注：list — 把数组中的值赋给一些变量。像 array() 一样，这不是真正的函数，而是语言结构。 list() 可以在单次操作内就为一组变量赋值。\n3.通过数组函数 array_reverse\n1 2 3 4 $arr = array($a,$b); $arr = array_reverse($arr); $a = $arr[0]; $b = $arr[1]; 注：array_reverse — 返回一个单元顺序相反的数组\n4.直接使用数组操作：\n1 2 3 4 5 $a = \u0026#34;aaa\u0026#34;; $b = \u0026#34;bbb\u0026#34;; $b = array($a, $b); $a = $b[1]; $b = $b[0]; 更新记录 2012-06-01 新增此文档 (wangyt)\n2017-04-12 重新整理本文档 (wangyt)\n[END]\n","description":"","id":73,"section":"posts","tags":["PHP"],"title":"PHP-如何不使用临时变量来交换两个数值变量","uri":"http://localhost:1313/cn/posts/php/php-%E5%A6%82%E4%BD%95%E4%B8%8D%E4%BD%BF%E7%94%A8%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E6%9D%A5%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%80%BC%E5%8F%98%E9%87%8F/"},{"content":"PHP如何去除字符串中的最后一个字符呢？\n可以使用语言提供的函数 trim 或 substr等。\n比如：字符串 “aaaa,bbb,ccc,ddd,eee,”， 删除最后的逗号“，”：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;?php //PHP去除字符串中的最后一个字符 $str = \u0026#34;aaaa,bbb,ccc,ddd,eee,\u0026#34;; // 第一种方法 trim($str,$chsrlist)去除两边的 echo rtrim($str,\u0026#39;,\u0026#39;); //第一种方法 trim($str,$chsrlist)去除两边的 echo PHP_EOL; // 第二种方法 echo substr($str,0,strlen($str)-1); echo PHP_EOL; // 第三种方法 echo substr($str,0,-1); echo PHP_EOL; // 第四种方法 echo $str[strlen($str)-1] == \u0026#39;,\u0026#39; ? substr($str, 0, -1) : $str; echo PHP_EOL; 使用 rtrim() 函数还是比较好的，推荐使用！\n可以指定需要去除的字符，比如去除右边的逗号：\n1 $new_str = rtrim( trim($str), \u0026#39;,\u0026#39; ); 也可以指定多个需要去除的字符，去除多个字符：\n1 $new_str = rtrim( trim($str),\u0026#39;,.;\u0026#39; ); 拓展阅读： 代码中用到的函数：\ntrim — 去除字符串首尾处的空白字符（或者其他字符）\nltrim — 删除字符串开头的空白字符（或其他字符） (left trim)\nrtrim — 删除字符串末端的空白字符（或者其他字符） (right trim)\nsubstr — 返回字符串的子串 (substring)\nstrlen — 获取字符串长度 (string length)\n[END]\n","description":"","id":74,"section":"posts","tags":["PHP"],"title":"PHP-如何去除字符串中的最后一个字符","uri":"http://localhost:1313/cn/posts/php/php-%E5%A6%82%E4%BD%95%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6/"},{"content":"Golang-如何读取和导出CSV文件?\n使用Go代码，可以很方便的读取CSV文件或将数据导出成CSV文件。\nCSV格式的文件可以在 Office Excel 中打开，也可以很快速的转换成 xls/xlsx 格式的文件。\n什么是CSV文件呢？ CSV，是Comma Separated Value（逗号分隔值）的英文缩写，通常都是使用英文逗号(\u0026quot;,\u0026quot;)分隔的纯文本表格文件。\nCSV 文件保存任意条数据记录。\nCSV 是一种通用的、比较简单的文件格式，被各个领域广泛应用，比如下载数据、导入数据等。\nCSV可以使用什么软件打开? CSV文件是纯文本的数据文件，可以使用任何文本/代码编辑器打开。\n(1) 使用文本编辑器打开： 比如 Sublime Text，VScode, Notepad++ 等。\n(2) 使用 Office Excel、Mac Numbers.app、WPS 等软件打开。\nCSV文件的格式？ CSV文件格式：\n(1) 以行为单位，每一行记录一条数据。\n(2) 每一行的数据中，每一列数据以半角逗号（即英文逗号\u0026quot;,\u0026quot;）作为分隔符，如果列为空也要有逗号分隔。\n(3) 列中的内容如存在半角引号（即\u0026quot;）,则替换成半角双引号（\u0026quot;\u0026quot;）。就是半角单引号需要使用双引号包起来。\n一个简单的CSV文件内容如下：\nid, name, remark 100, Huck, \u0026#34;Main Character\u0026#34; 101, Jim , \u0026#34;Main Character too\u0026#34; 102, \u0026#34;Tom,Swayer\u0026#34;, \u0026#34;This is a boy.\u0026#34; 如何导出CSV文件？ 使用 \u0026ldquo;encoding/csv\u0026rdquo;\n写入 csv 文件，可以使用 w.Write()与w.Flush()方法 或 w.WriteAll() 方法。\n直接看代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import ( \u0026#34;encoding/csv\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; ) func main() { // 创建文件 f, err := os.Create(\u0026#34;test.csv\u0026#34;) if err != nil { panic(err) } defer f.Close() // 写入UTF-8 BOM f.WriteString(\u0026#34;\\xEF\\xBB\\xBF\u0026#34;) // 写入UTF-8 BOM w := csv.NewWriter(f) data := [][]string{ {\u0026#34;1\u0026#34;, \u0026#34;安徽\u0026#34;, \u0026#34;合肥,霸都\u0026#34;, \u0026#34;0551\u0026#34;}, {\u0026#34;2\u0026#34;, \u0026#34;北京\u0026#34;, \u0026#34;北京,帝都\u0026#34;, \u0026#34;010\u0026#34;}, {\u0026#34;3\u0026#34;, \u0026#34;浙江\u0026#34;, \u0026#34;杭州,电商之都\u0026#34;, \u0026#34;0571\u0026#34;}, {\u0026#34;4\u0026#34;, \u0026#34;上海\u0026#34;, \u0026#34;上海,魔都\u0026#34;, \u0026#34;021\u0026#34;}, } // 使用 w.WriteAll() 写入多条数据 // 该方法会内部之间调用 w.Flush()，之间写入数据 w.WriteAll(data) // w.Flush() if err := w.Error(); err != nil { log.Fatalln(\u0026#34;=\u0026gt; error writing csv:\u0026#34;, err) } } 可以看到代码中有个写入 UTF-8 BOM 头的操作，这是为啥呢？\n如在Windows环境中编写代码，总是选择将代码文件保存成 \u0026ldquo;无BOM头的UTF8\u0026rdquo; 格式(比如用Notepad++文本编辑器时)。\n但是因为历史原因，Windows下的文本文件需使用 \u0026ldquo;有BOM头的UTF8\u0026rdquo; 格式，否则Excel打开就乱码了。\n如何读取CSV文件？ 读取 csv 文件，可以使用 r.Read() 或 r.ReadAll() 方法。\n使用示例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 package main import ( \u0026#34;encoding/csv\u0026#34; \u0026#34;io\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; ) func main() { log.Println(\u0026#34;-- encoding/csv --\u0026#34;) // (1)从字符串中读取csv格式数据 // in := ` // first_name,last_name,username // \u0026#34;Rob\u0026#34;,\u0026#34;Pike\u0026#34;,rob // Ken,Thompson,ken // \u0026#34;Robert\u0026#34;,\u0026#34;Griesemer\u0026#34;,\u0026#34;gri\u0026#34; // ` // r := csv.NewReader(strings.NewReader(in)) // (2)从文件中读取csv格式数据 // 打开csv文件 fs, err := os.Open(\u0026#34;test.csv\u0026#34;) if err != nil { log.Fatalf(\u0026#34;can not open the file, err is %+v\u0026#34;, err) } defer fs.Close() r := csv.NewReader(fs) // 如果数据不多，可以一次读取所有内容 log.Println(\u0026#34;===\u0026gt; 使用 r.Read() 单行读取: \u0026#34;) for { record, err := r.Read() if err == io.EOF { break } if err != nil { log.Fatal(err) } log.Println(\u0026#34;-----\u0026gt;\u0026#34;, record) } // 如果数据不多，可以一次读取所有内容 log.Println(\u0026#34;===\u0026gt; 使用 r.ReadAll() 批量读取: \u0026#34;) records, err := r.ReadAll() if err != nil { log.Fatal(err) } log.Print(records) } 用到的 Package csv 接口 Package csv reads and writes comma-separated values (CSV) files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 错误 type ParseError func (e *ParseError) Error() string func (e *ParseError) Unwrap() error // 读 type Reader func NewReader(r io.Reader) *Reader func (r *Reader) Read() (record []string, err error) func (r *Reader) ReadAll() (records [][]string, err error) // 写 type Writer func NewWriter(w io.Writer) *Writer func (w *Writer) Error() error // 将缓存区的数据写入底层io.Writer中（或文件中） func (w *Writer) Flush() // 一次写入一条数据，写入到缓存区。 func (w *Writer) Write(record []string) error // 一次写入多条数据（批量） func (w *Writer) WriteAll(records [][]string) error 参考链接 https://golang.google.cn/pkg/encoding/csv/\n[END]\n","description":"","id":75,"section":"posts","tags":null,"title":"","uri":"http://localhost:1313/cn/posts/golang/golang-%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6-%E4%BD%BF%E7%94%A8excel%E6%89%93%E5%BC%80%E4%B9%B1%E7%A0%81%E6%80%8E%E4%B9%88%E5%8A%9E/"},{"content":"获取并解压 PHP 源代码: 1 2 3 php-8.1.0alpha2.tar.bz2\t2021-06-22 16:59\t14M\tphp-8.1.0alpha2.tar.gz\t2021-06-22 16:59\t18M\tphp-8.1.0alpha2.tar.xz\t2021-06-22 16:59\t11M\t下载 php-8.1.0alpha2.tar.xz\nwget https://downloads.php.net/~patrickallaert/php-8.1.0alpha2.tar.xz\n解压 xz 格式文件\n方法一：\n需要用到两步命令，首先利用 xz-utils 的 xz 命令将 linux-3.12.tar.xz 解压为 linux-3.12.tar，其次用 tar 命令将 linux-3.12.tar 完全解压。\nxz -d php-8.1.0alpha2.tar.xz\ntar -xf linux-3.12.tar\n方法二（推荐）\ntar -Jxf linux-3.12.tar.xz\n报错: No package \u0026rsquo;libxml-2.0\u0026rsquo; found\n解决办法:\n1 2 $ sudo apt install libxml2 $ sudo apt install libxml2-dev No package \u0026lsquo;sqlite3\u0026rsquo; found\n配置并构建 PHP。 在此步骤您可以使用很多选项自定义 PHP，例如启用某些扩展等。 运行 ./configure \u0026ndash;help 命令来获得完整的可用选项清单。 在本示例中，我们仅进行包含 PHP-FPM 和 MySQL 支持的简单配置。\n./configure \u0026ndash;enable-fpm \u0026ndash;with-mysql\nmake\nmake install\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 $ make install Installing shared extensions: /usr/local/lib/php/extensions/no-debug-non-zts-20201009/ Installing PHP CLI binary: /usr/local/bin/ Installing PHP CLI man page: /usr/local/php/man/man1/ Installing PHP FPM binary: /usr/local/sbin/ Installing PHP FPM defconfig: /usr/local/etc/ Installing PHP FPM man page: /usr/local/php/man/man8/ Installing PHP FPM status page: /usr/local/php/php/fpm/ Installing phpdbg binary: /usr/local/bin/ Installing phpdbg man page: /usr/local/php/man/man1/ Installing PHP CGI binary: /usr/local/bin/ Installing PHP CGI man page: /usr/local/php/man/man1/ Installing build environment: /usr/local/lib/php/build/ Installing header files: /usr/local/include/php/ Installing helper programs: /usr/local/bin/ program: phpize program: php-config Installing man pages: /usr/local/php/man/man1/ page: phpize.1 page: php-config.1 /root/softwares/php-8.1.0alpha2/build/shtool install -c ext/phar/phar.phar /usr/local/bin/phar.phar ln -s -f phar.phar /usr/local/bin/phar Installing PDO headers: /usr/local/include/php/ext/pdo/ /usr/local/bin/php -v\nPHP 8.1.0alpha2 (cli) (built: Jun 23 2021 17:52:07) (NTS)\nCopyright (c) The PHP Group\nZend Engine v4.1.0-dev, Copyright (c) Zend Technologies\nphp-fpm -v\nPHP 8.1.0alpha2 (fpm-fcgi) (built: Jun 23 2021 17:52:25)\nCopyright (c) The PHP Group\nZend Engine v4.1.0-dev, Copyright (c) Zend Technologies\n在启动服务之前，需要修改 php-fpm.conf 配置文件，确保 php-fpm 模块使用 www-data 用户和 www-data 用户组的身份运行。\nvim /usr/local/etc/php-fpm.d/www.conf\n找到以下内容并修改：\n; Unix user/group of processes\n; Note: The user is mandatory. If the group is not set, the default user\u0026rsquo;s group\n; will be used.\nuser = www-data\ngroup = www-data\n/usr/local/bin/php-fpm\n/usr/local/bin/php-fpm\n[23-Jun-2021 18:33:46] ERROR: unable to bind listening socket for address \u0026lsquo;127.0.0.1:9000\u0026rsquo;: Address already in use (98)\n创建配置文件，并将其复制到正确的位置。 cp php.ini-development /usr/local/php/php.ini\ncp /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf\ncp sapi/fpm/php-fpm.conf /usr/local/etc/php-fpm.conf\ncp sapi/fpm/php-fpm /usr/local/bin\n/usr/local/bin/php-fpm\n[23-Jun-2021 18:24:46] ERROR: failed to open configuration file \u0026lsquo;/usr/local/etc/php-fpm.conf\u0026rsquo;: No such file or directory (2)\n[23-Jun-2021 18:24:46] ERROR: failed to load configuration file \u0026lsquo;/usr/local/etc/php-fpm.conf\u0026rsquo;\ncp ./sapi/fpm/php-fpm.conf /usr/local/etc/php-fpm.conf\nmkdir -p /usr/local/webserver/php8.1.0\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 $ ./configure --prefix=/usr/local/webserver/php8.1.0 \\ --with-config-file-path=/usr/local/webserver/php8.1.0/etc \\ --with-zlib-dir \\ --with-freetype-dir \\ --enable-mbstring \\ --with-libxml-dir=/usr \\ --enable-soap \\ --enable-calendar \\ --with-curl \\ --with-mcrypt \\ --with-gd \\ --disable-rpath \\ --enable-inline-optimization \\ --with-bz2 \\ --with-zlib \\ --enable-sockets \\ --enable-sysvsem \\ --enable-sysvshm \\ --enable-pcntl \\ --enable-mbregex \\ --enable-exif \\ --enable-bcmath \\ --with-mhash \\ --enable-zip \\ --with-pcre-regex \\ --with-pdo-mysql \\ --with-mysqli \\ --with-mysql-sock=/var/run/mysqld/mysqld.sock \\ --with-jpeg-dir=/usr \\ --with-png-dir=/usr \\ --enable-gd-native-ttf \\ --with-openssl \\ --with-fpm-user=www-data \\ --with-fpm-group=www-data \\ --with-imap \\ --with-imap-ssl \\ --with-kerberos \\ --with-gettext \\ --with-xmlrpc \\ --with-xsl \\ --enable-opcache \\ --enable-fpm ","description":"","id":76,"section":"posts","tags":null,"title":"","uri":"http://localhost:1313/cn/posts/golang/linux-ubuntu-php8/"},{"content":"PPA 表示 个人软件包存档(Personal Package Archive)。\n每个版本的 Ubuntu 都有自己的四个官方软件仓库：\nMain - Canonical 支持的自由开源软件。\nUniverse - 社区维护的自由开源软件。\nRestricted - 设备的专有驱动程序。\nMultiverse - 受版权或法律问题限制的软件。\n当某个软件发布了新版本，Ubuntu 很大可能不会立即提供该新版本的软件。Ubuntu 提供了一个名为 Launchpad 的平台，使软件开发人员能够创建自己的软件仓库。\n终端用户，也就是你，可以将 PPA 仓库添加到 sources.list 文件中，当你更新系统时，你的系统会知道这个新软件的可用性，然后你可以使用标准的 sudo apt install 命令安装它。\n目前仅能安装 php7.4\n$ php -v Command \u0026#39;php\u0026#39; not found, but can be installed with: apt install php7.4-cli Debian开发人员Ondrej Sury维护着一个包含多个PHP版本的存储库\n1 2 3 $ sudo apt install software-properties-common $ sudo add-apt-repository ppa:ondrej/php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $ sudo apt install php8.0 Reading package lists... Done Building dependency tree Reading state information... Done The following additional packages will be installed: apache2 apache2-bin apache2-data apache2-utils libapache2-mod-php8.0 libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap libjansson4 php-common php8.0-cli php8.0-common php8.0-opcache php8.0-readline ssl-cert Suggested packages: apache2-doc apache2-suexec-pristine | apache2-suexec-custom www-browser php-pear openssl-blacklist The following NEW packages will be installed: apache2 apache2-bin apache2-data apache2-utils libapache2-mod-php8.0 libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap libjansson4 php-common php8.0 php8.0-cli php8.0-common php8.0-opcache php8.0-readline ssl-cert 0 upgraded, 17 newly installed, 0 to remove and 213 not upgraded. Need to get 6,190 kB of archives. After this operation, 27.8 MB of additional disk space will be used. Do you want to continue? [Y/n] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 $ apt search php8.0 libapache2-mod-php8.0: server-side, HTML-embedded scripting language (Apache 2 module) libphp8.0-embed: HTML-embedded scripting language (Embedded SAPI library) php8.0: server-side, HTML-embedded scripting language (metapackage) php8.0-amqp: AMQP extension for PHP php8.0-apcu: APC User Cache for PHP php8.0-ast: AST extension for PHP 7 php8.0-bcmath: Bcmath module for PHP php8.0-bz2: bzip2 module for PHP php8.0-cgi: server-side, HTML-embedded scripting language (CGI binary) php8.0-cli: command-line interpreter for the PHP scripting language php8.0-common: documentation, examples and common module for PHP php8.0-curl: CURL module for PHP php8.0-dba: DBA module for PHP php8.0-decimal: Arbitrary precision floating-point decimal for PHP php8.0-dev: Files for PHP8.0 module development php8.0-ds: PHP extension providing efficient data structures for PHP 7 php8.0-enchant: Enchant module for PHP php8.0-fpm: server-side, HTML-embedded scripting language (FPM-CGI binary) php8.0-gd: GD module for PHP php8.0-gearman: PHP wrapper to libgearman php8.0-gmagick: Provides a wrapper to the GraphicsMagick library php8.0-gmp: GMP module for PHP php8.0-gnupg: PHP wrapper around the gpgme library php8.0-grpc: High performance, open source, general RPC framework for PHP php8.0-http: PECL HTTP module for PHP Extended HTTP Support php8.0-igbinary: igbinary PHP serializer php8.0-imagick: Provides a wrapper to the ImageMagick library php8.0-imap: IMAP module for PHP php8.0-inotify: Inotify bindings for PHP php8.0-interbase: Interbase module for PHP php8.0-intl: Internationalisation module for PHP php8.0-ldap: LDAP module for PHP php8.0-lz4: LZ4 Extension for PHP php8.0-mailparse: Email message manipulation for PHP php8.0-maxminddb: Reader for the MaxMind DB file format for PHP php8.0-mbstring: MBSTRING module for PHP php8.0-mcrypt: PHP bindings for the libmcrypt library php8.0-memcache: memcache extension module for PHP php8.0-memcached: memcached extension module for PHP, uses libmemcached php8.0-mongodb: MongoDB driver for PHP php8.0-msgpack: PHP extension for interfacing with MessagePack php8.0-mysql: MySQL module for PHP php8.0-oauth: OAuth 1.0 consumer and provider extension php8.0-odbc: ODBC module for PHP php8.0-opcache: Zend OpCache module for PHP php8.0-pcov: Code coverage driver php8.0-pgsql: PostgreSQL module for PHP php8.0-phpdbg: server-side, HTML-embedded scripting language (PHPDBG binary) php8.0-protobuf: Protocol buffers bindings for PHP php8.0-pspell: pspell module for PHP php8.0-psr: PSR interfaces for PHP php8.0-raphf: raphf module for PHP php8.0-readline: readline module for PHP php8.0-redis: PHP extension for interfacing with Redis php8.0-rrd: PHP bindings to rrd tool system php8.0-smbclient: PHP wrapper for libsmbclient php8.0-snmp: SNMP module for PHP php8.0-soap: SOAP module for PHP php8.0-solr: PHP extension for communicating with Apache Solr server php8.0-sqlite3: SQLite3 module for PHP php8.0-ssh2: Bindings for the libssh2 library php8.0-swoole: Swoole Coroutine Fiber Async Programming Framework for PHP php8.0-sybase: Sybase module for PHP php8.0-tidy: tidy module for PHP php8.0-uuid: PHP UUID extension php8.0-vips: PHP extension for interfacing with libvips php8.0-xdebug: Xdebug Module for PHP php8.0-xhprof: Hierarchical Profiler for PHP 5.x php8.0-xml: DOM, SimpleXML, XML, and XSL module for PHP php8.0-xmlrpc: XML-RPC servers and clients functions for PHP php8.0-xsl:XSL module for PHP (dummy) php8.0-yac: YAC (Yet Another Cache) for PHP php8.0-yaml: YAML-1.1 parser and emitter for PHP php8.0-zip: Zip module for PHP php8.0-zmq: ZeroMQ messaging bindings for PHP php8.0-zstd: Zstandard extension for PHP 查看已经加载的PHP模块：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 $ php -m [PHP Modules] calendar Core ctype date exif FFI fileinfo filter ftp gettext hash iconv json libxml openssl pcntl pcre PDO Phar posix readline Reflection session shmop sockets sodium SPL standard sysvmsg sysvsem sysvshm tokenizer Zend OPcache zlib [Zend Modules] Zend OPcache sudo apt install php8.0-cli php8.0-opcache php8.0-fpm php8.0-mysql php8.0-redis\n安装更多有用扩展的示例：\nsudo apt install php8.0-{curl,mysql,redis,xml,bz2,curl,intl,readline}\n1 2 3 4 5 $ php -v PHP 8.0.7 (cli) (built: Jun 4 2021 21:26:10) ( NTS ) Copyright (c) The PHP Group Zend Engine v4.0.7, Copyright (c) Zend Technologies with Zend OPcache v8.0.7, Copyright (c), by Zend Technologies ","description":"","id":77,"section":"posts","tags":null,"title":"","uri":"http://localhost:1313/cn/posts/php/ubuntu20.04-php8-install/"}]